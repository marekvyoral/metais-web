//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Notification Manager
 * OpenAPI spec version: latest
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useNotificationManagerSwaggerClient } from '../hooks/useNotificationManagerSwaggerClient'
export interface SubscriptionListUi {
    subscriptionsUi?: SubscriptionUi[]
}

export interface MessageListUi {
    messages?: MessageUi[]
}

export interface UnsubscribeResponseUi {
    resultCode?: number
    message?: string
}

export type EventType = (typeof EventType)[keyof typeof EventType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventType = {
    SUCCESSFUL_REQUEST: 'SUCCESSFUL_REQUEST',
    FAILED_REQUEST: 'FAILED_REQUEST',
    USER_EVENT: 'USER_EVENT',
    STANDARDS_MEETING_EVENT: 'STANDARDS_MEETING_EVENT',
    STANDARDS_STANDARD_REQUEST_EVENT: 'STANDARDS_STANDARD_REQUEST_EVENT',
    STANDARDS_VOTE_EVENT: 'STANDARDS_VOTE_EVENT',
    CLAIM_EVENT: 'CLAIM_EVENT',
    CSRU_EVENT: 'CSRU_EVENT',
    INTEGRATION: 'INTEGRATION',
    CODELIST_EVENT: 'CODELIST_EVENT',
    CMDB_INVALIDATE_EVENT: 'CMDB_INVALIDATE_EVENT',
    GENERIC_NOTIF_EVENT: 'GENERIC_NOTIF_EVENT',
} as const

export interface Event {
    data?: string[]
    type?: EventType
}

export interface SubscribeResponseUi {
    subscribeID?: string
}

export interface SearchAttributeCriteriaUi {
    Value?: string
    Operator?: string
}

export interface SearchAttributeUi {
    Name?: string
    SearchAttributeCriteria?: SearchAttributeCriteriaUi[]
}

export interface SubscribeSearchCriteriaUi {
    Id?: number
    SubscriptionId?: number
    MatchAll?: boolean
    Owners?: string[]
    States?: string[]
    CreatedBy?: string[]
    LastModifiedBy?: string[]
    CreatedAtFrom?: string
    CreatedAtTo?: string
    LastModifiedAtFrom?: string
    LastModifiedAtTo?: string
    Attributes?: SearchAttributeUi[]
    OnlyOnMetaAttributes?: string[]
    OnlyOnAttributes?: string[]
    ChangeType?: string
    ItemType?: string
    LiableEntities?: string[]
}

export interface SubscriptionRequestUi {
    endpointUrl?: string
    endpointAutentificationType?: string
    subscribeSearchCriteria?: SubscribeSearchCriteriaUi[]
}

export interface EntityChangeUi {
    Id?: number
    ItemType?: string
    ItemId?: string
    ChangeType?: string
    Changed?: string
}

export interface SubscriptionUi {
    Id?: number
    EndpointURL?: string
    AuthType?: string
    NotificationInterval?: string
    NextNotificationTime?: string
    IsInternal?: boolean
    LastNotificationTime?: string
    SearchCriteria?: SubscribeSearchCriteriaUi[]
    EntityChanges?: EntityChangeUi[]
}

export interface MessageUi {
    id?: number
    locale?: string
    key?: string
    message?: string
}

export interface UpdateTemplateRequest {
    message?: string
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useGetTemplateDetailHook = () => {
    const getTemplateDetail = useNotificationManagerSwaggerClient<MessageUi>()

    return (id: number, signal?: AbortSignal) => {
        return getTemplateDetail({ url: `/templates/${id}`, method: 'get', signal })
    }
}

export const getGetTemplateDetailQueryKey = (id: number) => [`/templates/${id}`] as const

export const useGetTemplateDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>, TError = ApiError>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTemplateDetailQueryKey(id)

    const getTemplateDetail = useGetTemplateDetailHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>> = ({ signal }) => getTemplateDetail(id, signal)

    return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetTemplateDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>>
export type GetTemplateDetailQueryError = ApiError

export const useGetTemplateDetail = <TData = Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>, TError = ApiError>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemplateDetailHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTemplateDetailQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useEditTemplateHook = () => {
    const editTemplate = useNotificationManagerSwaggerClient<MessageUi>()

    return (id: number, updateTemplateRequest: UpdateTemplateRequest) => {
        return editTemplate({ url: `/templates/${id}`, method: 'put', headers: { 'Content-Type': 'application/json' }, data: updateTemplateRequest })
    }
}

export const useEditTemplateMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useEditTemplateHook>>>,
        TError,
        { id: number; data: UpdateTemplateRequest },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useEditTemplateHook>>>,
    TError,
    { id: number; data: UpdateTemplateRequest },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const editTemplate = useEditTemplateHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEditTemplateHook>>>, { id: number; data: UpdateTemplateRequest }> = (
        props,
    ) => {
        const { id, data } = props ?? {}

        return editTemplate(id, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type EditTemplateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEditTemplateHook>>>>
export type EditTemplateMutationBody = UpdateTemplateRequest
export type EditTemplateMutationError = ApiError

export const useEditTemplate = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useEditTemplateHook>>>,
        TError,
        { id: number; data: UpdateTemplateRequest },
        TContext
    >
}) => {
    const mutationOptions = useEditTemplateMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useEditSubscriberHook = () => {
    const editSubscriber = useNotificationManagerSwaggerClient<SubscriptionUi>()

    return (subscriptionUi: SubscriptionUi) => {
        return editSubscriber({ url: `/subscriptions/edit/`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: subscriptionUi })
    }
}

export const useEditSubscriberMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEditSubscriberHook>>>, TError, { data: SubscriptionUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEditSubscriberHook>>>, TError, { data: SubscriptionUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const editSubscriber = useEditSubscriberHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useEditSubscriberHook>>>, { data: SubscriptionUi }> = (props) => {
        const { data } = props ?? {}

        return editSubscriber(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type EditSubscriberMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useEditSubscriberHook>>>>
export type EditSubscriberMutationBody = SubscriptionUi
export type EditSubscriberMutationError = ApiError

export const useEditSubscriber = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useEditSubscriberHook>>>, TError, { data: SubscriptionUi }, TContext>
}) => {
    const mutationOptions = useEditSubscriberMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSubscribeForChangesHook = () => {
    const subscribeForChanges = useNotificationManagerSwaggerClient<SubscribeResponseUi>()

    return (subscriptionRequestUi: SubscriptionRequestUi) => {
        return subscribeForChanges({
            url: `/subscribe`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: subscriptionRequestUi,
        })
    }
}

export const useSubscribeForChangesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSubscribeForChangesHook>>>,
        TError,
        { data: SubscriptionRequestUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSubscribeForChangesHook>>>, TError, { data: SubscriptionRequestUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const subscribeForChanges = useSubscribeForChangesHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSubscribeForChangesHook>>>, { data: SubscriptionRequestUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return subscribeForChanges(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type SubscribeForChangesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSubscribeForChangesHook>>>>
export type SubscribeForChangesMutationBody = SubscriptionRequestUi
export type SubscribeForChangesMutationError = ApiError

export const useSubscribeForChanges = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSubscribeForChangesHook>>>,
        TError,
        { data: SubscriptionRequestUi },
        TContext
    >
}) => {
    const mutationOptions = useSubscribeForChangesMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useNotifyHook = () => {
    const notify = useNotificationManagerSwaggerClient<void>()

    return (event: Event) => {
        return notify({ url: `/`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: event })
    }
}

export const useNotifyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useNotifyHook>>>, TError, { data: Event }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useNotifyHook>>>, TError, { data: Event }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const notify = useNotifyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useNotifyHook>>>, { data: Event }> = (props) => {
        const { data } = props ?? {}

        return notify(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type NotifyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useNotifyHook>>>>
export type NotifyMutationBody = Event
export type NotifyMutationError = ApiError

export const useNotify = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useNotifyHook>>>, TError, { data: Event }, TContext>
}) => {
    const mutationOptions = useNotifyMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUnsubscribeForChangesHook = () => {
    const unsubscribeForChanges = useNotificationManagerSwaggerClient<UnsubscribeResponseUi>()

    return (subscribeId: string, signal?: AbortSignal) => {
        return unsubscribeForChanges({ url: `/unsubscribe/${subscribeId}`, method: 'get', signal })
    }
}

export const getUnsubscribeForChangesQueryKey = (subscribeId: string) => [`/unsubscribe/${subscribeId}`] as const

export const useUnsubscribeForChangesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>, TError = ApiError>(
    subscribeId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getUnsubscribeForChangesQueryKey(subscribeId)

    const unsubscribeForChanges = useUnsubscribeForChangesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>> = ({ signal }) =>
        unsubscribeForChanges(subscribeId, signal)

    return { queryKey, queryFn, enabled: !!subscribeId, ...queryOptions }
}

export type UnsubscribeForChangesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>>
export type UnsubscribeForChangesQueryError = ApiError

export const useUnsubscribeForChanges = <TData = Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>, TError = ApiError>(
    subscribeId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUnsubscribeForChangesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useUnsubscribeForChangesQueryOptions(subscribeId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetTemplatesHook = () => {
    const getTemplates = useNotificationManagerSwaggerClient<MessageListUi>()

    return (signal?: AbortSignal) => {
        return getTemplates({ url: `/templates`, method: 'get', signal })
    }
}

export const getGetTemplatesQueryKey = () => [`/templates`] as const

export const useGetTemplatesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTemplatesQueryKey()

    const getTemplates = useGetTemplatesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>> = ({ signal }) => getTemplates(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetTemplatesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>>
export type GetTemplatesQueryError = ApiError

export const useGetTemplates = <TData = Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemplatesHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTemplatesQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useProcessSubcriberHook = () => {
    const processSubcriber = useNotificationManagerSwaggerClient<number>()

    return (subscribeId: number, signal?: AbortSignal) => {
        return processSubcriber({ url: `/subscriptions/send/${subscribeId}`, method: 'get', signal })
    }
}

export const getProcessSubcriberQueryKey = (subscribeId: number) => [`/subscriptions/send/${subscribeId}`] as const

export const useProcessSubcriberQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>, TError = ApiError>(
    subscribeId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getProcessSubcriberQueryKey(subscribeId)

    const processSubcriber = useProcessSubcriberHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>> = ({ signal }) =>
        processSubcriber(subscribeId, signal)

    return { queryKey, queryFn, enabled: !!subscribeId, ...queryOptions }
}

export type ProcessSubcriberQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>>
export type ProcessSubcriberQueryError = ApiError

export const useProcessSubcriber = <TData = Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>, TError = ApiError>(
    subscribeId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useProcessSubcriberHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useProcessSubcriberQueryOptions(subscribeId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetAllSubscribersHook = () => {
    const getAllSubscribers = useNotificationManagerSwaggerClient<SubscriptionListUi>()

    return (signal?: AbortSignal) => {
        return getAllSubscribers({ url: `/subscriptions/getSubscribers`, method: 'get', signal })
    }
}

export const getGetAllSubscribersQueryKey = () => [`/subscriptions/getSubscribers`] as const

export const useGetAllSubscribersQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAllSubscribersQueryKey()

    const getAllSubscribers = useGetAllSubscribersHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>> = ({ signal }) => getAllSubscribers(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetAllSubscribersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>>
export type GetAllSubscribersQueryError = ApiError

export const useGetAllSubscribers = <TData = Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllSubscribersHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetAllSubscribersQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetSubscriberDetailHook = () => {
    const getSubscriberDetail = useNotificationManagerSwaggerClient<SubscriptionUi>()

    return (subscribeId: string, signal?: AbortSignal) => {
        return getSubscriberDetail({ url: `/subscriptions/getSubscriber/${subscribeId}`, method: 'get', signal })
    }
}

export const getGetSubscriberDetailQueryKey = (subscribeId: string) => [`/subscriptions/getSubscriber/${subscribeId}`] as const

export const useGetSubscriberDetailQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>, TError = ApiError>(
    subscribeId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetSubscriberDetailQueryKey(subscribeId)

    const getSubscriberDetail = useGetSubscriberDetailHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>> = ({ signal }) =>
        getSubscriberDetail(subscribeId, signal)

    return { queryKey, queryFn, enabled: !!subscribeId, ...queryOptions }
}

export type GetSubscriberDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>>
export type GetSubscriberDetailQueryError = ApiError

export const useGetSubscriberDetail = <TData = Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>, TError = ApiError>(
    subscribeId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetSubscriberDetailHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetSubscriberDetailQueryOptions(subscribeId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

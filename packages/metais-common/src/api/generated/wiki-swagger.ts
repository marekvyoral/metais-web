//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Wiki Integration
 * OpenAPI spec version: latest
 */
import { useQuery } from '@tanstack/react-query'
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useWikiSwaggerClient } from '../hooks/useWikiSwaggerClient'
export type UploadProjectDocumentParams = {
    documentUuid?: string
}

export type GetProjectDocumentParams = {
    createIfNotExists?: boolean
}

export interface ProjectDocument {
    name?: string
    type?: string
    groupName?: string
    wiki?: string
    xwikiPath?: string
    xwikiUrl?: string
    created?: string
    createdBy?: string
    modified?: string
    modifiedBy?: string
    majorVersion?: number
    minorVersion?: number
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useGetProjectDocumentHook = () => {
    const getProjectDocument = useWikiSwaggerClient<ProjectDocument>()

    return (projectUuid: string, documentId: number, params?: GetProjectDocumentParams, signal?: AbortSignal) => {
        return getProjectDocument({ url: `/project/${projectUuid}/document/${documentId}`, method: 'get', params, signal })
    }
}

export const getGetProjectDocumentQueryKey = (projectUuid: string, documentId: number, params?: GetProjectDocumentParams) =>
    [`/project/${projectUuid}/document/${documentId}`, ...(params ? [params] : [])] as const

export const useGetProjectDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>, TError = ApiError>(
    projectUuid: string,
    documentId: number,
    params?: GetProjectDocumentParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetProjectDocumentQueryKey(projectUuid, documentId, params)

    const getProjectDocument = useGetProjectDocumentHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>> = ({ signal }) =>
        getProjectDocument(projectUuid, documentId, params, signal)

    return { queryKey, queryFn, enabled: !!(projectUuid && documentId), ...queryOptions }
}

export type GetProjectDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>>
export type GetProjectDocumentQueryError = ApiError

export const useGetProjectDocument = <TData = Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>, TError = ApiError>(
    projectUuid: string,
    documentId: number,
    params?: GetProjectDocumentParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProjectDocumentHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetProjectDocumentQueryOptions(projectUuid, documentId, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUploadProjectDocumentHook = () => {
    const uploadProjectDocument = useWikiSwaggerClient<string>()

    return (projectUuid: string, documentId: number, params?: UploadProjectDocumentParams, signal?: AbortSignal) => {
        return uploadProjectDocument({ url: `/project/${projectUuid}/document/${documentId}/upload`, method: 'get', params, signal })
    }
}

export const getUploadProjectDocumentQueryKey = (projectUuid: string, documentId: number, params?: UploadProjectDocumentParams) =>
    [`/project/${projectUuid}/document/${documentId}/upload`, ...(params ? [params] : [])] as const

export const useUploadProjectDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>, TError = ApiError>(
    projectUuid: string,
    documentId: number,
    params?: UploadProjectDocumentParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getUploadProjectDocumentQueryKey(projectUuid, documentId, params)

    const uploadProjectDocument = useUploadProjectDocumentHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>> = ({ signal }) =>
        uploadProjectDocument(projectUuid, documentId, params, signal)

    return { queryKey, queryFn, enabled: !!(projectUuid && documentId), ...queryOptions }
}

export type UploadProjectDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>>
export type UploadProjectDocumentQueryError = ApiError

export const useUploadProjectDocument = <TData = Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>, TError = ApiError>(
    projectUuid: string,
    documentId: number,
    params?: UploadProjectDocumentParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useUploadProjectDocumentHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useUploadProjectDocumentQueryOptions(projectUuid, documentId, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Global Config
 * OpenAPI spec version: latest
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useGlobalConfSwaggerClient } from '../hooks/useGlobalConfSwaggerClient'
export type GetAll200 = { [key: string]: string }

export type GetAllUserInterface = (typeof GetAllUserInterface)[keyof typeof GetAllUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type GetAllLocale = (typeof GetAllLocale)[keyof typeof GetAllLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type GetAllParams = {
    locale: GetAllLocale
    userInterface: GetAllUserInterface
    interchanged?: boolean
    search?: string
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[]
}

export type GetDiffByFileBody = {
    jsonFile: Blob
}

export type GetDiffByFileUserInterface = (typeof GetDiffByFileUserInterface)[keyof typeof GetDiffByFileUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDiffByFileUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type GetDiffByFileLocale = (typeof GetDiffByFileLocale)[keyof typeof GetDiffByFileLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDiffByFileLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type GetDiffByFileParams = {
    locale: GetDiffByFileLocale
    userInterface: GetDiffByFileUserInterface
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[]
}

export type GetDiffBody = { [key: string]: string }

export type GetDiffUserInterface = (typeof GetDiffUserInterface)[keyof typeof GetDiffUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDiffUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type GetDiffLocale = (typeof GetDiffLocale)[keyof typeof GetDiffLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDiffLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type GetDiffParams = {
    locale: GetDiffLocale
    userInterface: GetDiffUserInterface
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: string[]
}

export type Save200 = { [key: string]: string }

export type SaveBody = { [key: string]: string }

export type SaveUserInterface = (typeof SaveUserInterface)[keyof typeof SaveUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SaveUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type SaveLocale = (typeof SaveLocale)[keyof typeof SaveLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SaveLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type SaveParams = {
    locale: SaveLocale
    userInterface: SaveUserInterface
}

export type SaveByFile200 = { [key: string]: string }

export type SaveByFileBody = {
    jsonFile: Blob
}

export type SaveByFileUserInterface = (typeof SaveByFileUserInterface)[keyof typeof SaveByFileUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SaveByFileUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type SaveByFileLocale = (typeof SaveByFileLocale)[keyof typeof SaveByFileLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SaveByFileLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type SaveByFileParams = {
    locale: SaveByFileLocale
    userInterface: SaveByFileUserInterface
}

export type UpdateByFile200 = { [key: string]: string }

export type UpdateByFileBody = {
    jsonFile: Blob
}

export type UpdateByFileUserInterface = (typeof UpdateByFileUserInterface)[keyof typeof UpdateByFileUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateByFileUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type UpdateByFileLocale = (typeof UpdateByFileLocale)[keyof typeof UpdateByFileLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateByFileLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type UpdateByFileParams = {
    locale: UpdateByFileLocale
    userInterface: UpdateByFileUserInterface
}

export type Update200 = { [key: string]: string }

export type UpdateBody = { [key: string]: string }

export type UpdateUserInterface = (typeof UpdateUserInterface)[keyof typeof UpdateUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type UpdateLocale = (typeof UpdateLocale)[keyof typeof UpdateLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export type UpdateParams = {
    locale: UpdateLocale
    userInterface: UpdateUserInterface
}

export interface TextConfDiff {
    key: string
    valueDb: string
    valueInput: string
    interchanged: boolean
    differenceOccurs: boolean
}

export type MapWrapperMap = { [key: string]: string }

export type MapWrapperUserInterface = (typeof MapWrapperUserInterface)[keyof typeof MapWrapperUserInterface]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapWrapperUserInterface = {
    PORTAL: 'PORTAL',
    ADMIN: 'ADMIN',
} as const

export type MapWrapperLocale = (typeof MapWrapperLocale)[keyof typeof MapWrapperLocale]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapWrapperLocale = {
    SK: 'SK',
    EN: 'EN',
} as const

export interface MapWrapper {
    locale: MapWrapperLocale
    userInterface: MapWrapperUserInterface
    map: MapWrapperMap
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useUpdateHook = () => {
    const update = useGlobalConfSwaggerClient<Update200>()

    return (updateBody: UpdateBody, params: UpdateParams) => {
        return update({
            url: `/textConf/update`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: updateBody,
            params,
        })
    }
}

export const useUpdateMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateHook>>>, TError, { data: UpdateBody; params: UpdateParams }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateHook>>>, TError, { data: UpdateBody; params: UpdateParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const update = useUpdateHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateHook>>>, { data: UpdateBody; params: UpdateParams }> = (
        props,
    ) => {
        const { data, params } = props ?? {}

        return update(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateHook>>>>
export type UpdateMutationBody = UpdateBody
export type UpdateMutationError = ApiError

export const useUpdate = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateHook>>>, TError, { data: UpdateBody; params: UpdateParams }, TContext>
}) => {
    const mutationOptions = useUpdateMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateMultipleHook = () => {
    const updateMultiple = useGlobalConfSwaggerClient<MapWrapper[]>()

    return (mapWrapper: MapWrapper[]) => {
        return updateMultiple({
            url: `/textConf/updateMultiple`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: mapWrapper,
        })
    }
}

export const useUpdateMultipleMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateMultipleHook>>>, TError, { data: MapWrapper[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateMultipleHook>>>, TError, { data: MapWrapper[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateMultiple = useUpdateMultipleHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateMultipleHook>>>, { data: MapWrapper[] }> = (props) => {
        const { data } = props ?? {}

        return updateMultiple(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateMultipleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateMultipleHook>>>>
export type UpdateMultipleMutationBody = MapWrapper[]
export type UpdateMultipleMutationError = ApiError

export const useUpdateMultiple = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateMultipleHook>>>, TError, { data: MapWrapper[] }, TContext>
}) => {
    const mutationOptions = useUpdateMultipleMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateByFileHook = () => {
    const updateByFile = useGlobalConfSwaggerClient<UpdateByFile200>()

    return (updateByFileBody: UpdateByFileBody, params: UpdateByFileParams) => {
        const formData = new FormData()
        formData.append('jsonFile', updateByFileBody.jsonFile)

        return updateByFile({
            url: `/textConf/updateByFile`,
            method: 'put',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
            params,
        })
    }
}

export const useUpdateByFileMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateByFileHook>>>,
        TError,
        { data: UpdateByFileBody; params: UpdateByFileParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateByFileHook>>>,
    TError,
    { data: UpdateByFileBody; params: UpdateByFileParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateByFile = useUpdateByFileHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateByFileHook>>>,
        { data: UpdateByFileBody; params: UpdateByFileParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return updateByFile(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateByFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateByFileHook>>>>
export type UpdateByFileMutationBody = UpdateByFileBody
export type UpdateByFileMutationError = ApiError

export const useUpdateByFile = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateByFileHook>>>,
        TError,
        { data: UpdateByFileBody; params: UpdateByFileParams },
        TContext
    >
}) => {
    const mutationOptions = useUpdateByFileMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSaveMultipleHook = () => {
    const saveMultiple = useGlobalConfSwaggerClient<MapWrapper[]>()

    return (processingType: 'NORMAL' | 'HARD_RESET', mapWrapper: MapWrapper[]) => {
        return saveMultiple({
            url: `/textConf/saveMultiple/${processingType}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: mapWrapper,
        })
    }
}

export const useSaveMultipleMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveMultipleHook>>>,
        TError,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: MapWrapper[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSaveMultipleHook>>>,
    TError,
    { processingType: 'NORMAL' | 'HARD_RESET'; data: MapWrapper[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const saveMultiple = useSaveMultipleHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useSaveMultipleHook>>>,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: MapWrapper[] }
    > = (props) => {
        const { processingType, data } = props ?? {}

        return saveMultiple(processingType, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveMultipleMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveMultipleHook>>>>
export type SaveMultipleMutationBody = MapWrapper[]
export type SaveMultipleMutationError = ApiError

export const useSaveMultiple = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveMultipleHook>>>,
        TError,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: MapWrapper[] },
        TContext
    >
}) => {
    const mutationOptions = useSaveMultipleMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSaveByFileHook = () => {
    const saveByFile = useGlobalConfSwaggerClient<SaveByFile200>()

    return (processingType: 'NORMAL' | 'HARD_RESET', saveByFileBody: SaveByFileBody, params: SaveByFileParams) => {
        const formData = new FormData()
        formData.append('jsonFile', saveByFileBody.jsonFile)

        return saveByFile({
            url: `/textConf/saveByFile/${processingType}`,
            method: 'post',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
            params,
        })
    }
}

export const useSaveByFileMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveByFileHook>>>,
        TError,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveByFileBody; params: SaveByFileParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSaveByFileHook>>>,
    TError,
    { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveByFileBody; params: SaveByFileParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const saveByFile = useSaveByFileHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useSaveByFileHook>>>,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveByFileBody; params: SaveByFileParams }
    > = (props) => {
        const { processingType, data, params } = props ?? {}

        return saveByFile(processingType, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveByFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveByFileHook>>>>
export type SaveByFileMutationBody = SaveByFileBody
export type SaveByFileMutationError = ApiError

export const useSaveByFile = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveByFileHook>>>,
        TError,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveByFileBody; params: SaveByFileParams },
        TContext
    >
}) => {
    const mutationOptions = useSaveByFileMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSaveHook = () => {
    const save = useGlobalConfSwaggerClient<Save200>()

    return (processingType: 'NORMAL' | 'HARD_RESET', saveBody: SaveBody, params: SaveParams) => {
        return save({
            url: `/textConf/save/${processingType}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: saveBody,
            params,
        })
    }
}

export const useSaveMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveHook>>>,
        TError,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveBody; params: SaveParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSaveHook>>>,
    TError,
    { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveBody; params: SaveParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const save = useSaveHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useSaveHook>>>,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveBody; params: SaveParams }
    > = (props) => {
        const { processingType, data, params } = props ?? {}

        return save(processingType, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveHook>>>>
export type SaveMutationBody = SaveBody
export type SaveMutationError = ApiError

export const useSave = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveHook>>>,
        TError,
        { processingType: 'NORMAL' | 'HARD_RESET'; data: SaveBody; params: SaveParams },
        TContext
    >
}) => {
    const mutationOptions = useSaveMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetDiffHook = () => {
    const getDiff = useGlobalConfSwaggerClient<TextConfDiff[]>()

    return (getDiffBody: GetDiffBody, params: GetDiffParams) => {
        return getDiff({
            url: `/textConf/getDiff`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: getDiffBody,
            params,
        })
    }
}

export const useGetDiffMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetDiffHook>>>,
        TError,
        { data: GetDiffBody; params: GetDiffParams },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetDiffHook>>>, TError, { data: GetDiffBody; params: GetDiffParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getDiff = useGetDiffHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetDiffHook>>>, { data: GetDiffBody; params: GetDiffParams }> = (
        props,
    ) => {
        const { data, params } = props ?? {}

        return getDiff(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetDiffMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDiffHook>>>>
export type GetDiffMutationBody = GetDiffBody
export type GetDiffMutationError = ApiError

export const useGetDiff = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetDiffHook>>>,
        TError,
        { data: GetDiffBody; params: GetDiffParams },
        TContext
    >
}) => {
    const mutationOptions = useGetDiffMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetDiffByFileHook = () => {
    const getDiffByFile = useGlobalConfSwaggerClient<TextConfDiff[]>()

    return (getDiffByFileBody: GetDiffByFileBody, params: GetDiffByFileParams) => {
        const formData = new FormData()
        formData.append('jsonFile', getDiffByFileBody.jsonFile)

        return getDiffByFile({
            url: `/textConf/getDiffByFile`,
            method: 'post',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
            params,
        })
    }
}

export const useGetDiffByFileMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetDiffByFileHook>>>,
        TError,
        { data: GetDiffByFileBody; params: GetDiffByFileParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetDiffByFileHook>>>,
    TError,
    { data: GetDiffByFileBody; params: GetDiffByFileParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getDiffByFile = useGetDiffByFileHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetDiffByFileHook>>>,
        { data: GetDiffByFileBody; params: GetDiffByFileParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return getDiffByFile(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetDiffByFileMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDiffByFileHook>>>>
export type GetDiffByFileMutationBody = GetDiffByFileBody
export type GetDiffByFileMutationError = ApiError

export const useGetDiffByFile = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetDiffByFileHook>>>,
        TError,
        { data: GetDiffByFileBody; params: GetDiffByFileParams },
        TContext
    >
}) => {
    const mutationOptions = useGetDiffByFileMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useAutomaticPeriodicUpdateHook = () => {
    const automaticPeriodicUpdate = useGlobalConfSwaggerClient<MapWrapper[]>()

    return () => {
        return automaticPeriodicUpdate({ url: `/textConf/automaticPeriodicUpdate`, method: 'post' })
    }
}

export const useAutomaticPeriodicUpdateMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAutomaticPeriodicUpdateHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAutomaticPeriodicUpdateHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const automaticPeriodicUpdate = useAutomaticPeriodicUpdateHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAutomaticPeriodicUpdateHook>>>, TVariables> = () => {
        return automaticPeriodicUpdate()
    }

    return { mutationFn, ...mutationOptions }
}

export type AutomaticPeriodicUpdateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAutomaticPeriodicUpdateHook>>>>

export type AutomaticPeriodicUpdateMutationError = ApiError

export const useAutomaticPeriodicUpdate = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAutomaticPeriodicUpdateHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useAutomaticPeriodicUpdateMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetAllHook = () => {
    const getAll = useGlobalConfSwaggerClient<GetAll200>()

    return (params: GetAllParams, signal?: AbortSignal) => {
        return getAll({ url: `/textConf/getAll`, method: 'get', params, signal })
    }
}

export const getGetAllQueryKey = (params: GetAllParams) => [`/textConf/getAll`, ...(params ? [params] : [])] as const

export const useGetAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>, TError = ApiError>(
    params: GetAllParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAllQueryKey(params)

    const getAll = useGetAllHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>> = ({ signal }) => getAll(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>>
export type GetAllQueryError = ApiError

export const useGetAll = <TData = Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>, TError = ApiError>(
    params: GetAllParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetAllQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS CMDB
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useCmdbSwaggerClient } from '../hooks/useCmdbSwaggerClient'
import { useClientForGetRoleParticipantBulkUsingPOST } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForreadCiNeighboursUsingPOST } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForReadCiListUsingPOST } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForGetRoleParticipantUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForReadCiNeighboursWithAllRelsUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForReadConfigurationItemUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForReadCiDerivedRelTypesUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
export type ReadAllCiHistoryVersionsParams = {
    page: number
    perPage: number
    action?: string[]
    lastModifiedBy?: string[]
    fromDate?: string
    toDate?: string
}

export type ReadCiHistoryVersionsParams = {
    page: number
    perPage: number
    action?: string[]
    lastModifiedBy?: string[]
    fromDate?: string
    toDate?: string
}

export type ReadCiHistoryVersionsIncidentRelsParams = {
    versionId: string
    page: number
    perPage: number
    includeCis?: boolean
    'excludeStates[]'?: string[]
}

export type ReadCiHistoryVersionParams = {
    timestamp?: string
    versionId?: string
}

export type GdprHistoryParams = {
    page: number
    perPage: number
    lastModifiedBy: string
}

export type ReadRelHistoryVersionsParams = {
    page: number
    perPage: number
}

export type ReadRelHistoryVersionParams = {
    timestamp?: string
    versionId?: string
}

export type GetMetricsParams = {
    pretty?: boolean
}

export type GetCountCiTypesByOwnerParams = {
    liableEntities?: string[]
}

export type ReadCiDerivedRelTypesParams = {
    states?: string[]
    page?: number
    perPage?: number
    'usageType.whiteList'?: string[]
    'usageType.blackList'?: string[]
}

export type ReadCiDerivedRelTypesCountParams = {
    'usageType.whiteList[]'?: string[]
    'usageType.blackList[]'?: string[]
    includeInvalidated?: boolean
}

export type ReadNeighboursConfigurationItemsParams = {
    nodeType?: string
    relationshipType?: string
    'nodeUsageType.whiteList[]'?: string[]
    'nodeUsageType.blackList[]'?: string[]
    'relationshipUsageType.whiteList[]'?: string[]
    'relationshipUsageType.blackList[]'?: string[]
    includeInvalidated?: boolean
}

export type ReadNeighboursConfigurationItemsCount200 = { [key: string]: number }

export type ReadNeighboursConfigurationItemsCountParams = {
    'usageType.whiteList[]'?: string[]
    'usageType.blackList[]'?: string[]
    includeInvalidated?: boolean
}

export type ReadRelationshipsParams = {
    'usageType.whiteList[]'?: string[]
    'usageType.blackList[]'?: string[]
    'types[]'?: string[]
}

export type ReadCiList2Params = {
    page?: number
    perPage?: number
    type?: string[]
    state?: string[]
    'usageType.whiteList[]'?: string[]
    'usageType.blackList[]'?: string[]
    owner?: string
    sortBy?: string
    sortType?: string
}

export type ReadCiNeighboursWithAllRelsParams = {
    relTypes?: string[]
    ciTypes?: string[]
    page?: number
    perPage?: number
    state?: string[]
    'usageType.whiteList[]'?: string[]
    'usageType.blackList[]'?: string[]
}

export type SearchAllParams = {
    text?: string
    page?: number
    perPage?: number
    state?: string[]
}

export type ReadReportsWithFilterParams = {
    fulltextSearch?: string
    reportType?: string
    category_id?: number
    sortBy?: string
    sortType?: string
    page?: number
    perPage?: number
    published?: boolean
    language?: string
}

export type CiRelTypesIntegrityCheck200 = { [key: string]: string[] }

export type GetProperties200 = { [key: string]: string }

export type ValidateCIsByTypesAndOwnerParams = {
    poUuid: string
    typeNames: string[]
    validationTypes?: string[]
}

export type InvalidateSetBody = ItemSetUi | WriteSetUi

export type InvalidateRelationshipNewStateItem = (typeof InvalidateRelationshipNewStateItem)[keyof typeof InvalidateRelationshipNewStateItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvalidateRelationshipNewStateItem = {
    DRAFT: 'DRAFT',
    AWAITING_APPROVAL: 'AWAITING_APPROVAL',
    APPROVED_BY_OWNER: 'APPROVED_BY_OWNER',
    INVALIDATED: 'INVALIDATED',
    DELETED: 'DELETED',
} as const

export type InvalidateRelationshipParams = {
    newState: InvalidateRelationshipNewStateItem[]
}

export type InvalidateSendEmail200 = { [key: string]: any }

export type ReadPoSuperiorPoRelationship200 = { [key: string]: RelationshipUi }

export type ReadConfigurationItemByRefID200 = { [key: string]: any }

export type ReadGroupItems200 = ItemSetUi | WriteSetUi

export type ReadMeetingRequestsFromStandardParams = {
    fulltextSearch?: string
    sortBy?: string
    ascending?: boolean
    page?: number
    perPage?: number
}

export type ReadStandardRequestsFromStandardParams = {
    fulltextSearch?: string
    sortBy?: string
    ascending?: boolean
    page?: number
    perPage?: number
}

export type ReadVotesFromStandardParams = {
    fulltextSearch?: string
    sortBy?: string
    ascending?: boolean
    page?: number
    perPage?: number
}

export type ConfluenceDocumentResultsParams = {
    spaceKey: string
    title: string
}

export type PartialReindexParams = {
    limit?: number
    timestamp: string
}

export type AsyncReindexParams = {
    perPage?: number
    ciPageFrom?: number
    relPageFrom?: number
}

export type ReindexRelationshipsParams = {
    limit?: number
    page?: number
    deleteIndex?: boolean
    isReindex?: boolean
}

export type ReadNotificationsWithFilterParams = {
    fulltextSearch?: string
    userId?: string
    eventType?: string
    sortBy?: string
    ascending?: boolean
    page?: number
    perPage?: number
    unread?: boolean
}

export interface GroupSetUi {
    groupSet?: GroupUi[]
}

export interface HistoryVersionUiConfigurationItemUi {
    actionTime?: string
    actions?: string[]
    actionBy?: string
    versionId?: string
    item?: ConfigurationItemUi
}

export interface HistoryVersionsListUiConfigurationItemUi {
    pagination?: PaginationUi
    historyVersions?: HistoryVersionUiConfigurationItemUi[]
}

export interface HistoryVersionUiRelationshipUi {
    actionTime?: string
    actions?: string[]
    actionBy?: string
    versionId?: string
    item?: RelationshipUi
}

export interface CiHistoryVersionsIncidentRelationshipsUi {
    pagination?: PaginationUi
    historyVersions?: HistoryVersionUiRelationshipUi[]
    incidentCis?: HistoryVersionUiConfigurationItemUi[]
}

export interface HistoryVersionsListUiRelationshipUi {
    pagination?: PaginationUi
    historyVersions?: HistoryVersionUiRelationshipUi[]
}

export interface PaginationData {
    page?: number
    perPage?: number
    totalPages?: number
    totalItems?: number
    totalUnreadedItems?: number
}

export interface NotificationsList {
    notifications?: Notification[]
    pagination?: PaginationData
}

export interface CountTypes {
    type?: string
    count?: number
}

export interface DerivedRelationshipCount {
    technicalName?: string
    count?: number
}

export interface DerivedCiTypeCountSummaryUi {
    derivedRelationshipCounts?: DerivedRelationshipCount[]
}

export interface ConfigurationItemNeighbourSetUi {
    fromCiSet?: ConfigurationItemUi[]
    toCiSet?: ConfigurationItemUi[]
}

export interface IncidentRelationshipSetUi {
    startRelationshipSet?: RelationshipUi[]
    endRelationshipSet?: RelationshipUi[]
}

export interface CiWithRelsUi {
    ci?: ConfigurationItemUi
    rels?: RelationshipUi[]
}

export interface CiWithRelsResultUi {
    pagination?: PaginationUi
    ciWithRels?: CiWithRelsUi[]
}

export type RelElasticItemAllOf = {
    type?: string
    typeName?: string
    state?: string
    startUuid?: string
    startType?: string
    startName?: string
    endUuid?: string
    endType?: string
    endName?: string
    PO?: string
}

export interface HighlightResult {
    field?: string
    highlightText?: string[]
}

export interface HighLightResultHolder {
    attributes?: HighlightResult[]
    metaAttributes?: HighlightResult[]
}

export interface GeneralElasticItemSet {
    pagination?: PaginationUi
    generalElasticItemSet?: GeneralElasticItemSetGeneralElasticItemSetItem[]
}

export interface GeneralElasticItem {
    itemType?: string
    uuid?: string
    highlight?: HighLightResultHolder
}

export type RelElasticItem = GeneralElasticItem & RelElasticItemAllOf

export type DMSDocElasticItemAllOf = {
    fileName?: string
    contentLength?: number
    type?: string
}

export type DMSDocElasticItem = GeneralElasticItem & DMSDocElasticItemAllOf

export type CiElasticItemAllOf = {
    type?: string
    typeName?: string
    state?: string
    name?: string
    code?: string
    PO?: string
}

export type CiElasticItem = GeneralElasticItem & CiElasticItemAllOf

export type GeneralElasticItemSetGeneralElasticItemSetItem = CiElasticItem | DMSDocElasticItem | RelElasticItem

export interface ReportHolderUi {
    reports?: ReportUi[]
    pagination?: PaginationUi
}

export interface ReportCategoryUi {
    id?: number
    name?: string
    nameEn?: string
}

export interface ReportUi {
    id?: number
    name?: string
    description?: string
    lookupKey?: string
    publikovany?: boolean
    reportType?: string
    lastUpdatedTime?: string
    language?: string
    category?: ReportCategoryUi
}

export interface RequestStatusResultUi {
    processed?: boolean
    status?: string
    processedAt?: string
}

export interface IntegrityCheckObject {
    type?: string
    elasticValue?: number
    neo4jValue?: number
}

export interface IntegrityCheckHolder {
    configurationItemsDifferences?: string[]
    relationshipsDifferences?: string[]
    configurationItems?: IntegrityCheckObject[]
    relationships?: IntegrityCheckObject[]
}

export interface GetResponseWrapper {
    isExist?: boolean
    sourceAsString?: string
}

export type ReindexStageState = (typeof ReindexStageState)[keyof typeof ReindexStageState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReindexStageState = {
    CREATED: 'CREATED',
    IN_PROGRESS: 'IN_PROGRESS',
    DONE: 'DONE',
    CANCELLED: 'CANCELLED',
    FAILED: 'FAILED',
} as const

export type ReindexStageStage = (typeof ReindexStageStage)[keyof typeof ReindexStageStage]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReindexStageStage = {
    CI: 'CI',
    RELATIONS: 'RELATIONS',
    PO: 'PO',
} as const

export interface ReindexStage {
    stage?: ReindexStageStage
    state?: ReindexStageState
    startAt?: string
    finishedAt?: string
    lastElasticCallAt?: string
    elasticIndexTotal?: number
    exception?: string
}

export interface ReindexTask {
    uuid?: string
    stages?: ReindexStage[]
}

export type ReindexStageSimpleDTOState = (typeof ReindexStageSimpleDTOState)[keyof typeof ReindexStageSimpleDTOState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReindexStageSimpleDTOState = {
    CREATED: 'CREATED',
    IN_PROGRESS: 'IN_PROGRESS',
    DONE: 'DONE',
    CANCELLED: 'CANCELLED',
    FAILED: 'FAILED',
} as const

export type ReindexStageSimpleDTOStage = (typeof ReindexStageSimpleDTOStage)[keyof typeof ReindexStageSimpleDTOStage]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReindexStageSimpleDTOStage = {
    CI: 'CI',
    RELATIONS: 'RELATIONS',
    PO: 'PO',
} as const

export interface ReindexStageSimpleDTO {
    stage?: ReindexStageSimpleDTOStage
    state?: ReindexStageSimpleDTOState
    startAt?: string
    finishedAt?: string
}

export interface ReindexTaskSimpleDTO {
    uuid?: string
    stages?: ReindexStageSimpleDTO[]
}

export interface RelationshipsProblemMessageUi {
    relTypeName?: string
    problemType?: string
    relOrientation?: string
    relationsUuids?: string[]
}

export interface RelationshipsProblemHolderUi {
    relationshipsProblemMessages?: RelationshipsProblemMessageUi[]
    lastModification?: string
}

export interface MissingAttributesHolderUi {
    missingAttributes?: string[]
    lastModification?: string
}

export interface CiProblemMessageUi {
    ciUuid?: string
    missingAttributesHolder?: MissingAttributesHolderUi
    relationshipsProblemHolder?: RelationshipsProblemHolderUi
}

export interface CiProblemMessageHolderUi {
    ciTypeName?: string
    ciProblemMessages?: CiProblemMessageUi[]
}

export interface CiProblemMessageHolderListUi {
    ciProblemMessageHolders?: CiProblemMessageHolderUi[]
}

export interface ChangeHierarchyUi {
    oldHierarchy?: RelationshipUi
    newHierarchy?: RelationshipUi
}

export interface RequestId {
    id?: string
}

export interface UserFeedbackErrorReportUi {
    title?: string
    description?: string
    data?: string
}

export interface ConfigurationItemInvalidateUi {
    type?: string
    uuid?: string
    owner?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
    invalidateReason?: InvalidateReason
}

export interface RelationshipInvalidateUi {
    type?: string
    uuid?: string
    owner?: string
    startUuid?: string
    endUuid?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
    invalidateReason?: InvalidateReason
}

export interface Notification {
    id?: number
    userId?: string
    message?: string
    messagePerex?: string
    targetUri?: string
    eventType?: string
    createdAt?: string
    readedAt?: string
    deleted?: boolean
    sendToUserIdSet?: string[]
    notifType?: string
}

export interface ConfigurationItemSetUi {
    pagination?: PaginationUi
    configurationItemSet?: ConfigurationItemUi[]
    incidentRelationshipSet?: RelationshipUi[]
}

export interface CiRelationshipCiPreviewHolderUi {
    ciStart?: CiPreviewUi
    rel?: RelationshipUi
    ciEnd?: CiPreviewUi
}

export interface CiRelationshipCiPreviewHolderListUi {
    pagination?: PaginationUi
    ciRelCiList?: CiRelationshipCiPreviewHolderUi[]
}

export interface CiPreviewUi {
    uuid?: string
    metaIsCode?: string
    genName?: string
}

export interface CiUuidSetUi {
    pagination?: PaginationUi
    ciUuids?: string[]
}

export interface RelTypeFilterUi {
    relType?: string
    relCiUuids?: string[]
    onlyValidRel?: boolean
    byHierarchy?: boolean
}

export interface CiListFilterContainerUi {
    page?: number
    perpage?: number
    sortBy?: string
    sortType?: string
    sortSource?: string
    sortByEndCi?: boolean
    getIncidentRelations?: boolean
    usageTypeFilter?: UsageTypeFilterUi
    filter?: CiFilterUi
    relFilter?: RelFilterUi
}

export interface RelationshipSetUi {
    pagination?: PaginationUi
    relationshipSet?: RelationshipUi[]
}

export interface IncidentRelationshipsFilterUi {
    ciUuids?: string[]
    page?: number
    perPage?: number
}

export type QueryResultTableUiDataItem = { [key: string]: { [key: string]: any } }

export type QueryResultTableUiTypes = { [key: string]: 'node' | 'rel' | 'prop' }

export interface QueryResultTableUi {
    types?: QueryResultTableUiTypes
    data?: QueryResultTableUiDataItem[]
}

export type QueryUiParams = { [key: string]: { [key: string]: any } }

export interface QueryUi {
    query?: string
    params?: QueryUiParams
}

export interface NeighbourSetUi {
    fromNodes?: NeighboursResultUi
    toNodes?: NeighboursResultUi
}

export interface NeighbourPairUi {
    relationship?: RelationshipUi
    configurationItem?: ConfigurationItemUi
}

export interface NeighboursResultUi {
    pagination?: PaginationUi
    neighbourPairs?: NeighbourPairUi[]
}

export interface NeighboursFilterUi {
    relType?: string[]
    ciType?: string[]
    usageType?: string[]
    fullTextSearch?: string
    searchFields?: string[]
    filterType?: string
    metaAttributes?: FilterMetaAttributesUi
    excludedRelTypes?: string[]
    excludedCiUuids?: string[]
}

export interface NeighboursFilterContainerUi {
    page?: number
    perpage?: number
    sortBy?: string
    sortType?: string
    sortSource?: string
    neighboursFilter?: NeighboursFilterUi
}

export interface RelationshipListUi {
    pagination?: PaginationUi
    relationshipList?: RelationshipUi[]
}

export interface RelListFilterContainerUi {
    page?: number
    perpage?: number
    sortBy?: string
    sortType?: string
    sortSource?: string
    sortByEndCi?: boolean
    getIncidentRelations?: boolean
    usageTypeFilter?: UsageTypeFilterUi
    relFilter?: RelFilterUi
}

export interface FilterValueUi {
    equality?: string
    value?: string
}

export interface FilterAttributesUi {
    name?: string
    filterValue?: FilterValueUi[]
}

export interface RelFilterUi {
    type?: string[]
    usageType?: string[]
    uuid?: string[]
    attributes?: FilterAttributesUi[]
    metaAttributes?: FilterMetaAttributesUi
    fullTextSearch?: string
    searchFields?: string[]
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    poUuid?: string
    startCiTypeName?: string[]
    endCiTypeName?: string[]
    startCiUuid?: string[]
    endCiUuid?: string[]
    startOrEndCiUuid?: string[]
}

export interface UuidSetUi {
    uuids?: string[]
}

export interface RelationshipElasticPreviewUi {
    relType?: string
    relUuid?: string
    startCiType?: string
    startCiUuid?: string
    startCiName?: string
    endCiType?: string
    endCiUuid?: string
    endCiName?: string
    usageType?: string
    relState?: string
}

export interface RelationshipElasticPreviewHolderUi {
    pagination?: PaginationUi
    ciRelCi?: RelationshipElasticPreviewUi[]
}

export interface FilterMetaAttributesUi {
    owner?: string[]
    liableEntity?: string[]
    liableEntityByHierarchy?: boolean
    lastAction?: string[]
    state?: string[]
    createdBy?: string[]
    createdAtFrom?: string
    createdAtTo?: string
    lastModifiedBy?: string[]
    lastModifiedAtFrom?: string
    lastModifiedAtTo?: string
}

export interface CiFilterUi {
    type?: string[]
    usageType?: string[]
    uuid?: string[]
    attributes?: FilterAttributesUi[]
    metaAttributes?: FilterMetaAttributesUi
    fullTextSearch?: string
    searchFields?: string[]
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    relTypeFilters?: RelTypeFilterUi[]
    poUuid?: string
}

export interface RelFilterSmallUi {
    text?: string
    relTypes?: string[]
    ciUuids?: string[]
    ciTypes?: string[]
    state?: string[]
    page?: number
    perpage?: number
    sortBy?: string
    sortType?: string
    sortSource?: string
    sortByEndCi?: boolean
    metaAttributes?: FilterMetaAttributesUi
}

export type RoleType = (typeof RoleType)[keyof typeof RoleType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleType = {
    SYSTEM: 'SYSTEM',
    NON_SYSTEM: 'NON_SYSTEM',
} as const

export interface Role {
    uuid?: string
    category?: string
    name?: string
    description?: string
    weight?: number
    type?: RoleType
    assignedGroup?: string
}

export interface RoleParticipantUI {
    owner?: string
    gid?: string
    configurationItemUi?: ConfigurationItemUi
    role?: Role
}

export interface GidSetUi {
    gids?: string[]
}

export interface ConfigurationItemsListUi {
    configurationItemSet?: ConfigurationItemUi[]
}

export interface MetaIsCodesListUi {
    metaIsCodes?: string[]
}

export interface ItemSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
}

export type WriteSetUi = ItemSetUi

export type UsageTypeFilterUiBlackListItem = (typeof UsageTypeFilterUiBlackListItem)[keyof typeof UsageTypeFilterUiBlackListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiBlackListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export type UsageTypeFilterUiWhiteListItem = (typeof UsageTypeFilterUiWhiteListItem)[keyof typeof UsageTypeFilterUiWhiteListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiWhiteListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export interface UsageTypeFilterUi {
    whiteList?: UsageTypeFilterUiWhiteListItem[]
    blackList?: UsageTypeFilterUiBlackListItem[]
}

export interface GroupMembersFilterUi {
    nodeUsageTypeFilter?: UsageTypeFilterUi
    relationshipUsageTypeFilter?: UsageTypeFilterUi
    asIfInGroup?: string[]
    relTypesStartingInGroup?: string[]
    relTypesEndingInGroup?: string[]
    newComtool?: string
}

export interface RecycleCisUi {
    ciIdList?: string[]
}

export interface PoWithHierarchyUi {
    po?: ConfigurationItemUi
    hierarchy?: RelationshipUi
}

export interface RecycleRelsUi {
    relIdList?: string[]
}

export interface AddressObjectUi {
    number?: string
    village?: string
    street?: string
    zipCode?: string
}

export interface HierarchyRightsUi {
    poUUID?: string
    poName?: string
    path?: string
    HIERARCHY_FROM_ROOT?: number
    roles?: string[]
    address?: AddressObjectUi
}

export interface HierarchyRightsResultUi {
    pagination?: PaginationUi
    rights?: HierarchyRightsUi[]
}

export interface HierarchyPOFilterUi {
    page?: number
    perpage?: number
    sortBy?: string
    sortType?: string
    poUUID?: string
    fullTextSearch?: string
    rights?: HierarchyRightsUi[]
}

export interface MeetingRequestUi {
    id?: number
    name?: string
    state?: string
    beginDate?: string
    endDate?: string
}

export interface StandardRequestUi {
    id?: number
    srName?: string
    standardRequestState?: string
    createdBy?: string
}

export interface VoteUi {
    id?: number
    name?: string
    voteState?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface PaginationUi {
    page?: number
    perPage?: number
    totalPages?: number
    totaltems?: number
}

export interface MeetingRequestListUi {
    meetingRequests?: MeetingRequestUi[]
    pagination?: PaginationUi
}

export interface StandardRequestListUi {
    standardRequests?: StandardRequestUi[]
    pagination?: PaginationUi
}

export interface VoteListUi {
    votes?: VoteUi[]
    pagination?: PaginationUi
}

export interface GroupUi {
    uuid?: string
    name?: string
    newComtool?: string
}

export interface StoreGroupMembersSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    processedRelTypesStartingInGroup?: string[]
    processedRelTypesEndingInGroup?: string[]
    doNotInvalidateOutgoing?: boolean
    doNotInvalidateIncomming?: boolean
    newComtool?: string
    invalidateReason?: InvalidateReason
}

export interface Links {
    webui?: string
    edit?: string
    tinyui?: string
    self?: string
}

export interface Extensions {
    position?: string
}

export interface Expandable {
    container?: string
    metadata?: string
    operations?: string
    children?: string
    restrictions?: string
    history?: string
    ancestors?: string
    body?: string
    descendants?: string
    space?: string
}

export interface RequestIdUi {
    requestId?: string
}

export interface ProfilePicture {
    path?: string
    width?: number
    height?: number
    isDefault?: boolean
}

export interface Links {
    self?: string
}

export interface Links {
    self?: string
}

export interface Expandable {
    content?: string
}

export interface Expandable {
    status?: string
}

export interface By {
    type?: string
    username?: string
    userKey?: string
    profilePicture?: ProfilePicture
    displayName?: string
    _links?: Links
    _expandable?: Expandable
}

export interface Version {
    by?: By
    when?: string
    message?: string
    number?: number
    minorEdit?: boolean
    hidden?: boolean
    _links?: Links
    _expandable?: Expandable
}

export interface Result {
    id?: string
    type?: string
    status?: string
    title?: string
    version?: Version
    extensions?: Extensions
    _links?: Links
    _expandable?: Expandable
}

export type ErrorMessageUiErrorType = (typeof ErrorMessageUiErrorType)[keyof typeof ErrorMessageUiErrorType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiErrorType = {
    OWNER: 'OWNER',
    OWNER_CREATE_ROLE: 'OWNER_CREATE_ROLE',
    CREATE_CI: 'CREATE_CI',
    UPDATE_CI: 'UPDATE_CI',
    CREATE_REL: 'CREATE_REL',
    UPDATE_REL: 'UPDATE_REL',
    UPDATE_INVALIDATE_CI: 'UPDATE_INVALIDATE_CI',
    CHANGE_ATTRIBUTE: 'CHANGE_ATTRIBUTE',
    LIMIT: 'LIMIT',
    ENUM: 'ENUM',
    EXPRESION: 'EXPRESION',
    ATTRIBUTE: 'ATTRIBUTE',
    MANDATORY: 'MANDATORY',
    REGEX: 'REGEX',
    NUMBER_FORMAT: 'NUMBER_FORMAT',
    MAX_STRING_SIZE: 'MAX_STRING_SIZE',
    INVALID_TYPE: 'INVALID_TYPE',
    GROUP_RIGHT: 'GROUP_RIGHT',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    PROCESSING_ERROR: 'PROCESSING_ERROR',
} as const

export type ErrorMessageUiItemType = (typeof ErrorMessageUiItemType)[keyof typeof ErrorMessageUiItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiItemType = {
    RELATIONSHIP: 'RELATIONSHIP',
    CONFIGURATION_ITEM: 'CONFIGURATION_ITEM',
} as const

export interface ErrorMessageUi {
    itemType?: ErrorMessageUiItemType
    itemId?: string
    attributeName?: string
    errorDetail?: ErrorDetailUi
    errorType?: ErrorMessageUiErrorType
}

export interface ErrorMessageHolderUi {
    messages?: ErrorMessageUi[]
}

export interface ErrorDetailUi {
    minConstrain?: number
    maxConstrain?: number
    enumConstrain?: string
    regex?: string
    notExistAttribute?: string
    notFilledAttribute?: string
    notNumber?: string
    notAllowedExpression?: string
    notAuthorizedGid?: string
    notAuthorizedRole?: string
    itemTechnicalTypeName?: string
    description?: string
    maxStringSize?: number
    invalidType?: string
}

export interface RecycleSetUi {
    relIdSet?: string[]
    ciIdSet?: string[]
}

export interface MetaAttributesUi {
    owner?: string
    state?: string
    createdBy?: string
    createdAt?: string
    lastModifiedBy?: string
    lastModifiedAt?: string
}

export interface RelationshipUi {
    type?: string
    uuid?: string
    owner?: string
    startUuid?: string
    endUuid?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
}

export interface InvalidateReason {
    comment?: string
}

export interface StoreSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
}

export interface InvalidateSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
}

export interface CustomMessageUi {
    messageSuccessType?: string
    successPlaceholderValues?: string[]
    messageFailType?: string
    failPlaceholderValues?: string[]
}

export interface GraphRequestUi {
    storeSet?: StoreSetUi
    invalidateSet?: InvalidateSetUi
    changeOwnerSet?: ChangeOwnerSetUi
    recycleSet?: RecycleSetUi
    customMessage?: CustomMessageUi
}

export type ConfigurationItemUiAttributes = { [key: string]: any }

export interface ConfigurationItemUi {
    type?: string
    uuid?: string
    owner?: string
    attributes?: ConfigurationItemUiAttributes
    metaAttributes?: MetaAttributesUi
}

export type ChangeOwnerDataUiChangeType = (typeof ChangeOwnerDataUiChangeType)[keyof typeof ChangeOwnerDataUiChangeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeOwnerDataUiChangeType = {
    changeCmdbItemAndRelatedCmdbItems: 'changeCmdbItemAndRelatedCmdbItems',
    changeCmdbItemAndRelatedCmdbItemsWithSameOwner: 'changeCmdbItemAndRelatedCmdbItemsWithSameOwner',
    changeCmdbItem: 'changeCmdbItem',
} as const

export interface ChangeOwnerDataUi {
    newOwner?: string
    changeReason?: string
    changeDescription?: string
    changeType?: ChangeOwnerDataUiChangeType
}

export interface ChangeOwnerSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
    changeOwnerData?: ChangeOwnerDataUi
}

export type AttributeUiValue = { [key: string]: any }

export interface AttributeUi {
    name?: string
    value?: AttributeUiValue
}

export type NotificationUpdateHolderUiTypeOfAction =
    (typeof NotificationUpdateHolderUiTypeOfAction)[keyof typeof NotificationUpdateHolderUiTypeOfAction]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationUpdateHolderUiTypeOfAction = {
    READ: 'READ',
    REMOVE: 'REMOVE',
    REMOVE_UNREAD: 'REMOVE_UNREAD',
} as const

export interface NotificationUpdateHolderUi {
    ids?: number[]
    typeOfAction?: NotificationUpdateHolderUiTypeOfAction
    userId?: string
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useReadNotificationsWithFilterHook = () => {
    const readNotificationsWithFilter = useCmdbSwaggerClient<NotificationsList>()

    return (params?: ReadNotificationsWithFilterParams, signal?: AbortSignal) => {
        return readNotificationsWithFilter({ url: `/notification`, method: 'get', params, signal })
    }
}

export const getReadNotificationsWithFilterQueryKey = (params?: ReadNotificationsWithFilterParams) =>
    [`/notification`, ...(params ? [params] : [])] as const

export const useReadNotificationsWithFilterQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>,
    TError = ApiError,
>(
    params?: ReadNotificationsWithFilterParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadNotificationsWithFilterQueryKey(params)

    const readNotificationsWithFilter = useReadNotificationsWithFilterHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>> = ({ signal }) =>
        readNotificationsWithFilter(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadNotificationsWithFilterQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>>
export type ReadNotificationsWithFilterQueryError = ApiError

export const useReadNotificationsWithFilter = <TData = Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>, TError = ApiError>(
    params?: ReadNotificationsWithFilterParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadNotificationsWithFilterQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUpdateNotificationsHook = () => {
    const updateNotifications = useCmdbSwaggerClient<void>()

    return (notificationUpdateHolderUi: NotificationUpdateHolderUi) => {
        return updateNotifications({
            url: `/notification`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: notificationUpdateHolderUi,
        })
    }
}

export const useUpdateNotificationsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsHook>>>,
        TError,
        { data: NotificationUpdateHolderUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsHook>>>,
    TError,
    { data: NotificationUpdateHolderUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateNotifications = useUpdateNotificationsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsHook>>>, { data: NotificationUpdateHolderUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return updateNotifications(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateNotificationsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsHook>>>>
export type UpdateNotificationsMutationBody = NotificationUpdateHolderUi
export type UpdateNotificationsMutationError = ApiError

export const useUpdateNotifications = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsHook>>>,
        TError,
        { data: NotificationUpdateHolderUi },
        TContext
    >
}) => {
    const mutationOptions = useUpdateNotificationsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreNotificationsHook = () => {
    const storeNotifications = useCmdbSwaggerClient<boolean>()

    return (notification: Notification[]) => {
        return storeNotifications({ url: `/notification`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: notification })
    }
}

export const useStoreNotificationsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreNotificationsHook>>>, TError, { data: Notification[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreNotificationsHook>>>, TError, { data: Notification[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeNotifications = useStoreNotificationsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreNotificationsHook>>>, { data: Notification[] }> = (props) => {
        const { data } = props ?? {}

        return storeNotifications(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreNotificationsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreNotificationsHook>>>>
export type StoreNotificationsMutationBody = Notification[]
export type StoreNotificationsMutationError = ApiError

export const useStoreNotifications = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreNotificationsHook>>>, TError, { data: Notification[] }, TContext>
}) => {
    const mutationOptions = useStoreNotificationsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary validateStoreGraph
 */
export const useValidateStoreGraphHook = () => {
    const validateStoreGraph = useCmdbSwaggerClient<ErrorMessageHolderUi>()

    return (graphRequestUi: GraphRequestUi) => {
        return validateStoreGraph({ url: `/validate/graph`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: graphRequestUi })
    }
}

export const useValidateStoreGraphMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphHook>>>, TError, { data: GraphRequestUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphHook>>>, TError, { data: GraphRequestUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const validateStoreGraph = useValidateStoreGraphHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphHook>>>, { data: GraphRequestUi }> = (props) => {
        const { data } = props ?? {}

        return validateStoreGraph(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ValidateStoreGraphMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphHook>>>>
export type ValidateStoreGraphMutationBody = GraphRequestUi
export type ValidateStoreGraphMutationError = ApiError

/**
 * @summary validateStoreGraph
 */
export const useValidateStoreGraph = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphHook>>>, TError, { data: GraphRequestUi }, TContext>
}) => {
    const mutationOptions = useValidateStoreGraphMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateConfluenceHook = () => {
    const updateConfluence = useCmdbSwaggerClient<RequestIdUi>()

    return (docUuid: string, version: Version) => {
        return updateConfluence({
            url: `/util/update/docConfluence/${docUuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: version,
        })
    }
}

export const useUpdateConfluenceMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceHook>>>,
        TError,
        { docUuid: string; data: Version },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceHook>>>, TError, { docUuid: string; data: Version }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateConfluence = useUpdateConfluenceHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceHook>>>, { docUuid: string; data: Version }> = (
        props,
    ) => {
        const { docUuid, data } = props ?? {}

        return updateConfluence(docUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateConfluenceMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceHook>>>>
export type UpdateConfluenceMutationBody = Version
export type UpdateConfluenceMutationError = ApiError

export const useUpdateConfluence = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceHook>>>,
        TError,
        { docUuid: string; data: Version },
        TContext
    >
}) => {
    const mutationOptions = useUpdateConfluenceMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReindexRelationshipsHook = () => {
    const reindexRelationships = useCmdbSwaggerClient<string>()

    return (params?: ReindexRelationshipsParams) => {
        return reindexRelationships({ url: `/util/reindexrelationships`, method: 'post', params })
    }
}

export const useReindexRelationshipsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsHook>>>,
        TError,
        { params?: ReindexRelationshipsParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsHook>>>,
    TError,
    { params?: ReindexRelationshipsParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexRelationships = useReindexRelationshipsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsHook>>>,
        { params?: ReindexRelationshipsParams }
    > = (props) => {
        const { params } = props ?? {}

        return reindexRelationships(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexRelationshipsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsHook>>>>

export type ReindexRelationshipsMutationError = ApiError

export const useReindexRelationships = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsHook>>>,
        TError,
        { params?: ReindexRelationshipsParams },
        TContext
    >
}) => {
    const mutationOptions = useReindexRelationshipsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useAsyncReindexHook = () => {
    const asyncReindex = useCmdbSwaggerClient<string>()

    return (params?: AsyncReindexParams) => {
        return asyncReindex({ url: `/util/reindexelastic`, method: 'post', params })
    }
}

export const useAsyncReindexMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAsyncReindexHook>>>, TError, { params?: AsyncReindexParams }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAsyncReindexHook>>>, TError, { params?: AsyncReindexParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const asyncReindex = useAsyncReindexHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAsyncReindexHook>>>, { params?: AsyncReindexParams }> = (props) => {
        const { params } = props ?? {}

        return asyncReindex(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type AsyncReindexMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAsyncReindexHook>>>>

export type AsyncReindexMutationError = ApiError

export const useAsyncReindex = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAsyncReindexHook>>>, TError, { params?: AsyncReindexParams }, TContext>
}) => {
    const mutationOptions = useAsyncReindexMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReindexCiHook = () => {
    const reindexCi = useCmdbSwaggerClient<string>()

    return (ciUuid: string) => {
        return reindexCi({ url: `/util/reindexci/${ciUuid}`, method: 'post' })
    }
}

export const useReindexCiMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexCiHook>>>, TError, { ciUuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexCiHook>>>, TError, { ciUuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexCi = useReindexCiHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReindexCiHook>>>, { ciUuid: string }> = (props) => {
        const { ciUuid } = props ?? {}

        return reindexCi(ciUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexCiMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexCiHook>>>>

export type ReindexCiMutationError = ApiError

export const useReindexCi = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexCiHook>>>, TError, { ciUuid: string }, TContext>
}) => {
    const mutationOptions = useReindexCiMutationOptions(options)

    return useMutation(mutationOptions)
}

export const usePartialReindexHook = () => {
    const partialReindex = useCmdbSwaggerClient<string>()

    return (params: PartialReindexParams) => {
        return partialReindex({ url: `/util/indexelastic`, method: 'post', params })
    }
}

export const usePartialReindexMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePartialReindexHook>>>, TError, { params: PartialReindexParams }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePartialReindexHook>>>, TError, { params: PartialReindexParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const partialReindex = usePartialReindexHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePartialReindexHook>>>, { params: PartialReindexParams }> = (props) => {
        const { params } = props ?? {}

        return partialReindex(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type PartialReindexMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePartialReindexHook>>>>

export type PartialReindexMutationError = ApiError

export const usePartialReindex = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePartialReindexHook>>>, TError, { params: PartialReindexParams }, TContext>
}) => {
    const mutationOptions = usePartialReindexMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReindexHierarchyHook = () => {
    const reindexHierarchy = useCmdbSwaggerClient<string>()

    return () => {
        return reindexHierarchy({ url: `/util/hierarchypo`, method: 'post' })
    }
}

export const useReindexHierarchyMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexHierarchyHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexHierarchyHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexHierarchy = useReindexHierarchyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReindexHierarchyHook>>>, TVariables> = () => {
        return reindexHierarchy()
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexHierarchyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexHierarchyHook>>>>

export type ReindexHierarchyMutationError = ApiError

export const useReindexHierarchy = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexHierarchyHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useReindexHierarchyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary confluenceDocumentResults
 */
export const useConfluenceDocumentResultsHook = () => {
    const confluenceDocumentResults = useCmdbSwaggerClient<Result>()

    return (params: ConfluenceDocumentResultsParams) => {
        return confluenceDocumentResults({ url: `/util/conf`, method: 'post', params })
    }
}

export const useConfluenceDocumentResultsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsHook>>>,
        TError,
        { params: ConfluenceDocumentResultsParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsHook>>>,
    TError,
    { params: ConfluenceDocumentResultsParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const confluenceDocumentResults = useConfluenceDocumentResultsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsHook>>>,
        { params: ConfluenceDocumentResultsParams }
    > = (props) => {
        const { params } = props ?? {}

        return confluenceDocumentResults(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ConfluenceDocumentResultsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsHook>>>>

export type ConfluenceDocumentResultsMutationError = ApiError

/**
 * @summary confluenceDocumentResults
 */
export const useConfluenceDocumentResults = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsHook>>>,
        TError,
        { params: ConfluenceDocumentResultsParams },
        TContext
    >
}) => {
    const mutationOptions = useConfluenceDocumentResultsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreGroupItemsHook = () => {
    const storeGroupItems = useCmdbSwaggerClient<RequestIdUi>()

    return (uuid: string, storeGroupMembersSetUi: StoreGroupMembersSetUi) => {
        return storeGroupItems({
            url: `/storemembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: storeGroupMembersSetUi,
        })
    }
}

export const useStoreGroupItemsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsHook>>>,
        TError,
        { uuid: string; data: StoreGroupMembersSetUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsHook>>>,
    TError,
    { uuid: string; data: StoreGroupMembersSetUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGroupItems = useStoreGroupItemsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsHook>>>,
        { uuid: string; data: StoreGroupMembersSetUi }
    > = (props) => {
        const { uuid, data } = props ?? {}

        return storeGroupItems(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGroupItemsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsHook>>>>
export type StoreGroupItemsMutationBody = StoreGroupMembersSetUi
export type StoreGroupItemsMutationError = ApiError

export const useStoreGroupItems = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsHook>>>,
        TError,
        { uuid: string; data: StoreGroupMembersSetUi },
        TContext
    >
}) => {
    const mutationOptions = useStoreGroupItemsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreRelationshipHook = () => {
    const storeRelationship = useCmdbSwaggerClient<RequestIdUi>()

    return (relationshipUi: RelationshipUi) => {
        return storeRelationship({ url: `/store/relation`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: relationshipUi })
    }
}

export const useStoreRelationshipMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreRelationshipHook>>>, TError, { data: RelationshipUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreRelationshipHook>>>, TError, { data: RelationshipUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeRelationship = useStoreRelationshipHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreRelationshipHook>>>, { data: RelationshipUi }> = (props) => {
        const { data } = props ?? {}

        return storeRelationship(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreRelationshipMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreRelationshipHook>>>>
export type StoreRelationshipMutationBody = RelationshipUi
export type StoreRelationshipMutationError = ApiError

export const useStoreRelationship = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreRelationshipHook>>>, TError, { data: RelationshipUi }, TContext>
}) => {
    const mutationOptions = useStoreRelationshipMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreCiNeighboursSUHook = () => {
    const storeCiNeighboursSU = useCmdbSwaggerClient<RequestIdUi>()

    return (programMetaCode: string) => {
        return storeCiNeighboursSU({ url: `/store/projects/programRelations/${programMetaCode}`, method: 'post' })
    }
}

export const useStoreCiNeighboursSUMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUHook>>>, TError, { programMetaCode: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUHook>>>, TError, { programMetaCode: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeCiNeighboursSU = useStoreCiNeighboursSUHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUHook>>>, { programMetaCode: string }> = (props) => {
        const { programMetaCode } = props ?? {}

        return storeCiNeighboursSU(programMetaCode)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreCiNeighboursSUMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUHook>>>>

export type StoreCiNeighboursSUMutationError = ApiError

export const useStoreCiNeighboursSU = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUHook>>>, TError, { programMetaCode: string }, TContext>
}) => {
    const mutationOptions = useStoreCiNeighboursSUMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreGroupHook = () => {
    const storeGroup = useCmdbSwaggerClient<RequestIdUi>()

    return (groupUi: GroupUi) => {
        return storeGroup({ url: `/store/group`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: groupUi })
    }
}

export const useStoreGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGroupHook>>>, TError, { data: GroupUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGroupHook>>>, TError, { data: GroupUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGroup = useStoreGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreGroupHook>>>, { data: GroupUi }> = (props) => {
        const { data } = props ?? {}

        return storeGroup(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGroupHook>>>>
export type StoreGroupMutationBody = GroupUi
export type StoreGroupMutationError = ApiError

export const useStoreGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGroupHook>>>, TError, { data: GroupUi }, TContext>
}) => {
    const mutationOptions = useStoreGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRemoveManagerFromGroupHook = () => {
    const removeManagerFromGroup = useCmdbSwaggerClient<RequestIdUi>()

    return (group: string, uuid: string) => {
        return removeManagerFromGroup({ url: `/store/group/${group}/remove/${uuid}`, method: 'post' })
    }
}

export const useRemoveManagerFromGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupHook>>>,
        TError,
        { group: string; uuid: string },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupHook>>>, TError, { group: string; uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeManagerFromGroup = useRemoveManagerFromGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupHook>>>, { group: string; uuid: string }> = (
        props,
    ) => {
        const { group, uuid } = props ?? {}

        return removeManagerFromGroup(group, uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveManagerFromGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupHook>>>>

export type RemoveManagerFromGroupMutationError = ApiError

export const useRemoveManagerFromGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupHook>>>,
        TError,
        { group: string; uuid: string },
        TContext
    >
}) => {
    const mutationOptions = useRemoveManagerFromGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreManagerToGroupHook = () => {
    const storeManagerToGroup = useCmdbSwaggerClient<RequestIdUi>()

    return (group: string, uuid: string) => {
        return storeManagerToGroup({ url: `/store/group/${group}/add/${uuid}`, method: 'post' })
    }
}

export const useStoreManagerToGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupHook>>>,
        TError,
        { group: string; uuid: string },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupHook>>>, TError, { group: string; uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeManagerToGroup = useStoreManagerToGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupHook>>>, { group: string; uuid: string }> = (
        props,
    ) => {
        const { group, uuid } = props ?? {}

        return storeManagerToGroup(group, uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreManagerToGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupHook>>>>

export type StoreManagerToGroupMutationError = ApiError

export const useStoreManagerToGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupHook>>>,
        TError,
        { group: string; uuid: string },
        TContext
    >
}) => {
    const mutationOptions = useStoreManagerToGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreGraphHook = () => {
    const storeGraph = useCmdbSwaggerClient<RequestIdUi>()

    return (graphRequestUi: GraphRequestUi) => {
        return storeGraph({ url: `/store/graph`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: graphRequestUi })
    }
}

export const useStoreGraphMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGraphHook>>>, TError, { data: GraphRequestUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGraphHook>>>, TError, { data: GraphRequestUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGraph = useStoreGraphHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreGraphHook>>>, { data: GraphRequestUi }> = (props) => {
        const { data } = props ?? {}

        return storeGraph(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGraphMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGraphHook>>>>
export type StoreGraphMutationBody = GraphRequestUi
export type StoreGraphMutationError = ApiError

export const useStoreGraph = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGraphHook>>>, TError, { data: GraphRequestUi }, TContext>
}) => {
    const mutationOptions = useStoreGraphMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreGraphBiznisHook = () => {
    const storeGraphBiznis = useCmdbSwaggerClient<RequestIdUi>()

    return (graphRequestUi: GraphRequestUi) => {
        return storeGraphBiznis({ url: `/store/graph/biznis`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: graphRequestUi })
    }
}

export const useStoreGraphBiznisMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisHook>>>, TError, { data: GraphRequestUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisHook>>>, TError, { data: GraphRequestUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGraphBiznis = useStoreGraphBiznisHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisHook>>>, { data: GraphRequestUi }> = (props) => {
        const { data } = props ?? {}

        return storeGraphBiznis(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGraphBiznisMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisHook>>>>
export type StoreGraphBiznisMutationBody = GraphRequestUi
export type StoreGraphBiznisMutationError = ApiError

export const useStoreGraphBiznis = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisHook>>>, TError, { data: GraphRequestUi }, TContext>
}) => {
    const mutationOptions = useStoreGraphBiznisMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreConfigurationItemHook = () => {
    const storeConfigurationItem = useCmdbSwaggerClient<RequestIdUi>()

    return (configurationItemUi: ConfigurationItemUi) => {
        return storeConfigurationItem({
            url: `/store/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemUi,
        })
    }
}

export const useStoreConfigurationItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemHook>>>,
        TError,
        { data: ConfigurationItemUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemHook>>>, TError, { data: ConfigurationItemUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeConfigurationItem = useStoreConfigurationItemHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemHook>>>, { data: ConfigurationItemUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return storeConfigurationItem(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreConfigurationItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemHook>>>>
export type StoreConfigurationItemMutationBody = ConfigurationItemUi
export type StoreConfigurationItemMutationError = ApiError

export const useStoreConfigurationItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemHook>>>,
        TError,
        { data: ConfigurationItemUi },
        TContext
    >
}) => {
    const mutationOptions = useStoreConfigurationItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreConfigurationItemBiznisHook = () => {
    const storeConfigurationItemBiznis = useCmdbSwaggerClient<RequestIdUi>()

    return (configurationItemUi: ConfigurationItemUi) => {
        return storeConfigurationItemBiznis({
            url: `/store/ci/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemUi,
        })
    }
}

export const useStoreConfigurationItemBiznisMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisHook>>>,
        TError,
        { data: ConfigurationItemUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisHook>>>,
    TError,
    { data: ConfigurationItemUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeConfigurationItemBiznis = useStoreConfigurationItemBiznisHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisHook>>>, { data: ConfigurationItemUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return storeConfigurationItemBiznis(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreConfigurationItemBiznisMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisHook>>>>
export type StoreConfigurationItemBiznisMutationBody = ConfigurationItemUi
export type StoreConfigurationItemBiznisMutationError = ApiError

export const useStoreConfigurationItemBiznis = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisHook>>>,
        TError,
        { data: ConfigurationItemUi },
        TContext
    >
}) => {
    const mutationOptions = useStoreConfigurationItemBiznisMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReadVotesFromStandardHook = () => {
    const readVotesFromStandard = useCmdbSwaggerClient<VoteListUi>()

    return (params?: ReadVotesFromStandardParams, signal?: AbortSignal) => {
        return readVotesFromStandard({ url: `/standard/votes`, method: 'get', params, signal })
    }
}

export const getReadVotesFromStandardQueryKey = (params?: ReadVotesFromStandardParams) => [`/standard/votes`, ...(params ? [params] : [])] as const

export const useReadVotesFromStandardQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>, TError = ApiError>(
    params?: ReadVotesFromStandardParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadVotesFromStandardQueryKey(params)

    const readVotesFromStandard = useReadVotesFromStandardHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>> = ({ signal }) =>
        readVotesFromStandard(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadVotesFromStandardQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>>
export type ReadVotesFromStandardQueryError = ApiError

export const useReadVotesFromStandard = <TData = Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>, TError = ApiError>(
    params?: ReadVotesFromStandardParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadVotesFromStandardQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useStoreStandardVotesHook = () => {
    const storeStandardVotes = useCmdbSwaggerClient<void>()

    return (voteListUi: VoteListUi) => {
        return storeStandardVotes({ url: `/standard/votes`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: voteListUi })
    }
}

export const useStoreStandardVotesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesHook>>>, TError, { data: VoteListUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesHook>>>, TError, { data: VoteListUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeStandardVotes = useStoreStandardVotesHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesHook>>>, { data: VoteListUi }> = (props) => {
        const { data } = props ?? {}

        return storeStandardVotes(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreStandardVotesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesHook>>>>
export type StoreStandardVotesMutationBody = VoteListUi
export type StoreStandardVotesMutationError = ApiError

export const useStoreStandardVotes = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesHook>>>, TError, { data: VoteListUi }, TContext>
}) => {
    const mutationOptions = useStoreStandardVotesMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardVotes1Hook = () => {
    const deleteStandardVotes1 = useCmdbSwaggerClient<void>()

    return () => {
        return deleteStandardVotes1({ url: `/standard/votes`, method: 'delete' })
    }
}

export const useDeleteStandardVotes1MutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotes1Hook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotes1Hook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardVotes1 = useDeleteStandardVotes1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotes1Hook>>>, TVariables> = () => {
        return deleteStandardVotes1()
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardVotes1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotes1Hook>>>>

export type DeleteStandardVotes1MutationError = ApiError

export const useDeleteStandardVotes1 = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotes1Hook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useDeleteStandardVotes1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardVotesHook = () => {
    const deleteStandardVotes = useCmdbSwaggerClient<void>()

    return (deleteStandardVotesBody: number[]) => {
        return deleteStandardVotes({
            url: `/standard/votes/delete`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: deleteStandardVotesBody,
        })
    }
}

export const useDeleteStandardVotesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesHook>>>, TError, { data: number[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesHook>>>, TError, { data: number[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardVotes = useDeleteStandardVotesHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesHook>>>, { data: number[] }> = (props) => {
        const { data } = props ?? {}

        return deleteStandardVotes(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardVotesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesHook>>>>
export type DeleteStandardVotesMutationBody = number[]
export type DeleteStandardVotesMutationError = ApiError

export const useDeleteStandardVotes = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesHook>>>, TError, { data: number[] }, TContext>
}) => {
    const mutationOptions = useDeleteStandardVotesMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReadStandardRequestsFromStandardHook = () => {
    const readStandardRequestsFromStandard = useCmdbSwaggerClient<StandardRequestListUi>()

    return (params?: ReadStandardRequestsFromStandardParams, signal?: AbortSignal) => {
        return readStandardRequestsFromStandard({ url: `/standard/standardRequests`, method: 'get', params, signal })
    }
}

export const getReadStandardRequestsFromStandardQueryKey = (params?: ReadStandardRequestsFromStandardParams) =>
    [`/standard/standardRequests`, ...(params ? [params] : [])] as const

export const useReadStandardRequestsFromStandardQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>,
    TError = ApiError,
>(
    params?: ReadStandardRequestsFromStandardParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadStandardRequestsFromStandardQueryKey(params)

    const readStandardRequestsFromStandard = useReadStandardRequestsFromStandardHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>> = ({ signal }) =>
        readStandardRequestsFromStandard(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadStandardRequestsFromStandardQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>>
export type ReadStandardRequestsFromStandardQueryError = ApiError

export const useReadStandardRequestsFromStandard = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>,
    TError = ApiError,
>(
    params?: ReadStandardRequestsFromStandardParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadStandardRequestsFromStandardQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useStoreStandardStandardRequestsHook = () => {
    const storeStandardStandardRequests = useCmdbSwaggerClient<void>()

    return (standardRequestListUi: StandardRequestListUi) => {
        return storeStandardStandardRequests({
            url: `/standard/standardRequests`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: standardRequestListUi,
        })
    }
}

export const useStoreStandardStandardRequestsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsHook>>>,
        TError,
        { data: StandardRequestListUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsHook>>>,
    TError,
    { data: StandardRequestListUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeStandardStandardRequests = useStoreStandardStandardRequestsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsHook>>>,
        { data: StandardRequestListUi }
    > = (props) => {
        const { data } = props ?? {}

        return storeStandardStandardRequests(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreStandardStandardRequestsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsHook>>>>
export type StoreStandardStandardRequestsMutationBody = StandardRequestListUi
export type StoreStandardStandardRequestsMutationError = ApiError

export const useStoreStandardStandardRequests = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsHook>>>,
        TError,
        { data: StandardRequestListUi },
        TContext
    >
}) => {
    const mutationOptions = useStoreStandardStandardRequestsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardStandardHook = () => {
    const deleteStandardStandard = useCmdbSwaggerClient<void>()

    return () => {
        return deleteStandardStandard({ url: `/standard/standardRequests`, method: 'delete' })
    }
}

export const useDeleteStandardStandardMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardStandard = useDeleteStandardStandardHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardHook>>>, TVariables> = () => {
        return deleteStandardStandard()
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardStandardMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardHook>>>>

export type DeleteStandardStandardMutationError = ApiError

export const useDeleteStandardStandard = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useDeleteStandardStandardMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardStandardRequestsHook = () => {
    const deleteStandardStandardRequests = useCmdbSwaggerClient<void>()

    return (deleteStandardStandardRequestsBody: number[]) => {
        return deleteStandardStandardRequests({
            url: `/standard/standardRequests/delete`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: deleteStandardStandardRequestsBody,
        })
    }
}

export const useDeleteStandardStandardRequestsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsHook>>>, TError, { data: number[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsHook>>>, TError, { data: number[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardStandardRequests = useDeleteStandardStandardRequestsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsHook>>>, { data: number[] }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return deleteStandardStandardRequests(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardStandardRequestsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsHook>>>>
export type DeleteStandardStandardRequestsMutationBody = number[]
export type DeleteStandardStandardRequestsMutationError = ApiError

export const useDeleteStandardStandardRequests = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsHook>>>, TError, { data: number[] }, TContext>
}) => {
    const mutationOptions = useDeleteStandardStandardRequestsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReadMeetingRequestsFromStandardHook = () => {
    const readMeetingRequestsFromStandard = useCmdbSwaggerClient<MeetingRequestListUi>()

    return (params?: ReadMeetingRequestsFromStandardParams, signal?: AbortSignal) => {
        return readMeetingRequestsFromStandard({ url: `/standard/meetingRequests`, method: 'get', params, signal })
    }
}

export const getReadMeetingRequestsFromStandardQueryKey = (params?: ReadMeetingRequestsFromStandardParams) =>
    [`/standard/meetingRequests`, ...(params ? [params] : [])] as const

export const useReadMeetingRequestsFromStandardQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>,
    TError = ApiError,
>(
    params?: ReadMeetingRequestsFromStandardParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadMeetingRequestsFromStandardQueryKey(params)

    const readMeetingRequestsFromStandard = useReadMeetingRequestsFromStandardHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>> = ({ signal }) =>
        readMeetingRequestsFromStandard(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadMeetingRequestsFromStandardQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>>
export type ReadMeetingRequestsFromStandardQueryError = ApiError

export const useReadMeetingRequestsFromStandard = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>,
    TError = ApiError,
>(
    params?: ReadMeetingRequestsFromStandardParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadMeetingRequestsFromStandardQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useStoreStandardMeetingRequestsHook = () => {
    const storeStandardMeetingRequests = useCmdbSwaggerClient<void>()

    return (meetingRequestListUi: MeetingRequestListUi) => {
        return storeStandardMeetingRequests({
            url: `/standard/meetingRequests`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: meetingRequestListUi,
        })
    }
}

export const useStoreStandardMeetingRequestsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsHook>>>,
        TError,
        { data: MeetingRequestListUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsHook>>>,
    TError,
    { data: MeetingRequestListUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeStandardMeetingRequests = useStoreStandardMeetingRequestsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsHook>>>,
        { data: MeetingRequestListUi }
    > = (props) => {
        const { data } = props ?? {}

        return storeStandardMeetingRequests(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreStandardMeetingRequestsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsHook>>>>
export type StoreStandardMeetingRequestsMutationBody = MeetingRequestListUi
export type StoreStandardMeetingRequestsMutationError = ApiError

export const useStoreStandardMeetingRequests = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsHook>>>,
        TError,
        { data: MeetingRequestListUi },
        TContext
    >
}) => {
    const mutationOptions = useStoreStandardMeetingRequestsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardMeetingRequests1Hook = () => {
    const deleteStandardMeetingRequests1 = useCmdbSwaggerClient<void>()

    return () => {
        return deleteStandardMeetingRequests1({ url: `/standard/meetingRequests`, method: 'delete' })
    }
}

export const useDeleteStandardMeetingRequests1MutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequests1Hook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequests1Hook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardMeetingRequests1 = useDeleteStandardMeetingRequests1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequests1Hook>>>, TVariables> = () => {
        return deleteStandardMeetingRequests1()
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardMeetingRequests1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequests1Hook>>>>

export type DeleteStandardMeetingRequests1MutationError = ApiError

export const useDeleteStandardMeetingRequests1 = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequests1Hook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useDeleteStandardMeetingRequests1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardMeetingRequestsHook = () => {
    const deleteStandardMeetingRequests = useCmdbSwaggerClient<void>()

    return (deleteStandardMeetingRequestsBody: number[]) => {
        return deleteStandardMeetingRequests({
            url: `/standard/meetingRequests/delete`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: deleteStandardMeetingRequestsBody,
        })
    }
}

export const useDeleteStandardMeetingRequestsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsHook>>>, TError, { data: number[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsHook>>>, TError, { data: number[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardMeetingRequests = useDeleteStandardMeetingRequestsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsHook>>>, { data: number[] }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return deleteStandardMeetingRequests(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardMeetingRequestsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsHook>>>>
export type DeleteStandardMeetingRequestsMutationBody = number[]
export type DeleteStandardMeetingRequestsMutationError = ApiError

export const useDeleteStandardMeetingRequests = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsHook>>>, TError, { data: number[] }, TContext>
}) => {
    const mutationOptions = useDeleteStandardMeetingRequestsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readCiList
 */
export const useReadCiListHook = () => {
    const readCiList = useCmdbSwaggerClient<HierarchyRightsResultUi>()

    return (hierarchyPOFilterUi: HierarchyPOFilterUi) => {
        return readCiList({
            url: `/rights/implicitHierarchy`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: hierarchyPOFilterUi,
        })
    }
}

export const useReadCiListMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadCiListHook>>>, TError, { data: HierarchyPOFilterUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadCiListHook>>>, TError, { data: HierarchyPOFilterUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiList = useReadCiListHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadCiListHook>>>, { data: HierarchyPOFilterUi }> = (props) => {
        const { data } = props ?? {}

        return readCiList(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiListMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiListHook>>>>
export type ReadCiListMutationBody = HierarchyPOFilterUi
export type ReadCiListMutationError = ApiError

/**
 * @summary readCiList
 */
export const useReadCiList = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadCiListHook>>>, TError, { data: HierarchyPOFilterUi }, TContext>
}) => {
    const mutationOptions = useReadCiListMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRemoveCiFromGroupHook = () => {
    const removeCiFromGroup = useCmdbSwaggerClient<RequestIdUi>()

    return (uuid: string, removeCiFromGroupBody: string[]) => {
        return removeCiFromGroup({
            url: `/removemembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: removeCiFromGroupBody,
        })
    }
}

export const useRemoveCiFromGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupHook>>>,
        TError,
        { uuid: string; data: string[] },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupHook>>>, TError, { uuid: string; data: string[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeCiFromGroup = useRemoveCiFromGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupHook>>>, { uuid: string; data: string[] }> = (
        props,
    ) => {
        const { uuid, data } = props ?? {}

        return removeCiFromGroup(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveCiFromGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupHook>>>>
export type RemoveCiFromGroupMutationBody = string[]
export type RemoveCiFromGroupMutationError = ApiError

export const useRemoveCiFromGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupHook>>>,
        TError,
        { uuid: string; data: string[] },
        TContext
    >
}) => {
    const mutationOptions = useRemoveCiFromGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRemoveGroupHook = () => {
    const removeGroup = useCmdbSwaggerClient<RequestIdUi>()

    return (uuid: string) => {
        return removeGroup({ url: `/remove/group/${uuid}`, method: 'post' })
    }
}

export const useRemoveGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRemoveGroupHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRemoveGroupHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeGroup = useRemoveGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRemoveGroupHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return removeGroup(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRemoveGroupHook>>>>

export type RemoveGroupMutationError = ApiError

export const useRemoveGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRemoveGroupHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useRemoveGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRecycleInvalidatedRelsHook = () => {
    const recycleInvalidatedRels = useCmdbSwaggerClient<RequestIdUi>()

    return (recycleRelsUi: RecycleRelsUi) => {
        return recycleInvalidatedRels({ url: `/recycle/rels`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: recycleRelsUi })
    }
}

export const useRecycleInvalidatedRelsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsHook>>>, TError, { data: RecycleRelsUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsHook>>>, TError, { data: RecycleRelsUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedRels = useRecycleInvalidatedRelsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsHook>>>, { data: RecycleRelsUi }> = (props) => {
        const { data } = props ?? {}

        return recycleInvalidatedRels(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedRelsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsHook>>>>
export type RecycleInvalidatedRelsMutationBody = RecycleRelsUi
export type RecycleInvalidatedRelsMutationError = ApiError

export const useRecycleInvalidatedRels = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsHook>>>, TError, { data: RecycleRelsUi }, TContext>
}) => {
    const mutationOptions = useRecycleInvalidatedRelsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRecycleInvalidatedRelsBiznisHook = () => {
    const recycleInvalidatedRelsBiznis = useCmdbSwaggerClient<RequestIdUi>()

    return (recycleRelsUi: RecycleRelsUi) => {
        return recycleInvalidatedRelsBiznis({
            url: `/recycle/rels/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: recycleRelsUi,
        })
    }
}

export const useRecycleInvalidatedRelsBiznisMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisHook>>>,
        TError,
        { data: RecycleRelsUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisHook>>>, TError, { data: RecycleRelsUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedRelsBiznis = useRecycleInvalidatedRelsBiznisHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisHook>>>, { data: RecycleRelsUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return recycleInvalidatedRelsBiznis(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedRelsBiznisMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisHook>>>>
export type RecycleInvalidatedRelsBiznisMutationBody = RecycleRelsUi
export type RecycleInvalidatedRelsBiznisMutationError = ApiError

export const useRecycleInvalidatedRelsBiznis = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisHook>>>,
        TError,
        { data: RecycleRelsUi },
        TContext
    >
}) => {
    const mutationOptions = useRecycleInvalidatedRelsBiznisMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRecyclePoWithHierarchyHook = () => {
    const recyclePoWithHierarchy = useCmdbSwaggerClient<RequestIdUi>()

    return (poId: string, relId: string, poWithHierarchyUi: PoWithHierarchyUi) => {
        return recyclePoWithHierarchy({
            url: `/recycle/poWithHierarchy/${poId}/${relId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: poWithHierarchyUi,
        })
    }
}

export const useRecyclePoWithHierarchyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyHook>>>,
    TError,
    { poId: string; relId: string; data: PoWithHierarchyUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const recyclePoWithHierarchy = useRecyclePoWithHierarchyHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyHook>>>,
        { poId: string; relId: string; data: PoWithHierarchyUi }
    > = (props) => {
        const { poId, relId, data } = props ?? {}

        return recyclePoWithHierarchy(poId, relId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecyclePoWithHierarchyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyHook>>>>
export type RecyclePoWithHierarchyMutationBody = PoWithHierarchyUi
export type RecyclePoWithHierarchyMutationError = ApiError

export const useRecyclePoWithHierarchy = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUi },
        TContext
    >
}) => {
    const mutationOptions = useRecyclePoWithHierarchyMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRecycleInvalidatedCisHook = () => {
    const recycleInvalidatedCis = useCmdbSwaggerClient<RequestIdUi>()

    return (recycleCisUi: RecycleCisUi) => {
        return recycleInvalidatedCis({ url: `/recycle/cis`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: recycleCisUi })
    }
}

export const useRecycleInvalidatedCisMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisHook>>>, TError, { data: RecycleCisUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisHook>>>, TError, { data: RecycleCisUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedCis = useRecycleInvalidatedCisHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisHook>>>, { data: RecycleCisUi }> = (props) => {
        const { data } = props ?? {}

        return recycleInvalidatedCis(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedCisMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisHook>>>>
export type RecycleInvalidatedCisMutationBody = RecycleCisUi
export type RecycleInvalidatedCisMutationError = ApiError

export const useRecycleInvalidatedCis = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisHook>>>, TError, { data: RecycleCisUi }, TContext>
}) => {
    const mutationOptions = useRecycleInvalidatedCisMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRecycleInvalidatedCisBiznisHook = () => {
    const recycleInvalidatedCisBiznis = useCmdbSwaggerClient<RequestIdUi>()

    return (recycleCisUi: RecycleCisUi) => {
        return recycleInvalidatedCisBiznis({
            url: `/recycle/cis/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: recycleCisUi,
        })
    }
}

export const useRecycleInvalidatedCisBiznisMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisHook>>>,
        TError,
        { data: RecycleCisUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisHook>>>, TError, { data: RecycleCisUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedCisBiznis = useRecycleInvalidatedCisBiznisHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisHook>>>, { data: RecycleCisUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return recycleInvalidatedCisBiznis(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedCisBiznisMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisHook>>>>
export type RecycleInvalidatedCisBiznisMutationBody = RecycleCisUi
export type RecycleInvalidatedCisBiznisMutationError = ApiError

export const useRecycleInvalidatedCisBiznis = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisHook>>>,
        TError,
        { data: RecycleCisUi },
        TContext
    >
}) => {
    const mutationOptions = useRecycleInvalidatedCisBiznisMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readGroupItems
 */
export const useReadGroupItemsHook = () => {
    const readGroupItems = useCmdbSwaggerClient<ReadGroupItems200>()

    return (uuid: string, groupMembersFilterUi: GroupMembersFilterUi) => {
        return readGroupItems({
            url: `/readmembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: groupMembersFilterUi,
        })
    }
}

export const useReadGroupItemsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadGroupItemsHook>>>,
        TError,
        { uuid: string; data: GroupMembersFilterUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadGroupItemsHook>>>,
    TError,
    { uuid: string; data: GroupMembersFilterUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readGroupItems = useReadGroupItemsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadGroupItemsHook>>>,
        { uuid: string; data: GroupMembersFilterUi }
    > = (props) => {
        const { uuid, data } = props ?? {}

        return readGroupItems(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadGroupItemsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadGroupItemsHook>>>>
export type ReadGroupItemsMutationBody = GroupMembersFilterUi
export type ReadGroupItemsMutationError = ApiError

/**
 * @summary readGroupItems
 */
export const useReadGroupItems = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadGroupItemsHook>>>,
        TError,
        { uuid: string; data: GroupMembersFilterUi },
        TContext
    >
}) => {
    const mutationOptions = useReadGroupItemsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readConfigurationItemByRefID
 */
export const useReadConfigurationItemByRefIDHook = () => {
    const readConfigurationItemByRefID = useCmdbSwaggerClient<ReadConfigurationItemByRefID200>()

    return (readConfigurationItemByRefIDBody: string) => {
        return readConfigurationItemByRefID({
            url: `/readByRefID/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: readConfigurationItemByRefIDBody,
        })
    }
}

export const useReadConfigurationItemByRefIDMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDHook>>>, TError, { data: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDHook>>>, TError, { data: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readConfigurationItemByRefID = useReadConfigurationItemByRefIDHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDHook>>>, { data: string }> = (props) => {
        const { data } = props ?? {}

        return readConfigurationItemByRefID(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadConfigurationItemByRefIDMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDHook>>>>
export type ReadConfigurationItemByRefIDMutationBody = string
export type ReadConfigurationItemByRefIDMutationError = ApiError

/**
 * @summary readConfigurationItemByRefID
 */
export const useReadConfigurationItemByRefID = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDHook>>>, TError, { data: string }, TContext>
}) => {
    const mutationOptions = useReadConfigurationItemByRefIDMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readConfigurationItemsByMetaIsCodes
 */
export const useReadConfigurationItemsByMetaIsCodesHook = () => {
    const readConfigurationItemsByMetaIsCodes = useCmdbSwaggerClient<ConfigurationItemsListUi>()

    return (metaIsCodesListUi: MetaIsCodesListUi) => {
        return readConfigurationItemsByMetaIsCodes({
            url: `/readByMetaIsCode/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: metaIsCodesListUi,
        })
    }
}

export const useReadConfigurationItemsByMetaIsCodesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesHook>>>,
        TError,
        { data: MetaIsCodesListUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesHook>>>,
    TError,
    { data: MetaIsCodesListUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readConfigurationItemsByMetaIsCodes = useReadConfigurationItemsByMetaIsCodesHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesHook>>>,
        { data: MetaIsCodesListUi }
    > = (props) => {
        const { data } = props ?? {}

        return readConfigurationItemsByMetaIsCodes(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadConfigurationItemsByMetaIsCodesMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesHook>>>
>
export type ReadConfigurationItemsByMetaIsCodesMutationBody = MetaIsCodesListUi
export type ReadConfigurationItemsByMetaIsCodesMutationError = ApiError

/**
 * @summary readConfigurationItemsByMetaIsCodes
 */
export const useReadConfigurationItemsByMetaIsCodes = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesHook>>>,
        TError,
        { data: MetaIsCodesListUi },
        TContext
    >
}) => {
    const mutationOptions = useReadConfigurationItemsByMetaIsCodesMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getRoleParticipantBulk
 */
export const useGetRoleParticipantBulkHook = () => {
    const getRoleParticipantBulk = useClientForGetRoleParticipantBulkUsingPOST<RoleParticipantUI[]>()

    return (gidSetUi: GidSetUi) => {
        return getRoleParticipantBulk({
            url: `/read/roleParticipant`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: gidSetUi,
        })
    }
}

export const getGetRoleParticipantBulkQueryKey = (gidSetUi: GidSetUi) => [`/read/roleParticipant`, gidSetUi] as const

export const useGetRoleParticipantBulkQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>,
    TError = ApiError,
>(
    gidSetUi: GidSetUi,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRoleParticipantBulkQueryKey(gidSetUi)

    const getRoleParticipantBulk = useGetRoleParticipantBulkHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>> = () => getRoleParticipantBulk(gidSetUi)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetRoleParticipantBulkQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>>
export type GetRoleParticipantBulkQueryError = ApiError

/**
 * @summary getRoleParticipantBulk
 */
export const useGetRoleParticipantBulk = <TData = Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>, TError = ApiError>(
    gidSetUi: GidSetUi,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRoleParticipantBulkQueryOptions(gidSetUi, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readRelList
 */
export const useReadRelListHook = () => {
    const readRelList = useCmdbSwaggerClient<RelationshipElasticPreviewHolderUi>()

    return (relFilterSmallUi: RelFilterSmallUi) => {
        return readRelList({ url: `/read/rellistfiltered`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: relFilterSmallUi })
    }
}

export const useReadRelListMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadRelListHook>>>, TError, { data: RelFilterSmallUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadRelListHook>>>, TError, { data: RelFilterSmallUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readRelList = useReadRelListHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadRelListHook>>>, { data: RelFilterSmallUi }> = (props) => {
        const { data } = props ?? {}

        return readRelList(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadRelListMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelListHook>>>>
export type ReadRelListMutationBody = RelFilterSmallUi
export type ReadRelListMutationError = ApiError

/**
 * @summary readRelList
 */
export const useReadRelList = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadRelListHook>>>, TError, { data: RelFilterSmallUi }, TContext>
}) => {
    const mutationOptions = useReadRelListMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readPoSuperiorPoRelationship
 */
export const useReadPoSuperiorPoRelationshipHook = () => {
    const readPoSuperiorPoRelationship = useCmdbSwaggerClient<ReadPoSuperiorPoRelationship200>()

    return (uuidSetUi: UuidSetUi) => {
        return readPoSuperiorPoRelationship({
            url: `/read/relationspo`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: uuidSetUi,
        })
    }
}

export const useReadPoSuperiorPoRelationshipMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipHook>>>, TError, { data: UuidSetUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipHook>>>, TError, { data: UuidSetUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readPoSuperiorPoRelationship = useReadPoSuperiorPoRelationshipHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipHook>>>, { data: UuidSetUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return readPoSuperiorPoRelationship(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadPoSuperiorPoRelationshipMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipHook>>>>
export type ReadPoSuperiorPoRelationshipMutationBody = UuidSetUi
export type ReadPoSuperiorPoRelationshipMutationError = ApiError

/**
 * @summary readPoSuperiorPoRelationship
 */
export const useReadPoSuperiorPoRelationship = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipHook>>>, TError, { data: UuidSetUi }, TContext>
}) => {
    const mutationOptions = useReadPoSuperiorPoRelationshipMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readRelationshipList
 */
export const useReadRelationshipListHook = () => {
    const readRelationshipList = useCmdbSwaggerClient<RelationshipListUi>()

    return (relListFilterContainerUi: RelListFilterContainerUi) => {
        return readRelationshipList({
            url: `/read/relationshiplistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relListFilterContainerUi,
        })
    }
}

export const useReadRelationshipListMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadRelationshipListHook>>>,
        TError,
        { data: RelListFilterContainerUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipListHook>>>, TError, { data: RelListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readRelationshipList = useReadRelationshipListHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadRelationshipListHook>>>, { data: RelListFilterContainerUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return readRelationshipList(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadRelationshipListMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelationshipListHook>>>>
export type ReadRelationshipListMutationBody = RelListFilterContainerUi
export type ReadRelationshipListMutationError = ApiError

/**
 * @summary readRelationshipList
 */
export const useReadRelationshipList = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadRelationshipListHook>>>,
        TError,
        { data: RelListFilterContainerUi },
        TContext
    >
}) => {
    const mutationOptions = useReadRelationshipListMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readCiNeighbours
 */
export const useReadCiNeighboursHook = () => {
    const readCiNeighbours = useClientForreadCiNeighboursUsingPOST<NeighbourSetUi>()

    return (uuid: string, neighboursFilterContainerUi: NeighboursFilterContainerUi) => {
        return readCiNeighbours({
            url: `/read/relations/neighbours/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: neighboursFilterContainerUi,
        })
    }
}

export const getReadCiNeighboursQueryKey = (uuid: string, neighboursFilterContainerUi: NeighboursFilterContainerUi) =>
    [`/read/relations/neighbours/${uuid}`, neighboursFilterContainerUi] as const

export const useReadCiNeighboursQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>, TError = ApiError>(
    uuid: string,
    neighboursFilterContainerUi: NeighboursFilterContainerUi,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiNeighboursQueryKey(uuid, neighboursFilterContainerUi)

    const readCiNeighbours = useReadCiNeighboursHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>> = () =>
        readCiNeighbours(uuid, neighboursFilterContainerUi)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiNeighboursQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>>
export type ReadCiNeighboursQueryError = ApiError

/**
 * @summary readCiNeighbours
 */
export const useReadCiNeighbours = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>, TError = ApiError>(
    uuid: string,
    neighboursFilterContainerUi: NeighboursFilterContainerUi,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiNeighboursQueryOptions(uuid, neighboursFilterContainerUi, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readQuery
 */
export const useReadQueryHook = () => {
    const readQuery = useCmdbSwaggerClient<QueryResultTableUi>()

    return (queryUi: QueryUi) => {
        return readQuery({ url: `/read/query`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: queryUi })
    }
}

export const useReadQueryMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadQueryHook>>>, TError, { data: QueryUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadQueryHook>>>, TError, { data: QueryUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readQuery = useReadQueryHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadQueryHook>>>, { data: QueryUi }> = (props) => {
        const { data } = props ?? {}

        return readQuery(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadQueryMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadQueryHook>>>>
export type ReadQueryMutationBody = QueryUi
export type ReadQueryMutationError = ApiError

/**
 * @summary readQuery
 */
export const useReadQuery = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadQueryHook>>>, TError, { data: QueryUi }, TContext>
}) => {
    const mutationOptions = useReadQueryMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readIncidentRelationships
 */
export const useReadIncidentRelationshipsHook = () => {
    const readIncidentRelationships = useCmdbSwaggerClient<RelationshipSetUi>()

    return (incidentRelationshipsFilterUi: IncidentRelationshipsFilterUi) => {
        return readIncidentRelationships({
            url: `/read/incidentrelationships`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: incidentRelationshipsFilterUi,
        })
    }
}

export const useReadIncidentRelationshipsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsHook>>>,
        TError,
        { data: IncidentRelationshipsFilterUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsHook>>>,
    TError,
    { data: IncidentRelationshipsFilterUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readIncidentRelationships = useReadIncidentRelationshipsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsHook>>>,
        { data: IncidentRelationshipsFilterUi }
    > = (props) => {
        const { data } = props ?? {}

        return readIncidentRelationships(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadIncidentRelationshipsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsHook>>>>
export type ReadIncidentRelationshipsMutationBody = IncidentRelationshipsFilterUi
export type ReadIncidentRelationshipsMutationError = ApiError

/**
 * @summary readIncidentRelationships
 */
export const useReadIncidentRelationships = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsHook>>>,
        TError,
        { data: IncidentRelationshipsFilterUi },
        TContext
    >
}) => {
    const mutationOptions = useReadIncidentRelationshipsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readCiUuidSet
 */
export const useReadCiUuidSetHook = () => {
    const readCiUuidSet = useCmdbSwaggerClient<CiUuidSetUi>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return readCiUuidSet({
            url: `/read/ciuuidsetfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
        })
    }
}

export const useReadCiUuidSetMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetHook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetHook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiUuidSet = useReadCiUuidSetHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetHook>>>, { data: CiListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return readCiUuidSet(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiUuidSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetHook>>>>
export type ReadCiUuidSetMutationBody = CiListFilterContainerUi
export type ReadCiUuidSetMutationError = ApiError

/**
 * @summary readCiUuidSet
 */
export const useReadCiUuidSet = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetHook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useReadCiUuidSetMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readCiRelationshipCiList
 */
export const useReadCiRelationshipCiListHook = () => {
    const readCiRelationshipCiList = useCmdbSwaggerClient<CiRelationshipCiPreviewHolderListUi>()

    return (relListFilterContainerUi: RelListFilterContainerUi) => {
        return readCiRelationshipCiList({
            url: `/read/cirelationshipcilistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relListFilterContainerUi,
        })
    }
}

export const useReadCiRelationshipCiListMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListHook>>>,
        TError,
        { data: RelListFilterContainerUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListHook>>>,
    TError,
    { data: RelListFilterContainerUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiRelationshipCiList = useReadCiRelationshipCiListHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListHook>>>,
        { data: RelListFilterContainerUi }
    > = (props) => {
        const { data } = props ?? {}

        return readCiRelationshipCiList(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiRelationshipCiListMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListHook>>>>
export type ReadCiRelationshipCiListMutationBody = RelListFilterContainerUi
export type ReadCiRelationshipCiListMutationError = ApiError

/**
 * @summary readCiRelationshipCiList
 */
export const useReadCiRelationshipCiList = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListHook>>>,
        TError,
        { data: RelListFilterContainerUi },
        TContext
    >
}) => {
    const mutationOptions = useReadCiRelationshipCiListMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReadCiList1Hook = () => {
    const readCiList1 = useClientForReadCiListUsingPOST<ConfigurationItemSetUi>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return readCiList1({
            url: `/read/cilistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
        })
    }
}

export const getReadCiList1QueryKey = (ciListFilterContainerUi: CiListFilterContainerUi) => [`/read/cilistfiltered`, ciListFilterContainerUi] as const

export const useReadCiList1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>, TError = ApiError>(
    ciListFilterContainerUi: CiListFilterContainerUi,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiList1QueryKey(ciListFilterContainerUi)

    const readCiList1 = useReadCiList1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>> = () => readCiList1(ciListFilterContainerUi)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadCiList1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>>
export type ReadCiList1QueryError = ApiError

export const useReadCiList1 = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>, TError = ApiError>(
    ciListFilterContainerUi: CiListFilterContainerUi,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiList1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiList1QueryOptions(ciListFilterContainerUi, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useStorePoWithHierarchyRelHook = () => {
    const storePoWithHierarchyRel = useCmdbSwaggerClient<RequestIdUi>()

    return (poId: string, relId: string, poWithHierarchyUi: PoWithHierarchyUi) => {
        return storePoWithHierarchyRel({
            url: `/poWithHierarchy/${poId}/${relId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: poWithHierarchyUi,
        })
    }
}

export const useStorePoWithHierarchyRelMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelHook>>>,
    TError,
    { poId: string; relId: string; data: PoWithHierarchyUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storePoWithHierarchyRel = useStorePoWithHierarchyRelHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelHook>>>,
        { poId: string; relId: string; data: PoWithHierarchyUi }
    > = (props) => {
        const { poId, relId, data } = props ?? {}

        return storePoWithHierarchyRel(poId, relId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorePoWithHierarchyRelMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelHook>>>>
export type StorePoWithHierarchyRelMutationBody = PoWithHierarchyUi
export type StorePoWithHierarchyRelMutationError = ApiError

export const useStorePoWithHierarchyRel = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUi },
        TContext
    >
}) => {
    const mutationOptions = useStorePoWithHierarchyRelMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStorePoHook = () => {
    const storePo = useCmdbSwaggerClient<RequestIdUi>()

    return (poId: string, configurationItemUi: ConfigurationItemUi) => {
        return storePo({ url: `/po/${poId}`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: configurationItemUi })
    }
}

export const useStorePoMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoHook>>>,
        TError,
        { poId: string; data: ConfigurationItemUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStorePoHook>>>, TError, { poId: string; data: ConfigurationItemUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storePo = useStorePoHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStorePoHook>>>, { poId: string; data: ConfigurationItemUi }> = (
        props,
    ) => {
        const { poId, data } = props ?? {}

        return storePo(poId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorePoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStorePoHook>>>>
export type StorePoMutationBody = ConfigurationItemUi
export type StorePoMutationError = ApiError

export const useStorePo = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoHook>>>,
        TError,
        { poId: string; data: ConfigurationItemUi },
        TContext
    >
}) => {
    const mutationOptions = useStorePoMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInvalidateSendEmailHook = () => {
    const invalidateSendEmail = useCmdbSwaggerClient<InvalidateSendEmail200>()

    return (isvsUuid: string[], isvsName: string[]) => {
        return invalidateSendEmail({ url: `/invalidate/sendEmail/isvsUuid/${isvsUuid}/isvsName/${isvsName}`, method: 'post' })
    }
}

export const useInvalidateSendEmailMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateSendEmailHook>>>,
        TError,
        { isvsUuid: string[]; isvsName: string[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateSendEmailHook>>>,
    TError,
    { isvsUuid: string[]; isvsName: string[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateSendEmail = useInvalidateSendEmailHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateSendEmailHook>>>,
        { isvsUuid: string[]; isvsName: string[] }
    > = (props) => {
        const { isvsUuid, isvsName } = props ?? {}

        return invalidateSendEmail(isvsUuid, isvsName)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateSendEmailMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvalidateSendEmailHook>>>>

export type InvalidateSendEmailMutationError = ApiError

export const useInvalidateSendEmail = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateSendEmailHook>>>,
        TError,
        { isvsUuid: string[]; isvsName: string[] },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateSendEmailMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInvalidateRelationshipHook = () => {
    const invalidateRelationship = useCmdbSwaggerClient<RequestIdUi>()

    return (relationshipInvalidateUi: RelationshipInvalidateUi, params: InvalidateRelationshipParams) => {
        return invalidateRelationship({
            url: `/invalidate/relation`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipInvalidateUi,
            params,
        })
    }
}

export const useInvalidateRelationshipMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipHook>>>,
        TError,
        { data: RelationshipInvalidateUi; params: InvalidateRelationshipParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipHook>>>,
    TError,
    { data: RelationshipInvalidateUi; params: InvalidateRelationshipParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateRelationship = useInvalidateRelationshipHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipHook>>>,
        { data: RelationshipInvalidateUi; params: InvalidateRelationshipParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return invalidateRelationship(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateRelationshipMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipHook>>>>
export type InvalidateRelationshipMutationBody = RelationshipInvalidateUi
export type InvalidateRelationshipMutationError = ApiError

export const useInvalidateRelationship = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipHook>>>,
        TError,
        { data: RelationshipInvalidateUi; params: InvalidateRelationshipParams },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateRelationshipMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInvalidateSetHook = () => {
    const invalidateSet = useCmdbSwaggerClient<RequestIdUi>()

    return (invalidateSetBody: InvalidateSetBody) => {
        return invalidateSet({ url: `/invalidate/list`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: invalidateSetBody })
    }
}

export const useInvalidateSetMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvalidateSetHook>>>, TError, { data: InvalidateSetBody }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvalidateSetHook>>>, TError, { data: InvalidateSetBody }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateSet = useInvalidateSetHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInvalidateSetHook>>>, { data: InvalidateSetBody }> = (props) => {
        const { data } = props ?? {}

        return invalidateSet(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvalidateSetHook>>>>
export type InvalidateSetMutationBody = InvalidateSetBody
export type InvalidateSetMutationError = ApiError

export const useInvalidateSet = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInvalidateSetHook>>>, TError, { data: InvalidateSetBody }, TContext>
}) => {
    const mutationOptions = useInvalidateSetMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInvalidateConfigurationItemHook = () => {
    const invalidateConfigurationItem = useCmdbSwaggerClient<RequestIdUi>()

    return (configurationItemInvalidateUi: ConfigurationItemInvalidateUi) => {
        return invalidateConfigurationItem({
            url: `/invalidate/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemInvalidateUi,
        })
    }
}

export const useInvalidateConfigurationItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemHook>>>,
    TError,
    { data: ConfigurationItemInvalidateUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateConfigurationItem = useInvalidateConfigurationItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemHook>>>,
        { data: ConfigurationItemInvalidateUi }
    > = (props) => {
        const { data } = props ?? {}

        return invalidateConfigurationItem(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateConfigurationItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemHook>>>>
export type InvalidateConfigurationItemMutationBody = ConfigurationItemInvalidateUi
export type InvalidateConfigurationItemMutationError = ApiError

export const useInvalidateConfigurationItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUi },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateConfigurationItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInvalidateConfigurationItemBiznisMdulesHook = () => {
    const invalidateConfigurationItemBiznisMdules = useCmdbSwaggerClient<RequestIdUi>()

    return (configurationItemInvalidateUi: ConfigurationItemInvalidateUi) => {
        return invalidateConfigurationItemBiznisMdules({
            url: `/invalidate/ci/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemInvalidateUi,
        })
    }
}

export const useInvalidateConfigurationItemBiznisMdulesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
    TError,
    { data: ConfigurationItemInvalidateUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateConfigurationItemBiznisMdules = useInvalidateConfigurationItemBiznisMdulesHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
        { data: ConfigurationItemInvalidateUi }
    > = (props) => {
        const { data } = props ?? {}

        return invalidateConfigurationItemBiznisMdules(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateConfigurationItemBiznisMdulesMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>
>
export type InvalidateConfigurationItemBiznisMdulesMutationBody = ConfigurationItemInvalidateUi
export type InvalidateConfigurationItemBiznisMdulesMutationError = ApiError

export const useInvalidateConfigurationItemBiznisMdules = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUi },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateConfigurationItemBiznisMdulesMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStorePoHierarchyRelHook = () => {
    const storePoHierarchyRel = useCmdbSwaggerClient<RequestIdUi>()

    return (relId: string, relationshipUi: RelationshipUi) => {
        return storePoHierarchyRel({
            url: `/hierarchy/${relId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipUi,
        })
    }
}

export const useStorePoHierarchyRelMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelHook>>>,
        TError,
        { relId: string; data: RelationshipUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelHook>>>,
    TError,
    { relId: string; data: RelationshipUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storePoHierarchyRel = useStorePoHierarchyRelHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelHook>>>,
        { relId: string; data: RelationshipUi }
    > = (props) => {
        const { relId, data } = props ?? {}

        return storePoHierarchyRel(relId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorePoHierarchyRelMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelHook>>>>
export type StorePoHierarchyRelMutationBody = RelationshipUi
export type StorePoHierarchyRelMutationError = ApiError

export const useStorePoHierarchyRel = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelHook>>>,
        TError,
        { relId: string; data: RelationshipUi },
        TContext
    >
}) => {
    const mutationOptions = useStorePoHierarchyRelMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReportErrorHook = () => {
    const reportError = useCmdbSwaggerClient<RequestId>()

    return (userFeedbackErrorReportUi: UserFeedbackErrorReportUi) => {
        return reportError({
            url: `/feedback/error`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: userFeedbackErrorReportUi,
        })
    }
}

export const useReportErrorMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReportErrorHook>>>, TError, { data: UserFeedbackErrorReportUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReportErrorHook>>>, TError, { data: UserFeedbackErrorReportUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reportError = useReportErrorHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReportErrorHook>>>, { data: UserFeedbackErrorReportUi }> = (props) => {
        const { data } = props ?? {}

        return reportError(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReportErrorMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReportErrorHook>>>>
export type ReportErrorMutationBody = UserFeedbackErrorReportUi
export type ReportErrorMutationError = ApiError

export const useReportError = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReportErrorHook>>>, TError, { data: UserFeedbackErrorReportUi }, TContext>
}) => {
    const mutationOptions = useReportErrorMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteRelationshipHook = () => {
    const deleteRelationship = useCmdbSwaggerClient<RequestIdUi>()

    return (relationshipInvalidateUi: RelationshipInvalidateUi) => {
        return deleteRelationship({
            url: `/delete/relation`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipInvalidateUi,
        })
    }
}

export const useDeleteRelationshipMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipHook>>>,
        TError,
        { data: RelationshipInvalidateUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipHook>>>, TError, { data: RelationshipInvalidateUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteRelationship = useDeleteRelationshipHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipHook>>>, { data: RelationshipInvalidateUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return deleteRelationship(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteRelationshipMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipHook>>>>
export type DeleteRelationshipMutationBody = RelationshipInvalidateUi
export type DeleteRelationshipMutationError = ApiError

export const useDeleteRelationship = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipHook>>>,
        TError,
        { data: RelationshipInvalidateUi },
        TContext
    >
}) => {
    const mutationOptions = useDeleteRelationshipMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useChangeOwnerSetHook = () => {
    const changeOwnerSet = useCmdbSwaggerClient<RequestIdUi>()

    return (changeOwnerSetUi: ChangeOwnerSetUi) => {
        return changeOwnerSet({ url: `/changeOwner/list`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: changeOwnerSetUi })
    }
}

export const useChangeOwnerSetMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetHook>>>, TError, { data: ChangeOwnerSetUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetHook>>>, TError, { data: ChangeOwnerSetUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeOwnerSet = useChangeOwnerSetHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetHook>>>, { data: ChangeOwnerSetUi }> = (props) => {
        const { data } = props ?? {}

        return changeOwnerSet(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeOwnerSetMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetHook>>>>
export type ChangeOwnerSetMutationBody = ChangeOwnerSetUi
export type ChangeOwnerSetMutationError = ApiError

export const useChangeOwnerSet = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetHook>>>, TError, { data: ChangeOwnerSetUi }, TContext>
}) => {
    const mutationOptions = useChangeOwnerSetMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useChangePoHierarchyHook = () => {
    const changePoHierarchy = useCmdbSwaggerClient<RequestIdUi>()

    return (oldRelId: string, newRelId: string, changeHierarchyUi: ChangeHierarchyUi) => {
        return changePoHierarchy({
            url: `/changeHierarchy/${oldRelId}/${newRelId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: changeHierarchyUi,
        })
    }
}

export const useChangePoHierarchyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyHook>>>,
        TError,
        { oldRelId: string; newRelId: string; data: ChangeHierarchyUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyHook>>>,
    TError,
    { oldRelId: string; newRelId: string; data: ChangeHierarchyUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changePoHierarchy = useChangePoHierarchyHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyHook>>>,
        { oldRelId: string; newRelId: string; data: ChangeHierarchyUi }
    > = (props) => {
        const { oldRelId, newRelId, data } = props ?? {}

        return changePoHierarchy(oldRelId, newRelId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangePoHierarchyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyHook>>>>
export type ChangePoHierarchyMutationBody = ChangeHierarchyUi
export type ChangePoHierarchyMutationError = ApiError

export const useChangePoHierarchy = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyHook>>>,
        TError,
        { oldRelId: string; newRelId: string; data: ChangeHierarchyUi },
        TContext
    >
}) => {
    const mutationOptions = useChangePoHierarchyMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useAddCiToGroupHook = () => {
    const addCiToGroup = useCmdbSwaggerClient<RequestIdUi>()

    return (uuid: string, addCiToGroupBody: string[]) => {
        return addCiToGroup({
            url: `/addmembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: addCiToGroupBody,
        })
    }
}

export const useAddCiToGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAddCiToGroupHook>>>, TError, { uuid: string; data: string[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAddCiToGroupHook>>>, TError, { uuid: string; data: string[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const addCiToGroup = useAddCiToGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAddCiToGroupHook>>>, { uuid: string; data: string[] }> = (props) => {
        const { uuid, data } = props ?? {}

        return addCiToGroup(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddCiToGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddCiToGroupHook>>>>
export type AddCiToGroupMutationBody = string[]
export type AddCiToGroupMutationError = ApiError

export const useAddCiToGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAddCiToGroupHook>>>, TError, { uuid: string; data: string[] }, TContext>
}) => {
    const mutationOptions = useAddCiToGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useValidateCIsByTypesAndOwnerHook = () => {
    const validateCIsByTypesAndOwner = useCmdbSwaggerClient<CiProblemMessageHolderListUi>()

    return (params: ValidateCIsByTypesAndOwnerParams, signal?: AbortSignal) => {
        return validateCIsByTypesAndOwner({ url: `/validateCIsByTypesAndOwner`, method: 'get', params, signal })
    }
}

export const getValidateCIsByTypesAndOwnerQueryKey = (params: ValidateCIsByTypesAndOwnerParams) =>
    [`/validateCIsByTypesAndOwner`, ...(params ? [params] : [])] as const

export const useValidateCIsByTypesAndOwnerQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>,
    TError = ApiError,
>(
    params: ValidateCIsByTypesAndOwnerParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getValidateCIsByTypesAndOwnerQueryKey(params)

    const validateCIsByTypesAndOwner = useValidateCIsByTypesAndOwnerHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>> = ({ signal }) =>
        validateCIsByTypesAndOwner(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ValidateCIsByTypesAndOwnerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>>
export type ValidateCIsByTypesAndOwnerQueryError = ApiError

export const useValidateCIsByTypesAndOwner = <TData = Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>, TError = ApiError>(
    params: ValidateCIsByTypesAndOwnerParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useValidateCIsByTypesAndOwnerQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListAllReindexTasksHook = () => {
    const listAllReindexTasks = useCmdbSwaggerClient<ReindexTaskSimpleDTO[]>()

    return (signal?: AbortSignal) => {
        return listAllReindexTasks({ url: `/util/reindexelastic/tasks`, method: 'get', signal })
    }
}

export const getListAllReindexTasksQueryKey = () => [`/util/reindexelastic/tasks`] as const

export const useListAllReindexTasksQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListAllReindexTasksQueryKey()

    const listAllReindexTasks = useListAllReindexTasksHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>> = ({ signal }) => listAllReindexTasks(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListAllReindexTasksQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>>
export type ListAllReindexTasksQueryError = ApiError

export const useListAllReindexTasks = <TData = Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListAllReindexTasksHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListAllReindexTasksQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetReindexTaskStateByUuidHook = () => {
    const getReindexTaskStateByUuid = useCmdbSwaggerClient<ReindexTask>()

    return (uuid: string, signal?: AbortSignal) => {
        return getReindexTaskStateByUuid({ url: `/util/reindexelastic/tasks/${uuid}`, method: 'get', signal })
    }
}

export const getGetReindexTaskStateByUuidQueryKey = (uuid: string) => [`/util/reindexelastic/tasks/${uuid}`] as const

export const useGetReindexTaskStateByUuidQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>,
    TError = ApiError,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReindexTaskStateByUuidQueryKey(uuid)

    const getReindexTaskStateByUuid = useGetReindexTaskStateByUuidHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>> = ({ signal }) =>
        getReindexTaskStateByUuid(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetReindexTaskStateByUuidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>>
export type GetReindexTaskStateByUuidQueryError = ApiError

export const useGetReindexTaskStateByUuid = <TData = Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReindexTaskStateByUuidHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReindexTaskStateByUuidQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCancelReindexTaskByUuidHook = () => {
    const cancelReindexTaskByUuid = useCmdbSwaggerClient<string>()

    return (uuid: string) => {
        return cancelReindexTaskByUuid({ url: `/util/reindexelastic/tasks/${uuid}`, method: 'delete' })
    }
}

export const useCancelReindexTaskByUuidMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCancelReindexTaskByUuidHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCancelReindexTaskByUuidHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const cancelReindexTaskByUuid = useCancelReindexTaskByUuidHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCancelReindexTaskByUuidHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return cancelReindexTaskByUuid(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type CancelReindexTaskByUuidMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCancelReindexTaskByUuidHook>>>>

export type CancelReindexTaskByUuidMutationError = ApiError

export const useCancelReindexTaskByUuid = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCancelReindexTaskByUuidHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useCancelReindexTaskByUuidMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetPropertiesHook = () => {
    const getProperties = useCmdbSwaggerClient<GetProperties200>()

    return (signal?: AbortSignal) => {
        return getProperties({ url: `/util/properties`, method: 'get', signal })
    }
}

export const getGetPropertiesQueryKey = () => [`/util/properties`] as const

export const useGetPropertiesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPropertiesQueryKey()

    const getProperties = useGetPropertiesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>> = ({ signal }) => getProperties(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPropertiesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>>
export type GetPropertiesQueryError = ApiError

export const useGetProperties = <TData = Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPropertiesHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPropertiesQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetDocumentHook = () => {
    const getDocument = useCmdbSwaggerClient<GetResponseWrapper>()

    return (ciUuid: string, signal?: AbortSignal) => {
        return getDocument({ url: `/util/getDocument/${ciUuid}`, method: 'get', signal })
    }
}

export const getGetDocumentQueryKey = (ciUuid: string) => [`/util/getDocument/${ciUuid}`] as const

export const useGetDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError = ApiError>(
    ciUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDocumentQueryKey(ciUuid)

    const getDocument = useGetDocumentHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>> = ({ signal }) => getDocument(ciUuid, signal)

    return { queryKey, queryFn, enabled: !!ciUuid, ...queryOptions }
}

export type GetDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>>
export type GetDocumentQueryError = ApiError

export const useGetDocument = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError = ApiError>(
    ciUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDocumentQueryOptions(ciUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useIntegrityCheckHook = () => {
    const integrityCheck = useCmdbSwaggerClient<IntegrityCheckHolder>()

    return (signal?: AbortSignal) => {
        return integrityCheck({ url: `/util/databaseIntegrityCheck`, method: 'get', signal })
    }
}

export const getIntegrityCheckQueryKey = () => [`/util/databaseIntegrityCheck`] as const

export const useIntegrityCheckQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIntegrityCheckQueryKey()

    const integrityCheck = useIntegrityCheckHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>> = ({ signal }) => integrityCheck(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type IntegrityCheckQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>>
export type IntegrityCheckQueryError = ApiError

export const useIntegrityCheck = <TData = Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIntegrityCheckQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCiRelTypesIntegrityCheckHook = () => {
    const ciRelTypesIntegrityCheck = useCmdbSwaggerClient<CiRelTypesIntegrityCheck200>()

    return (signal?: AbortSignal) => {
        return ciRelTypesIntegrityCheck({ url: `/util/ciRelTypesIntegrityCheck`, method: 'get', signal })
    }
}

export const getCiRelTypesIntegrityCheckQueryKey = () => [`/util/ciRelTypesIntegrityCheck`] as const

export const useCiRelTypesIntegrityCheckQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getCiRelTypesIntegrityCheckQueryKey()

    const ciRelTypesIntegrityCheck = useCiRelTypesIntegrityCheckHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>> = ({ signal }) =>
        ciRelTypesIntegrityCheck(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type CiRelTypesIntegrityCheckQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>>
export type CiRelTypesIntegrityCheckQueryError = ApiError

export const useCiRelTypesIntegrityCheck = <
    TData = Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useCiRelTypesIntegrityCheckQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetRequestStatusHook = () => {
    const getRequestStatus = useCmdbSwaggerClient<RequestStatusResultUi>()

    return (requestId: string, signal?: AbortSignal) => {
        return getRequestStatus({ url: `/request-tracking/${requestId}`, method: 'get', signal })
    }
}

export const getGetRequestStatusQueryKey = (requestId: string) => [`/request-tracking/${requestId}`] as const

export const useGetRequestStatusQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>, TError = ApiError>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRequestStatusQueryKey(requestId)

    const getRequestStatus = useGetRequestStatusHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>> = ({ signal }) =>
        getRequestStatus(requestId, signal)

    return { queryKey, queryFn, enabled: !!requestId, ...queryOptions }
}

export type GetRequestStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>>
export type GetRequestStatusQueryError = ApiError

export const useGetRequestStatus = <TData = Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>, TError = ApiError>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRequestStatusQueryOptions(requestId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadReportsWithFilterHook = () => {
    const readReportsWithFilter = useCmdbSwaggerClient<ReportHolderUi>()

    return (params?: ReadReportsWithFilterParams, signal?: AbortSignal) => {
        return readReportsWithFilter({ url: `/reports`, method: 'get', params, signal })
    }
}

export const getReadReportsWithFilterQueryKey = (params?: ReadReportsWithFilterParams) => [`/reports`, ...(params ? [params] : [])] as const

export const useReadReportsWithFilterQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>, TError = ApiError>(
    params?: ReadReportsWithFilterParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadReportsWithFilterQueryKey(params)

    const readReportsWithFilter = useReadReportsWithFilterHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>> = ({ signal }) =>
        readReportsWithFilter(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadReportsWithFilterQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>>
export type ReadReportsWithFilterQueryError = ApiError

export const useReadReportsWithFilter = <TData = Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>, TError = ApiError>(
    params?: ReadReportsWithFilterParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadReportsWithFilterQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadConfigurationItemByMetaIsCodeHook = () => {
    const readConfigurationItemByMetaIsCode = useCmdbSwaggerClient<ConfigurationItemUi>()

    return (metaIsCode: string, signal?: AbortSignal) => {
        return readConfigurationItemByMetaIsCode({ url: `/readByMetaIsCode/ci/${metaIsCode}`, method: 'get', signal })
    }
}

export const getReadConfigurationItemByMetaIsCodeQueryKey = (metaIsCode: string) => [`/readByMetaIsCode/ci/${metaIsCode}`] as const

export const useReadConfigurationItemByMetaIsCodeQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>,
    TError = ApiError,
>(
    metaIsCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadConfigurationItemByMetaIsCodeQueryKey(metaIsCode)

    const readConfigurationItemByMetaIsCode = useReadConfigurationItemByMetaIsCodeHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>> = ({ signal }) =>
        readConfigurationItemByMetaIsCode(metaIsCode, signal)

    return { queryKey, queryFn, enabled: !!metaIsCode, ...queryOptions }
}

export type ReadConfigurationItemByMetaIsCodeQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>
>
export type ReadConfigurationItemByMetaIsCodeQueryError = ApiError

export const useReadConfigurationItemByMetaIsCode = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>,
    TError = ApiError,
>(
    metaIsCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadConfigurationItemByMetaIsCodeQueryOptions(metaIsCode, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useSearchAllHook = () => {
    const searchAll = useCmdbSwaggerClient<GeneralElasticItemSet>()

    return (params?: SearchAllParams, signal?: AbortSignal) => {
        return searchAll({ url: `/read/search`, method: 'get', params, signal })
    }
}

export const getSearchAllQueryKey = (params?: SearchAllParams) => [`/read/search`, ...(params ? [params] : [])] as const

export const useSearchAllQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>, TError = ApiError>(
    params?: SearchAllParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSearchAllQueryKey(params)

    const searchAll = useSearchAllHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>> = ({ signal }) => searchAll(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type SearchAllQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>>
export type SearchAllQueryError = ApiError

export const useSearchAll = <TData = Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>, TError = ApiError>(
    params?: SearchAllParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchAllHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useSearchAllQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetRoleParticipantHook = () => {
    const getRoleParticipant = useClientForGetRoleParticipantUsingGET<RoleParticipantUI>()

    return (gid: string, signal?: AbortSignal) => {
        return getRoleParticipant({ url: `/read/roleParticipant/${gid}`, method: 'get', signal })
    }
}

export const getGetRoleParticipantQueryKey = (gid: string) => [`/read/roleParticipant/${gid}`] as const

export const useGetRoleParticipantQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>, TError = ApiError>(
    gid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRoleParticipantQueryKey(gid)

    const getRoleParticipant = useGetRoleParticipantHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>> = ({ signal }) => getRoleParticipant(gid, signal)

    return { queryKey, queryFn, enabled: !!gid, ...queryOptions }
}

export type GetRoleParticipantQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>>
export type GetRoleParticipantQueryError = ApiError

export const useGetRoleParticipant = <TData = Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>, TError = ApiError>(
    gid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRoleParticipantQueryOptions(gid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiNeighboursWithAllRelsHook = () => {
    const readCiNeighboursWithAllRels = useClientForReadCiNeighboursWithAllRelsUsingGET<CiWithRelsResultUi>()

    return (uuid: string, params?: ReadCiNeighboursWithAllRelsParams, signal?: AbortSignal) => {
        return readCiNeighboursWithAllRels({ url: `/read/relations/neighbourswithallrels/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadCiNeighboursWithAllRelsQueryKey = (uuid: string, params?: ReadCiNeighboursWithAllRelsParams) =>
    [`/read/relations/neighbourswithallrels/${uuid}`, ...(params ? [params] : [])] as const

export const useReadCiNeighboursWithAllRelsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params?: ReadCiNeighboursWithAllRelsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiNeighboursWithAllRelsQueryKey(uuid, params)

    const readCiNeighboursWithAllRels = useReadCiNeighboursWithAllRelsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>> = ({ signal }) =>
        readCiNeighboursWithAllRels(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiNeighboursWithAllRelsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>>
export type ReadCiNeighboursWithAllRelsQueryError = ApiError

export const useReadCiNeighboursWithAllRels = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadCiNeighboursWithAllRelsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiNeighboursWithAllRelsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadRelationshipHook = () => {
    const readRelationship = useCmdbSwaggerClient<RelationshipUi>()

    return (uuid: string, signal?: AbortSignal) => {
        return readRelationship({ url: `/read/relation/${uuid}`, method: 'get', signal })
    }
}

export const getReadRelationshipQueryKey = (uuid: string) => [`/read/relation/${uuid}`] as const

export const useReadRelationshipQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelationshipQueryKey(uuid)

    const readRelationship = useReadRelationshipHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>> = ({ signal }) => readRelationship(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelationshipQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>>
export type ReadRelationshipQueryError = ApiError

export const useReadRelationship = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelationshipQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetKSSpravcaVerejnaMocAktivnaFZCHook = () => {
    const getKSSpravcaVerejnaMocAktivnaFZC = useCmdbSwaggerClient<QueryResultTableUi>()

    return (signal?: AbortSignal) => {
        return getKSSpravcaVerejnaMocAktivnaFZC({ url: `/read/ksSpVmFazaZivCyklu`, method: 'get', signal })
    }
}

export const getGetKSSpravcaVerejnaMocAktivnaFZCQueryKey = () => [`/read/ksSpVmFazaZivCyklu`] as const

export const useGetKSSpravcaVerejnaMocAktivnaFZCQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetKSSpravcaVerejnaMocAktivnaFZCQueryKey()

    const getKSSpravcaVerejnaMocAktivnaFZC = useGetKSSpravcaVerejnaMocAktivnaFZCHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>> = ({ signal }) =>
        getKSSpravcaVerejnaMocAktivnaFZC(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetKSSpravcaVerejnaMocAktivnaFZCQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>>
export type GetKSSpravcaVerejnaMocAktivnaFZCQueryError = ApiError

export const useGetKSSpravcaVerejnaMocAktivnaFZC = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetKSSpravcaVerejnaMocAktivnaFZCQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiList
 */
export const useReadCiList2Hook = () => {
    const readCiList2 = useCmdbSwaggerClient<ConfigurationItemSetUi>()

    return (params?: ReadCiList2Params, signal?: AbortSignal) => {
        return readCiList2({ url: `/read/cilist`, method: 'get', params, signal })
    }
}

export const getReadCiList2QueryKey = (params?: ReadCiList2Params) => [`/read/cilist`, ...(params ? [params] : [])] as const

export const useReadCiList2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>, TError = ApiError>(
    params?: ReadCiList2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiList2QueryKey(params)

    const readCiList2 = useReadCiList2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>> = ({ signal }) => readCiList2(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadCiList2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>>
export type ReadCiList2QueryError = ApiError

/**
 * @summary readCiList
 */
export const useReadCiList2 = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>, TError = ApiError>(
    params?: ReadCiList2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiList2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiList2QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadConfigurationItemHook = () => {
    const readConfigurationItem = useClientForReadConfigurationItemUsingGET<ConfigurationItemUi>()

    return (uuid: string, signal?: AbortSignal) => {
        return readConfigurationItem({ url: `/read/ci/${uuid}`, method: 'get', signal })
    }
}

export const getReadConfigurationItemQueryKey = (uuid: string) => [`/read/ci/${uuid}`] as const

export const useReadConfigurationItemQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadConfigurationItemQueryKey(uuid)

    const readConfigurationItem = useReadConfigurationItemHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>> = ({ signal }) =>
        readConfigurationItem(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadConfigurationItemQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>>
export type ReadConfigurationItemQueryError = ApiError

export const useReadConfigurationItem = <TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadConfigurationItemQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadRelationshipsHook = () => {
    const readRelationships = useCmdbSwaggerClient<IncidentRelationshipSetUi>()

    return (uuid: string, params?: ReadRelationshipsParams, signal?: AbortSignal) => {
        return readRelationships({ url: `/read/ci/${uuid}/relations`, method: 'get', params, signal })
    }
}

export const getReadRelationshipsQueryKey = (uuid: string, params?: ReadRelationshipsParams) =>
    [`/read/ci/${uuid}/relations`, ...(params ? [params] : [])] as const

export const useReadRelationshipsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadRelationshipsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelationshipsQueryKey(uuid, params)

    const readRelationships = useReadRelationshipsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>> = ({ signal }) =>
        readRelationships(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelationshipsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>>
export type ReadRelationshipsQueryError = ApiError

export const useReadRelationships = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadRelationshipsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelationshipsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadNeighboursConfigurationItemsCountHook = () => {
    const readNeighboursConfigurationItemsCount = useCmdbSwaggerClient<ReadNeighboursConfigurationItemsCount200>()

    return (uuid: string, params?: ReadNeighboursConfigurationItemsCountParams, signal?: AbortSignal) => {
        return readNeighboursConfigurationItemsCount({ url: `/read/ci/${uuid}/neighbourscount`, method: 'get', params, signal })
    }
}

export const getReadNeighboursConfigurationItemsCountQueryKey = (uuid: string, params?: ReadNeighboursConfigurationItemsCountParams) =>
    [`/read/ci/${uuid}/neighbourscount`, ...(params ? [params] : [])] as const

export const useReadNeighboursConfigurationItemsCountQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsCountParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadNeighboursConfigurationItemsCountQueryKey(uuid, params)

    const readNeighboursConfigurationItemsCount = useReadNeighboursConfigurationItemsCountHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>> = ({ signal }) =>
        readNeighboursConfigurationItemsCount(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadNeighboursConfigurationItemsCountQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>
>
export type ReadNeighboursConfigurationItemsCountQueryError = ApiError

export const useReadNeighboursConfigurationItemsCount = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsCountParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadNeighboursConfigurationItemsCountQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadNeighboursConfigurationItemsHook = () => {
    const readNeighboursConfigurationItems = useCmdbSwaggerClient<ConfigurationItemNeighbourSetUi>()

    return (uuid: string, params?: ReadNeighboursConfigurationItemsParams, signal?: AbortSignal) => {
        return readNeighboursConfigurationItems({ url: `/read/ci/${uuid}/neighbours`, method: 'get', params, signal })
    }
}

export const getReadNeighboursConfigurationItemsQueryKey = (uuid: string, params?: ReadNeighboursConfigurationItemsParams) =>
    [`/read/ci/${uuid}/neighbours`, ...(params ? [params] : [])] as const

export const useReadNeighboursConfigurationItemsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadNeighboursConfigurationItemsQueryKey(uuid, params)

    const readNeighboursConfigurationItems = useReadNeighboursConfigurationItemsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>> = ({ signal }) =>
        readNeighboursConfigurationItems(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadNeighboursConfigurationItemsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>>
export type ReadNeighboursConfigurationItemsQueryError = ApiError

export const useReadNeighboursConfigurationItems = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadNeighboursConfigurationItemsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiDerivedRelTypesCountHook = () => {
    const readCiDerivedRelTypesCount = useCmdbSwaggerClient<DerivedCiTypeCountSummaryUi>()

    return (ciUUID: string, params?: ReadCiDerivedRelTypesCountParams, signal?: AbortSignal) => {
        return readCiDerivedRelTypesCount({ url: `/read/ci/${ciUUID}/neighbourscount/derived`, method: 'get', params, signal })
    }
}

export const getReadCiDerivedRelTypesCountQueryKey = (ciUUID: string, params?: ReadCiDerivedRelTypesCountParams) =>
    [`/read/ci/${ciUUID}/neighbourscount/derived`, ...(params ? [params] : [])] as const

export const useReadCiDerivedRelTypesCountQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>,
    TError = ApiError,
>(
    ciUUID: string,
    params?: ReadCiDerivedRelTypesCountParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiDerivedRelTypesCountQueryKey(ciUUID, params)

    const readCiDerivedRelTypesCount = useReadCiDerivedRelTypesCountHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>> = ({ signal }) =>
        readCiDerivedRelTypesCount(ciUUID, params, signal)

    return { queryKey, queryFn, enabled: !!ciUUID, ...queryOptions }
}

export type ReadCiDerivedRelTypesCountQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>>
export type ReadCiDerivedRelTypesCountQueryError = ApiError

export const useReadCiDerivedRelTypesCount = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>, TError = ApiError>(
    ciUUID: string,
    params?: ReadCiDerivedRelTypesCountParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesCountHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiDerivedRelTypesCountQueryOptions(ciUUID, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiDerivedRelTypesHook = () => {
    const readCiDerivedRelTypes = useClientForReadCiDerivedRelTypesUsingGET<CiWithRelsResultUi>()

    return (ciUUID: string, derivedTechnicalName: string, params?: ReadCiDerivedRelTypesParams, signal?: AbortSignal) => {
        return readCiDerivedRelTypes({ url: `/read/ci/${ciUUID}/neighbours/derived/${derivedTechnicalName}`, method: 'get', params, signal })
    }
}

export const getReadCiDerivedRelTypesQueryKey = (ciUUID: string, derivedTechnicalName: string, params?: ReadCiDerivedRelTypesParams) =>
    [`/read/ci/${ciUUID}/neighbours/derived/${derivedTechnicalName}`, ...(params ? [params] : [])] as const

export const useReadCiDerivedRelTypesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>, TError = ApiError>(
    ciUUID: string,
    derivedTechnicalName: string,
    params?: ReadCiDerivedRelTypesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiDerivedRelTypesQueryKey(ciUUID, derivedTechnicalName, params)

    const readCiDerivedRelTypes = useReadCiDerivedRelTypesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>> = ({ signal }) =>
        readCiDerivedRelTypes(ciUUID, derivedTechnicalName, params, signal)

    return { queryKey, queryFn, enabled: !!(ciUUID && derivedTechnicalName), ...queryOptions }
}

export type ReadCiDerivedRelTypesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>>
export type ReadCiDerivedRelTypesQueryError = ApiError

export const useReadCiDerivedRelTypes = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>, TError = ApiError>(
    ciUUID: string,
    derivedTechnicalName: string,
    params?: ReadCiDerivedRelTypesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiDerivedRelTypesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiDerivedRelTypesQueryOptions(ciUUID, derivedTechnicalName, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCountCiTypesByOwnerHook = () => {
    const getCountCiTypesByOwner = useCmdbSwaggerClient<CountTypes[]>()

    return (params?: GetCountCiTypesByOwnerParams, signal?: AbortSignal) => {
        return getCountCiTypesByOwner({ url: `/read/ci/counttypes`, method: 'get', params, signal })
    }
}

export const getGetCountCiTypesByOwnerQueryKey = (params?: GetCountCiTypesByOwnerParams) =>
    [`/read/ci/counttypes`, ...(params ? [params] : [])] as const

export const useGetCountCiTypesByOwnerQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>,
    TError = ApiError,
>(
    params?: GetCountCiTypesByOwnerParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCountCiTypesByOwnerQueryKey(params)

    const getCountCiTypesByOwner = useGetCountCiTypesByOwnerHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>> = ({ signal }) =>
        getCountCiTypesByOwner(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetCountCiTypesByOwnerQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>>
export type GetCountCiTypesByOwnerQueryError = ApiError

export const useGetCountCiTypesByOwner = <TData = Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>, TError = ApiError>(
    params?: GetCountCiTypesByOwnerParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCountCiTypesByOwnerQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetMetricsHook = () => {
    const getMetrics = useCmdbSwaggerClient<void>()

    return (params?: GetMetricsParams, signal?: AbortSignal) => {
        return getMetrics({ url: `/metrics`, method: 'get', params, signal })
    }
}

export const getGetMetricsQueryKey = (params?: GetMetricsParams) => [`/metrics`, ...(params ? [params] : [])] as const

export const useGetMetricsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>, TError = ApiError>(
    params?: GetMetricsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMetricsQueryKey(params)

    const getMetrics = useGetMetricsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>> = ({ signal }) => getMetrics(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetMetricsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>>
export type GetMetricsQueryError = ApiError

export const useGetMetrics = <TData = Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>, TError = ApiError>(
    params?: GetMetricsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetricsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetMetricsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadRelHistoryVersionHook = () => {
    const readRelHistoryVersion = useCmdbSwaggerClient<HistoryVersionUiRelationshipUi>()

    return (uuid: string, params?: ReadRelHistoryVersionParams, signal?: AbortSignal) => {
        return readRelHistoryVersion({ url: `/history/read/rel/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadRelHistoryVersionQueryKey = (uuid: string, params?: ReadRelHistoryVersionParams) =>
    [`/history/read/rel/${uuid}`, ...(params ? [params] : [])] as const

export const useReadRelHistoryVersionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadRelHistoryVersionParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelHistoryVersionQueryKey(uuid, params)

    const readRelHistoryVersion = useReadRelHistoryVersionHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>> = ({ signal }) =>
        readRelHistoryVersion(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelHistoryVersionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>>
export type ReadRelHistoryVersionQueryError = ApiError

export const useReadRelHistoryVersion = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadRelHistoryVersionParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelHistoryVersionQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadRelHistoryVersionsHook = () => {
    const readRelHistoryVersions = useCmdbSwaggerClient<HistoryVersionsListUiRelationshipUi>()

    return (uuid: string, params: ReadRelHistoryVersionsParams, signal?: AbortSignal) => {
        return readRelHistoryVersions({ url: `/history/read/rel/${uuid}/list`, method: 'get', params, signal })
    }
}

export const getReadRelHistoryVersionsQueryKey = (uuid: string, params: ReadRelHistoryVersionsParams) =>
    [`/history/read/rel/${uuid}/list`, ...(params ? [params] : [])] as const

export const useReadRelHistoryVersionsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params: ReadRelHistoryVersionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelHistoryVersionsQueryKey(uuid, params)

    const readRelHistoryVersions = useReadRelHistoryVersionsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>> = ({ signal }) =>
        readRelHistoryVersions(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelHistoryVersionsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>>
export type ReadRelHistoryVersionsQueryError = ApiError

export const useReadRelHistoryVersions = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>, TError = ApiError>(
    uuid: string,
    params: ReadRelHistoryVersionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelHistoryVersionsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGdprHistoryHook = () => {
    const gdprHistory = useCmdbSwaggerClient<ConfigurationItemSetUi>()

    return (params: GdprHistoryParams, signal?: AbortSignal) => {
        return gdprHistory({ url: `/history/read/gdpr/list`, method: 'get', params, signal })
    }
}

export const getGdprHistoryQueryKey = (params: GdprHistoryParams) => [`/history/read/gdpr/list`, ...(params ? [params] : [])] as const

export const useGdprHistoryQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>, TError = ApiError>(
    params: GdprHistoryParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGdprHistoryQueryKey(params)

    const gdprHistory = useGdprHistoryHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>> = ({ signal }) => gdprHistory(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GdprHistoryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>>
export type GdprHistoryQueryError = ApiError

export const useGdprHistory = <TData = Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>, TError = ApiError>(
    params: GdprHistoryParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGdprHistoryHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGdprHistoryQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiHistoryVersionHook = () => {
    const readCiHistoryVersion = useCmdbSwaggerClient<HistoryVersionUiConfigurationItemUi>()

    return (uuid: string, params?: ReadCiHistoryVersionParams, signal?: AbortSignal) => {
        return readCiHistoryVersion({ url: `/history/read/ci/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionQueryKey = (uuid: string, params?: ReadCiHistoryVersionParams) =>
    [`/history/read/ci/${uuid}`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadCiHistoryVersionParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionQueryKey(uuid, params)

    const readCiHistoryVersion = useReadCiHistoryVersionHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>> = ({ signal }) =>
        readCiHistoryVersion(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>>
export type ReadCiHistoryVersionQueryError = ApiError

export const useReadCiHistoryVersion = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>, TError = ApiError>(
    uuid: string,
    params?: ReadCiHistoryVersionParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiHistoryVersionsIncidentRelsHook = () => {
    const readCiHistoryVersionsIncidentRels = useCmdbSwaggerClient<CiHistoryVersionsIncidentRelationshipsUi>()

    return (uuid: string, params: ReadCiHistoryVersionsIncidentRelsParams, signal?: AbortSignal) => {
        return readCiHistoryVersionsIncidentRels({ url: `/history/read/ci/${uuid}/rels`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionsIncidentRelsQueryKey = (uuid: string, params: ReadCiHistoryVersionsIncidentRelsParams) =>
    [`/history/read/ci/${uuid}/rels`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionsIncidentRelsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params: ReadCiHistoryVersionsIncidentRelsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionsIncidentRelsQueryKey(uuid, params)

    const readCiHistoryVersionsIncidentRels = useReadCiHistoryVersionsIncidentRelsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>> = ({ signal }) =>
        readCiHistoryVersionsIncidentRels(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionsIncidentRelsQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>
>
export type ReadCiHistoryVersionsIncidentRelsQueryError = ApiError

export const useReadCiHistoryVersionsIncidentRels = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    params: ReadCiHistoryVersionsIncidentRelsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionsIncidentRelsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiHistoryVersionsHook = () => {
    const readCiHistoryVersions = useCmdbSwaggerClient<HistoryVersionsListUiConfigurationItemUi>()

    return (uuid: string, params: ReadCiHistoryVersionsParams, signal?: AbortSignal) => {
        return readCiHistoryVersions({ url: `/history/read/ci/${uuid}/list`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionsQueryKey = (uuid: string, params: ReadCiHistoryVersionsParams) =>
    [`/history/read/ci/${uuid}/list`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>, TError = ApiError>(
    uuid: string,
    params: ReadCiHistoryVersionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionsQueryKey(uuid, params)

    const readCiHistoryVersions = useReadCiHistoryVersionsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>> = ({ signal }) =>
        readCiHistoryVersions(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>>
export type ReadCiHistoryVersionsQueryError = ApiError

export const useReadCiHistoryVersions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>, TError = ApiError>(
    uuid: string,
    params: ReadCiHistoryVersionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiHistoryModifiedByListHook = () => {
    const readCiHistoryModifiedByList = useCmdbSwaggerClient<string[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return readCiHistoryModifiedByList({ url: `/history/read/ci/${uuid}/list/modifiedBy`, method: 'get', signal })
    }
}

export const getReadCiHistoryModifiedByListQueryKey = (uuid: string) => [`/history/read/ci/${uuid}/list/modifiedBy`] as const

export const useReadCiHistoryModifiedByListQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>,
    TError = ApiError,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryModifiedByListQueryKey(uuid)

    const readCiHistoryModifiedByList = useReadCiHistoryModifiedByListHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>> = ({ signal }) =>
        readCiHistoryModifiedByList(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryModifiedByListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>>
export type ReadCiHistoryModifiedByListQueryError = ApiError

export const useReadCiHistoryModifiedByList = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryModifiedByListQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadCiHistoryVersionsActionsListHook = () => {
    const readCiHistoryVersionsActionsList = useCmdbSwaggerClient<string[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return readCiHistoryVersionsActionsList({ url: `/history/read/ci/${uuid}/list/actions`, method: 'get', signal })
    }
}

export const getReadCiHistoryVersionsActionsListQueryKey = (uuid: string) => [`/history/read/ci/${uuid}/list/actions`] as const

export const useReadCiHistoryVersionsActionsListQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>,
    TError = ApiError,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionsActionsListQueryKey(uuid)

    const readCiHistoryVersionsActionsList = useReadCiHistoryVersionsActionsListHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>> = ({ signal }) =>
        readCiHistoryVersionsActionsList(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionsActionsListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>>
export type ReadCiHistoryVersionsActionsListQueryError = ApiError

export const useReadCiHistoryVersionsActionsList = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>,
    TError = ApiError,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionsActionsListQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadAllCiHistoryVersionsHook = () => {
    const readAllCiHistoryVersions = useCmdbSwaggerClient<HistoryVersionsListUiConfigurationItemUi>()

    return (params: ReadAllCiHistoryVersionsParams, signal?: AbortSignal) => {
        return readAllCiHistoryVersions({ url: `/history/read/ci/list`, method: 'get', params, signal })
    }
}

export const getReadAllCiHistoryVersionsQueryKey = (params: ReadAllCiHistoryVersionsParams) =>
    [`/history/read/ci/list`, ...(params ? [params] : [])] as const

export const useReadAllCiHistoryVersionsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>,
    TError = ApiError,
>(
    params: ReadAllCiHistoryVersionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadAllCiHistoryVersionsQueryKey(params)

    const readAllCiHistoryVersions = useReadAllCiHistoryVersionsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>> = ({ signal }) =>
        readAllCiHistoryVersions(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadAllCiHistoryVersionsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>>
export type ReadAllCiHistoryVersionsQueryError = ApiError

export const useReadAllCiHistoryVersions = <TData = Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>, TError = ApiError>(
    params: ReadAllCiHistoryVersionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadAllCiHistoryVersionsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetGroupListHook = () => {
    const getGroupList = useCmdbSwaggerClient<GroupSetUi>()

    return (signal?: AbortSignal) => {
        return getGroupList({ url: `/grouplist`, method: 'get', signal })
    }
}

export const getGetGroupListQueryKey = () => [`/grouplist`] as const

export const useGetGroupListQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetGroupListQueryKey()

    const getGroupList = useGetGroupListHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>> = ({ signal }) => getGroupList(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetGroupListQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>>
export type GetGroupListQueryError = ApiError

export const useGetGroupList = <TData = Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetGroupListHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetGroupListQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetConfigurationItemsGroupsHook = () => {
    const getConfigurationItemsGroups = useCmdbSwaggerClient<GroupSetUi>()

    return (uuid: string, signal?: AbortSignal) => {
        return getConfigurationItemsGroups({ url: `/grouplist/ci/${uuid}`, method: 'get', signal })
    }
}

export const getGetConfigurationItemsGroupsQueryKey = (uuid: string) => [`/grouplist/ci/${uuid}`] as const

export const useGetConfigurationItemsGroupsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>,
    TError = ApiError,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetConfigurationItemsGroupsQueryKey(uuid)

    const getConfigurationItemsGroups = useGetConfigurationItemsGroupsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>> = ({ signal }) =>
        getConfigurationItemsGroups(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetConfigurationItemsGroupsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>>
export type GetConfigurationItemsGroupsQueryError = ApiError

export const useGetConfigurationItemsGroups = <TData = Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetConfigurationItemsGroupsQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetUuidHook = () => {
    const getUuid = useCmdbSwaggerClient<string>()

    return (signal?: AbortSignal) => {
        return getUuid({ url: `/generate/uuid`, method: 'get', signal })
    }
}

export const getGetUuidQueryKey = () => [`/generate/uuid`] as const

export const useGetUuidQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetUuidQueryKey()

    const getUuid = useGetUuidHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>> = ({ signal }) => getUuid(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetUuidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>>
export type GetUuidQueryError = ApiError

export const useGetUuid = <TData = Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUuidHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetUuidQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReindexReportsHook = () => {
    const reindexReports = useCmdbSwaggerClient<void>()

    return () => {
        return reindexReports({ url: `/util/reports`, method: 'delete' })
    }
}

export const useReindexReportsMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexReportsHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexReportsHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexReports = useReindexReportsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReindexReportsHook>>>, TVariables> = () => {
        return reindexReports()
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexReportsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexReportsHook>>>>

export type ReindexReportsMutationError = ApiError

export const useReindexReports = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexReportsHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useReindexReportsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteStandardHook = () => {
    const deleteStandard = useCmdbSwaggerClient<void>()

    return () => {
        return deleteStandard({ url: `/standard`, method: 'delete' })
    }
}

export const useDeleteStandardMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandard = useDeleteStandardHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteStandardHook>>>, TVariables> = () => {
        return deleteStandard()
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardHook>>>>

export type DeleteStandardMutationError = ApiError

export const useDeleteStandard = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteStandardHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useDeleteStandardMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearCacheAllHook = () => {
    const clearCacheAll = useCmdbSwaggerClient<string>()

    return () => {
        return clearCacheAll({ url: `/cache`, method: 'delete' })
    }
}

export const useClearCacheAllMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheAllHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheAllHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCacheAll = useClearCacheAllHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCacheAllHook>>>, TVariables> = () => {
        return clearCacheAll()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCacheAllMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCacheAllHook>>>>

export type ClearCacheAllMutationError = ApiError

export const useClearCacheAll = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheAllHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCacheAllMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearCacheHook = () => {
    const clearCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearCache({ url: `/cache/schema`, method: 'delete' })
    }
}

export const useClearCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCache = useClearCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCacheHook>>>, TVariables> = () => {
        return clearCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCacheHook>>>>

export type ClearCacheMutationError = ApiError

export const useClearCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearRelCacheHook = () => {
    const clearRelCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearRelCache({ url: `/cache/schema/rel`, method: 'delete' })
    }
}

export const useClearRelCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearRelCache = useClearRelCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearRelCacheHook>>>, TVariables> = () => {
        return clearRelCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearRelCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearRelCacheHook>>>>

export type ClearRelCacheMutationError = ApiError

export const useClearRelCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearRelCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearRelCache1Hook = () => {
    const clearRelCache1 = useCmdbSwaggerClient<string>()

    return (relType: string) => {
        return clearRelCache1({ url: `/cache/schema/rel/${relType}`, method: 'delete' })
    }
}

export const useClearRelCache1MutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCache1Hook>>>, TError, { relType: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCache1Hook>>>, TError, { relType: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearRelCache1 = useClearRelCache1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearRelCache1Hook>>>, { relType: string }> = (props) => {
        const { relType } = props ?? {}

        return clearRelCache1(relType)
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearRelCache1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearRelCache1Hook>>>>

export type ClearRelCache1MutationError = ApiError

export const useClearRelCache1 = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCache1Hook>>>, TError, { relType: string }, TContext>
}) => {
    const mutationOptions = useClearRelCache1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearEnumCacheHook = () => {
    const clearEnumCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearEnumCache({ url: `/cache/schema/enum`, method: 'delete' })
    }
}

export const useClearEnumCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearEnumCache = useClearEnumCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheHook>>>, TVariables> = () => {
        return clearEnumCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearEnumCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheHook>>>>

export type ClearEnumCacheMutationError = ApiError

export const useClearEnumCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearEnumCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearEnumCache1Hook = () => {
    const clearEnumCache1 = useCmdbSwaggerClient<string>()

    return (enumType: string) => {
        return clearEnumCache1({ url: `/cache/schema/enum/${enumType}`, method: 'delete' })
    }
}

export const useClearEnumCache1MutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCache1Hook>>>, TError, { enumType: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCache1Hook>>>, TError, { enumType: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearEnumCache1 = useClearEnumCache1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearEnumCache1Hook>>>, { enumType: string }> = (props) => {
        const { enumType } = props ?? {}

        return clearEnumCache1(enumType)
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearEnumCache1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearEnumCache1Hook>>>>

export type ClearEnumCache1MutationError = ApiError

export const useClearEnumCache1 = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCache1Hook>>>, TError, { enumType: string }, TContext>
}) => {
    const mutationOptions = useClearEnumCache1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearCiCacheHook = () => {
    const clearCiCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearCiCache({ url: `/cache/schema/ci`, method: 'delete' })
    }
}

export const useClearCiCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCiCache = useClearCiCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCiCacheHook>>>, TVariables> = () => {
        return clearCiCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCiCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCiCacheHook>>>>

export type ClearCiCacheMutationError = ApiError

export const useClearCiCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCiCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearCiCache1Hook = () => {
    const clearCiCache1 = useCmdbSwaggerClient<string>()

    return (ciType: string) => {
        return clearCiCache1({ url: `/cache/schema/ci/${ciType}`, method: 'delete' })
    }
}

export const useClearCiCache1MutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCache1Hook>>>, TError, { ciType: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCache1Hook>>>, TError, { ciType: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCiCache1 = useClearCiCache1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCiCache1Hook>>>, { ciType: string }> = (props) => {
        const { ciType } = props ?? {}

        return clearCiCache1(ciType)
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCiCache1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCiCache1Hook>>>>

export type ClearCiCache1MutationError = ApiError

export const useClearCiCache1 = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCache1Hook>>>, TError, { ciType: string }, TContext>
}) => {
    const mutationOptions = useClearCiCache1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearRoleCacheHook = () => {
    const clearRoleCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearRoleCache({ url: `/cache/role`, method: 'delete' })
    }
}

export const useClearRoleCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearRoleCache = useClearRoleCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheHook>>>, TVariables> = () => {
        return clearRoleCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearRoleCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheHook>>>>

export type ClearRoleCacheMutationError = ApiError

export const useClearRoleCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearRoleCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearOrganizationCacheHook = () => {
    const clearOrganizationCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearOrganizationCache({ url: `/cache/organization`, method: 'delete' })
    }
}

export const useClearOrganizationCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearOrganizationCache = useClearOrganizationCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheHook>>>, TVariables> = () => {
        return clearOrganizationCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearOrganizationCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheHook>>>>

export type ClearOrganizationCacheMutationError = ApiError

export const useClearOrganizationCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearOrganizationCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearIdentityCacheHook = () => {
    const clearIdentityCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearIdentityCache({ url: `/cache/identity`, method: 'delete' })
    }
}

export const useClearIdentityCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearIdentityCache = useClearIdentityCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheHook>>>, TVariables> = () => {
        return clearIdentityCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearIdentityCacheMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheHook>>>>

export type ClearIdentityCacheMutationError = ApiError

export const useClearIdentityCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearIdentityCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useClearCmdbReadRoleParticipantCacheHook = () => {
    const clearCmdbReadRoleParticipantCache = useCmdbSwaggerClient<string>()

    return () => {
        return clearCmdbReadRoleParticipantCache({ url: `/cache/cmdb/readRoleParticipant`, method: 'delete' })
    }
}

export const useClearCmdbReadRoleParticipantCacheMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCmdbReadRoleParticipantCache = useClearCmdbReadRoleParticipantCacheHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheHook>>>, TVariables> = () => {
        return clearCmdbReadRoleParticipantCache()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCmdbReadRoleParticipantCacheMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheHook>>>
>

export type ClearCmdbReadRoleParticipantCacheMutationError = ApiError

export const useClearCmdbReadRoleParticipantCache = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCmdbReadRoleParticipantCacheMutationOptions(options)

    return useMutation(mutationOptions)
}

//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS DMS
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useDmsSwaggerClient } from '../hooks/useDmsSwaggerClient'
export type GetMetaParams = {
    version?: string
}

export type UpdateContentBody = {
    file: Blob
}

export type UpdateContent1Body = {
    file: Blob
}

export type GetContentParams = {
    version?: string
}

export interface MetaVersion {
    version?: string
    mimeType?: string
    encoding?: string
    contentLength?: number
    filename?: string
    lastModified?: string
    lastModifiedBy?: string
}

export interface History {
    uuid?: string
    created?: string
    createdBy?: string
    versions?: MetaVersion[]
}

export interface FileSetUi {
    fileItemSet?: string[]
}

export type MetadataStatus = (typeof MetadataStatus)[keyof typeof MetadataStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetadataStatus = {
    CREATED: 'CREATED',
    UPDATED: 'UPDATED',
    REMOVED: 'REMOVED',
} as const

export interface Metadata {
    uuid?: string
    status?: MetadataStatus
    version?: string
    mimeType?: string
    encoding?: string
    filename?: string
    contentLength?: number
    created?: string
    createdBy?: string
    lastModified?: string
    lastModifiedBy?: string
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useGetContentHook = () => {
    const getContent = useDmsSwaggerClient<Blob>()

    return (uuid: string, params?: GetContentParams, signal?: AbortSignal) => {
        return getContent({ url: `/file/${uuid}`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getGetContentQueryKey = (uuid: string, params?: GetContentParams) => [`/file/${uuid}`, ...(params ? [params] : [])] as const

export const useGetContentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>, TError = ApiError>(
    uuid: string,
    params?: GetContentParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetContentQueryKey(uuid, params)

    const getContent = useGetContentHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>> = ({ signal }) => getContent(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetContentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>>
export type GetContentQueryError = ApiError

export const useGetContent = <TData = Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>, TError = ApiError>(
    uuid: string,
    params?: GetContentParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetContentHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetContentQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUpdateContent1Hook = () => {
    const updateContent1 = useDmsSwaggerClient<Metadata>()

    return (uuid: string, updateContent1Body: UpdateContent1Body) => {
        const formData = new FormData()
        formData.append('file', updateContent1Body.file)

        return updateContent1({ url: `/file/${uuid}`, method: 'put', headers: { 'Content-Type': 'multipart/form-data' }, data: formData })
    }
}

export const useUpdateContent1MutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContent1Hook>>>,
        TError,
        { uuid: string; data: UpdateContent1Body },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateContent1Hook>>>,
    TError,
    { uuid: string; data: UpdateContent1Body },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateContent1 = useUpdateContent1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateContent1Hook>>>, { uuid: string; data: UpdateContent1Body }> = (
        props,
    ) => {
        const { uuid, data } = props ?? {}

        return updateContent1(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateContent1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateContent1Hook>>>>
export type UpdateContent1MutationBody = UpdateContent1Body
export type UpdateContent1MutationError = ApiError

export const useUpdateContent1 = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContent1Hook>>>,
        TError,
        { uuid: string; data: UpdateContent1Body },
        TContext
    >
}) => {
    const mutationOptions = useUpdateContent1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateContentHook = () => {
    const updateContent = useDmsSwaggerClient<Metadata>()

    return (uuid: string, updateContentBody: UpdateContentBody) => {
        const formData = new FormData()
        formData.append('file', updateContentBody.file)

        return updateContent({ url: `/file/${uuid}`, method: 'post', headers: { 'Content-Type': 'multipart/form-data' }, data: formData })
    }
}

export const useUpdateContentMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>,
        TError,
        { uuid: string; data: UpdateContentBody },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>, TError, { uuid: string; data: UpdateContentBody }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateContent = useUpdateContentHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>, { uuid: string; data: UpdateContentBody }> = (
        props,
    ) => {
        const { uuid, data } = props ?? {}

        return updateContent(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateContentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>>
export type UpdateContentMutationBody = UpdateContentBody
export type UpdateContentMutationError = ApiError

export const useUpdateContent = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>,
        TError,
        { uuid: string; data: UpdateContentBody },
        TContext
    >
}) => {
    const mutationOptions = useUpdateContentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteContentHook = () => {
    const deleteContent = useDmsSwaggerClient<void>()

    return (uuid: string) => {
        return deleteContent({ url: `/file/${uuid}`, method: 'delete' })
    }
}

export const useDeleteContentMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteContentHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteContentHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteContent = useDeleteContentHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteContentHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return deleteContent(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteContentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteContentHook>>>>

export type DeleteContentMutationError = ApiError

export const useDeleteContent = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteContentHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useDeleteContentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCreateContentHook = () => {
    const createContent = useDmsSwaggerClient<Metadata>()

    return () => {
        return createContent({ url: `/file`, method: 'post' })
    }
}

export const useCreateContentMutationOptions = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateContentHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateContentHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const createContent = useCreateContentHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateContentHook>>>, TVariables> = () => {
        return createContent()
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateContentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateContentHook>>>>

export type CreateContentMutationError = ApiError

export const useCreateContent = <TError = ApiError, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateContentHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useCreateContentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteDocumentsHook = () => {
    const deleteDocuments = useDmsSwaggerClient<void>()

    return (fileSetUi: FileSetUi) => {
        return deleteDocuments({ url: `/file/delete/list`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: fileSetUi })
    }
}

export const useDeleteDocumentsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentsHook>>>, TError, { data: FileSetUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentsHook>>>, TError, { data: FileSetUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteDocuments = useDeleteDocumentsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentsHook>>>, { data: FileSetUi }> = (props) => {
        const { data } = props ?? {}

        return deleteDocuments(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteDocumentsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentsHook>>>>
export type DeleteDocumentsMutationBody = FileSetUi
export type DeleteDocumentsMutationError = ApiError

export const useDeleteDocuments = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentsHook>>>, TError, { data: FileSetUi }, TContext>
}) => {
    const mutationOptions = useDeleteDocumentsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetMetaHook = () => {
    const getMeta = useDmsSwaggerClient<Metadata>()

    return (uuid: string, params?: GetMetaParams, signal?: AbortSignal) => {
        return getMeta({ url: `/file/meta/${uuid}`, method: 'get', params, signal })
    }
}

export const getGetMetaQueryKey = (uuid: string, params?: GetMetaParams) => [`/file/meta/${uuid}`, ...(params ? [params] : [])] as const

export const useGetMetaQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>, TError = ApiError>(
    uuid: string,
    params?: GetMetaParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMetaQueryKey(uuid, params)

    const getMeta = useGetMetaHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>> = ({ signal }) => getMeta(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetMetaQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>>
export type GetMetaQueryError = ApiError

export const useGetMeta = <TData = Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>, TError = ApiError>(
    uuid: string,
    params?: GetMetaParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetaHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetMetaQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetHistoryHook = () => {
    const getHistory = useDmsSwaggerClient<History>()

    return (uuid: string, signal?: AbortSignal) => {
        return getHistory({ url: `/file/history/${uuid}`, method: 'get', signal })
    }
}

export const getGetHistoryQueryKey = (uuid: string) => [`/file/history/${uuid}`] as const

export const useGetHistoryQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetHistoryQueryKey(uuid)

    const getHistory = useGetHistoryHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>> = ({ signal }) => getHistory(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetHistoryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>>
export type GetHistoryQueryError = ApiError

export const useGetHistory = <TData = Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHistoryHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetHistoryQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

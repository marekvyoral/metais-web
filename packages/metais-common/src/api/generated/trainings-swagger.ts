//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Trainings
 * OpenAPI spec version: latest
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useTrainingsSwaggerClient } from '../hooks/useTrainingsSwaggerClient'
export type GetTrainingsForUserParams = {
    trainingId?: string[]
    page?: number
    perPage?: number
    sortBy?: string
    sortType?: string
}

export type UnregisterTraineeParams = {
    email?: string
}

export interface PaginationUi {
    page?: number
    perPage?: number
    totalPages?: number
    totaltems?: number
}

export interface MetaAttributesUi {
    owner?: string
    state?: string
    createdBy?: string
    createdAt?: string
    lastModifiedBy?: string
    lastModifiedAt?: string
}

export interface RelationshipUi {
    type?: string
    uuid?: string
    owner?: string
    startUuid?: string
    startType?: string
    startTypeName?: string
    startName?: string
    startKodMetaIS?: string
    endUuid?: string
    endType?: string
    endTypeName?: string
    endName?: string
    endKodMetaIS?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
}

export interface ConfigurationItemSetUi {
    pagination?: PaginationUi
    configurationItemSet?: ConfigurationItemUi[]
    incidentRelationshipSet?: RelationshipUi[]
}

export type AttributeUiValue = { [key: string]: any }

export interface AttributeUi {
    name?: string
    value?: AttributeUiValue
}

export interface ConfigurationItemUi {
    type?: string
    uuid?: string
    owner?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
}

export interface RequestIdUi {
    requestId?: string
}

export type ConsentType = (typeof ConsentType)[keyof typeof ConsentType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConsentType = {
    PERSONAL_DATA_PROCESSING: 'PERSONAL_DATA_PROCESSING',
} as const

export interface Consent {
    type?: ConsentType
    accepted?: boolean
}

export interface Trainee {
    id?: number
    createdAt?: string
    modifiedAt?: string
    deleted?: boolean
    firstName?: string
    lastName?: string
    email?: string
    phone?: string
    organization?: string
    trainingId?: string
    userId?: string
    consents?: Consent[]
}

export interface TraineeList {
    traineeList?: Trainee[]
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useRegisterTraineeHook = () => {
    const registerTrainee = useTrainingsSwaggerClient<RequestIdUi>()

    return (trainingId: string, trainee: Trainee) => {
        return registerTrainee({ url: `/${trainingId}/trainee`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: trainee })
    }
}

export const useRegisterTraineeMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRegisterTraineeHook>>>,
        TError,
        { trainingId: string; data: Trainee },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRegisterTraineeHook>>>, TError, { trainingId: string; data: Trainee }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const registerTrainee = useRegisterTraineeHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRegisterTraineeHook>>>, { trainingId: string; data: Trainee }> = (
        props,
    ) => {
        const { trainingId, data } = props ?? {}

        return registerTrainee(trainingId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RegisterTraineeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRegisterTraineeHook>>>>
export type RegisterTraineeMutationBody = Trainee
export type RegisterTraineeMutationError = ApiError

export const useRegisterTrainee = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRegisterTraineeHook>>>,
        TError,
        { trainingId: string; data: Trainee },
        TContext
    >
}) => {
    const mutationOptions = useRegisterTraineeMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUnregisterTraineeHook = () => {
    const unregisterTrainee = useTrainingsSwaggerClient<RequestIdUi>()

    return (trainingId: string, params?: UnregisterTraineeParams) => {
        return unregisterTrainee({ url: `/${trainingId}/trainee`, method: 'delete', params })
    }
}

export const useUnregisterTraineeMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUnregisterTraineeHook>>>,
        TError,
        { trainingId: string; params?: UnregisterTraineeParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUnregisterTraineeHook>>>,
    TError,
    { trainingId: string; params?: UnregisterTraineeParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const unregisterTrainee = useUnregisterTraineeHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUnregisterTraineeHook>>>,
        { trainingId: string; params?: UnregisterTraineeParams }
    > = (props) => {
        const { trainingId, params } = props ?? {}

        return unregisterTrainee(trainingId, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UnregisterTraineeMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnregisterTraineeHook>>>>

export type UnregisterTraineeMutationError = ApiError

export const useUnregisterTrainee = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUnregisterTraineeHook>>>,
        TError,
        { trainingId: string; params?: UnregisterTraineeParams },
        TContext
    >
}) => {
    const mutationOptions = useUnregisterTraineeMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetTraineesHook = () => {
    const getTrainees = useTrainingsSwaggerClient<TraineeList>()

    return (trainingId: string, signal?: AbortSignal) => {
        return getTrainees({ url: `/${trainingId}/trainees`, method: 'get', signal })
    }
}

export const getGetTraineesQueryKey = (trainingId: string) => [`/${trainingId}/trainees`] as const

export const useGetTraineesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>, TError = ApiError>(
    trainingId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTraineesQueryKey(trainingId)

    const getTrainees = useGetTraineesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>> = ({ signal }) => getTrainees(trainingId, signal)

    return { queryKey, queryFn, enabled: !!trainingId, ...queryOptions }
}

export type GetTraineesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>>
export type GetTraineesQueryError = ApiError

export const useGetTrainees = <TData = Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>, TError = ApiError>(
    trainingId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTraineesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTraineesQueryOptions(trainingId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportTraineesHook = () => {
    const exportTrainees = useTrainingsSwaggerClient<TraineeList>()

    return (trainingId: string, signal?: AbortSignal) => {
        return exportTrainees({ url: `/${trainingId}/trainee/export`, method: 'get', signal })
    }
}

export const getExportTraineesQueryKey = (trainingId: string) => [`/${trainingId}/trainee/export`] as const

export const useExportTraineesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>, TError = ApiError>(
    trainingId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportTraineesQueryKey(trainingId)

    const exportTrainees = useExportTraineesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>> = ({ signal }) => exportTrainees(trainingId, signal)

    return { queryKey, queryFn, enabled: !!trainingId, ...queryOptions }
}

export type ExportTraineesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>>
export type ExportTraineesQueryError = ApiError

export const useExportTrainees = <TData = Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>, TError = ApiError>(
    trainingId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportTraineesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportTraineesQueryOptions(trainingId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetTrainingsForUserHook = () => {
    const getTrainingsForUser = useTrainingsSwaggerClient<ConfigurationItemSetUi>()

    return (params?: GetTrainingsForUserParams, signal?: AbortSignal) => {
        return getTrainingsForUser({ url: `/userList`, method: 'get', params, signal })
    }
}

export const getGetTrainingsForUserQueryKey = (params?: GetTrainingsForUserParams) => [`/userList`, ...(params ? [params] : [])] as const

export const useGetTrainingsForUserQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>, TError = ApiError>(
    params?: GetTrainingsForUserParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTrainingsForUserQueryKey(params)

    const getTrainingsForUser = useGetTrainingsForUserHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>> = ({ signal }) =>
        getTrainingsForUser(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetTrainingsForUserQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>>
export type GetTrainingsForUserQueryError = ApiError

export const useGetTrainingsForUser = <TData = Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>, TError = ApiError>(
    params?: GetTrainingsForUserParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTrainingsForUserHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTrainingsForUserQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

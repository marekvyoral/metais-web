//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Claim Manager
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useClaimManagerSwaggerClient } from '../hooks/useClaimManagerSwaggerClient'
export type ReadList1Params = {
    createdBy: string
    name: string
    state: string
}

export type _DeleteParams = {
    createdBy: string
}

export interface Claim {
    uuid?: string
    createdAt?: string
    createdBy?: string
    assignedTo?: string
    name?: string
    description?: string
    state?: string
    po?: string
    email?: string
    position?: string
    mobile?: string
    telephone?: string
    identityFirstName?: string
    identityLastName?: string
    identityCompleteName?: string
    identityLogin?: string
    processedAt?: string
    poName?: string
    searchFilter?: string
    decisionReason?: string
}

export interface PaginationUi {
    totalItems?: number
}

export interface ClaimSetUi {
    pagination?: PaginationUi
    claimSet?: ClaimUi[]
}

export interface ClaimListFilter {
    completeName?: string
    login?: string
    phone?: string
    mobile?: string
    email?: string
    poName?: string
    status?: string
    searchFilter?: string
    anonymous?: boolean
    name?: string
}

export interface ClaimListFilterContainerUi {
    hkoUuid?: string
    listType?: string
    page?: number
    perpage?: number
    filter?: ClaimListFilter
    sortAttribute?: string
    ascending?: boolean
}

export type ClaimEventType = (typeof ClaimEventType)[keyof typeof ClaimEventType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimEventType = {
    DECISION_EVENT: 'DECISION_EVENT',
    CREATE_EVENT: 'CREATE_EVENT',
    REGISTER_USER_EVENT: 'REGISTER_USER_EVENT',
} as const

export type ClaimDecisionDataAction = (typeof ClaimDecisionDataAction)[keyof typeof ClaimDecisionDataAction]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimDecisionDataAction = {
    ACCEPT: 'ACCEPT',
    REFUSE: 'REFUSE',
} as const

export interface ClaimDecisionData {
    action?: ClaimDecisionDataAction
    uuid?: string
    decisionReason?: string
}

export interface ClaimEvent {
    type?: ClaimEventType
    claimUi?: ClaimUi
    claimDecisionData?: ClaimDecisionData
}

export type IdentityWithoutAuthResourceType = (typeof IdentityWithoutAuthResourceType)[keyof typeof IdentityWithoutAuthResourceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityWithoutAuthResourceType = {
    PHYSICAL: 'PHYSICAL',
    TECH: 'TECH',
} as const

export type IdentityWithoutAuthResourceState = (typeof IdentityWithoutAuthResourceState)[keyof typeof IdentityWithoutAuthResourceState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityWithoutAuthResourceState = {
    REGISTERED: 'REGISTERED',
    ACTIVATED: 'ACTIVATED',
    VERIFIED: 'VERIFIED',
    BLOCKED: 'BLOCKED',
    DEACTIVATED: 'DEACTIVATED',
} as const

export interface IdentityWithoutAuthResource {
    uuid?: string
    firstName?: string
    lastName?: string
    email?: string
    phone?: string
    mobile?: string
    position?: string
    login?: string
    state?: IdentityWithoutAuthResourceState
    type?: IdentityWithoutAuthResourceType
}

export interface ClaimActionResult {
    resultCode?: number
    message?: string
}

export type ClaimUiClaimState = (typeof ClaimUiClaimState)[keyof typeof ClaimUiClaimState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimUiClaimState = {
    WAITING: 'WAITING',
    ACCEPTED: 'ACCEPTED',
    REFUSED: 'REFUSED',
} as const

export interface ClaimUi {
    uuid?: string
    createdAt?: string
    createdBy?: string
    assignedTo?: string
    name?: string
    description?: string
    claimState?: ClaimUiClaimState
    po?: string
    email?: string
    position?: string
    mobile?: string
    telephone?: string
    identityFirstName?: string
    identityLastName?: string
    identityLogin?: string
    processedAt?: string
    poName?: string
    decisionReason?: string
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useStoreHook = () => {
    const store = useClaimManagerSwaggerClient<ClaimActionResult>()

    return (claimUi: ClaimUi) => {
        return store({ url: `/claims`, method: 'post', headers: { 'Content-Type': 'application/json;charset=UTF-8' }, data: claimUi })
    }
}

export const useStoreMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreHook>>>, TError, { data: ClaimUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreHook>>>, TError, { data: ClaimUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const store = useStoreHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreHook>>>, { data: ClaimUi }> = (props) => {
        const { data } = props ?? {}

        return store(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreHook>>>>
export type StoreMutationBody = ClaimUi
export type StoreMutationError = unknown

export const useStore = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreHook>>>, TError, { data: ClaimUi }, TContext>
}) => {
    const mutationOptions = useStoreMutationOptions(options)

    return useMutation(mutationOptions)
}

export const use_DeleteHook = () => {
    const _delete = useClaimManagerSwaggerClient<void>()

    return (params: _DeleteParams) => {
        return _delete({ url: `/claims`, method: 'delete', params })
    }
}

export const useDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof use_DeleteHook>>>, TError, { params: _DeleteParams }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof use_DeleteHook>>>, TError, { params: _DeleteParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const _delete = use_DeleteHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof use_DeleteHook>>>, { params: _DeleteParams }> = (props) => {
        const { params } = props ?? {}

        return _delete(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type _DeleteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof use_DeleteHook>>>>

export type _DeleteMutationError = unknown

export const useDelete = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof use_DeleteHook>>>, TError, { params: _DeleteParams }, TContext>
}) => {
    const mutationOptions = useDeleteMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateIdentityHook = () => {
    const updateIdentity = useClaimManagerSwaggerClient<void>()

    return (identityWithoutAuthResource: IdentityWithoutAuthResource) => {
        return updateIdentity({
            url: `/claims/updateIdentity`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: identityWithoutAuthResource,
        })
    }
}

export const useUpdateIdentityMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIdentityHook>>>,
        TError,
        { data: IdentityWithoutAuthResource },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateIdentityHook>>>, TError, { data: IdentityWithoutAuthResource }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateIdentity = useUpdateIdentityHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateIdentityHook>>>, { data: IdentityWithoutAuthResource }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return updateIdentity(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateIdentityMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateIdentityHook>>>>
export type UpdateIdentityMutationBody = IdentityWithoutAuthResource
export type UpdateIdentityMutationError = unknown

export const useUpdateIdentity = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIdentityHook>>>,
        TError,
        { data: IdentityWithoutAuthResource },
        TContext
    >
}) => {
    const mutationOptions = useUpdateIdentityMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRegisterUserHook = () => {
    const registerUser = useClaimManagerSwaggerClient<ClaimActionResult>()

    return (claimEvent: ClaimEvent) => {
        return registerUser({
            url: `/claims/registerUser`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: claimEvent,
        })
    }
}

export const useRegisterUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRegisterUserHook>>>, TError, { data: ClaimEvent }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRegisterUserHook>>>, TError, { data: ClaimEvent }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const registerUser = useRegisterUserHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRegisterUserHook>>>, { data: ClaimEvent }> = (props) => {
        const { data } = props ?? {}

        return registerUser(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RegisterUserMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRegisterUserHook>>>>
export type RegisterUserMutationBody = ClaimEvent
export type RegisterUserMutationError = unknown

export const useRegisterUser = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRegisterUserHook>>>, TError, { data: ClaimEvent }, TContext>
}) => {
    const mutationOptions = useRegisterUserMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessEventHook = () => {
    const processEvent = useClaimManagerSwaggerClient<ClaimActionResult>()

    return (claimEvent: ClaimEvent) => {
        return processEvent({
            url: `/claims/processEvent`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: claimEvent,
        })
    }
}

export const useProcessEventMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProcessEventHook>>>, TError, { data: ClaimEvent }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProcessEventHook>>>, TError, { data: ClaimEvent }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const processEvent = useProcessEventHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useProcessEventHook>>>, { data: ClaimEvent }> = (props) => {
        const { data } = props ?? {}

        return processEvent(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessEventMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessEventHook>>>>
export type ProcessEventMutationBody = ClaimEvent
export type ProcessEventMutationError = unknown

export const useProcessEvent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProcessEventHook>>>, TError, { data: ClaimEvent }, TContext>
}) => {
    const mutationOptions = useProcessEventMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readList
 */
export const useReadListHook = () => {
    const readList = useClaimManagerSwaggerClient<ClaimSetUi>()

    return (claimListFilterContainerUi: ClaimListFilterContainerUi) => {
        return readList({ url: `/claims/list`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: claimListFilterContainerUi })
    }
}

export const useReadListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadListHook>>>, TError, { data: ClaimListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadListHook>>>, TError, { data: ClaimListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const readList = useReadListHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReadListHook>>>, { data: ClaimListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return readList(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadListMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadListHook>>>>
export type ReadListMutationBody = ClaimListFilterContainerUi
export type ReadListMutationError = unknown

/**
 * @summary readList
 */
export const useReadList = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReadListHook>>>, TError, { data: ClaimListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useReadListMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReadHook = () => {
    const read = useClaimManagerSwaggerClient<ClaimUi>()

    return (uuid: string, signal?: AbortSignal) => {
        return read({ url: `/claims/${uuid}`, method: 'get', signal })
    }
}

export const getReadQueryKey = (uuid: string) => [`/claims/${uuid}`] as const

export const useReadQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadHook>>>, TError = unknown>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadQueryKey(uuid)

    const read = useReadHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadHook>>>> = ({ signal }) => read(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadHook>>>>
export type ReadQueryError = unknown

export const useRead = <TData = Awaited<ReturnType<ReturnType<typeof useReadHook>>>, TError = unknown>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useReadList1Hook = () => {
    const readList1 = useClaimManagerSwaggerClient<Claim[]>()

    return (params: ReadList1Params, signal?: AbortSignal) => {
        return readList1({ url: `/claims/list/`, method: 'get', params, signal })
    }
}

export const getReadList1QueryKey = (params: ReadList1Params) => [`/claims/list/`, ...(params ? [params] : [])] as const

export const useReadList1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>, TError = unknown>(
    params: ReadList1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadList1QueryKey(params)

    const readList1 = useReadList1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>> = ({ signal }) => readList1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadList1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>>
export type ReadList1QueryError = unknown

export const useReadList1 = <TData = Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>, TError = unknown>(
    params: ReadList1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadList1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadList1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

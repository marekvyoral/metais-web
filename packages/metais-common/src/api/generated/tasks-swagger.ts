//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS BPM Engine
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useTasksSwaggerClient } from '../hooks/useTasksSwaggerClient'
export type GetTaskByIdParams = {
    id: number
}

export interface TaskList {
    tasksCount?: number
    tasksCountCreated?: number
    tasksCountInProgress?: number
    tasksCountDone?: number
    tasks?: Task[]
}

export interface TaskRequest {
    appId?: string
    name?: string
    assignedTo?: string[]
    createdBy?: string
    states?: string[]
    entityRef?: string
    sortBy?: string
    perPage?: number
    pageNumber?: number
    ascending?: boolean
    createdFrom?: string
    createdTo?: string
}

export type TaskHistoryState = (typeof TaskHistoryState)[keyof typeof TaskHistoryState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskHistoryState = {
    CREATED: 'CREATED',
    IN_PROGRESS: 'IN_PROGRESS',
    DONE: 'DONE',
} as const

export interface TaskHistory {
    changedAt?: string
    changedBy?: string
    assignedTo?: string
    activity?: string
    state?: TaskHistoryState
}

export interface TaskHistoryList {
    taskHistoryList?: TaskHistory[]
}

export interface TaskDmsRefsList {
    taskDmsRefs?: string[]
}

export type TaskState = (typeof TaskState)[keyof typeof TaskState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskState = {
    CREATED: 'CREATED',
    IN_PROGRESS: 'IN_PROGRESS',
    DONE: 'DONE',
} as const

export interface Task {
    id?: string
    createdAt?: string
    createdBy?: string
    name?: string
    assignedTo?: string
    entityRef?: string
    state?: TaskState
    appId?: string
    taskGroupId?: string
    description?: string
    dueDate?: string
    taskHistoryList?: TaskHistoryList
    dmsRefsList?: TaskDmsRefsList
}

export interface SimpleTask {
    id?: string
    changedBy?: string
    assignedTo?: string
    activity?: string
    assignedToIds?: string[]
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useReassignTaskWithUserHook = () => {
    const reassignTaskWithUser = useTasksSwaggerClient<void>()

    return (id: number, simpleTask: SimpleTask) => {
        return reassignTaskWithUser({
            url: `/tasks/${id}/reassign`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: simpleTask,
        })
    }
}

export const useReassignTaskWithUserMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReassignTaskWithUserHook>>>,
        TError,
        { id: number; data: SimpleTask },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReassignTaskWithUserHook>>>, TError, { id: number; data: SimpleTask }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reassignTaskWithUser = useReassignTaskWithUserHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReassignTaskWithUserHook>>>, { id: number; data: SimpleTask }> = (
        props,
    ) => {
        const { id, data } = props ?? {}

        return reassignTaskWithUser(id, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReassignTaskWithUserMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReassignTaskWithUserHook>>>>
export type ReassignTaskWithUserMutationBody = SimpleTask
export type ReassignTaskWithUserMutationError = ApiError

export const useReassignTaskWithUser = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReassignTaskWithUserHook>>>,
        TError,
        { id: number; data: SimpleTask },
        TContext
    >
}) => {
    const mutationOptions = useReassignTaskWithUserMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReassignTaskHook = () => {
    const reassignTask = useTasksSwaggerClient<void>()

    return (simpleTask: SimpleTask) => {
        return reassignTask({
            url: `/tasks/reassign`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: simpleTask,
        })
    }
}

export const useReassignTaskMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReassignTaskHook>>>, TError, { data: SimpleTask }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReassignTaskHook>>>, TError, { data: SimpleTask }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reassignTask = useReassignTaskHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReassignTaskHook>>>, { data: SimpleTask }> = (props) => {
        const { data } = props ?? {}

        return reassignTask(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReassignTaskMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReassignTaskHook>>>>
export type ReassignTaskMutationBody = SimpleTask
export type ReassignTaskMutationError = ApiError

export const useReassignTask = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReassignTaskHook>>>, TError, { data: SimpleTask }, TContext>
}) => {
    const mutationOptions = useReassignTaskMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCloseTaskHook = () => {
    const closeTask = useTasksSwaggerClient<void>()

    return (simpleTask: SimpleTask) => {
        return closeTask({ url: `/tasks/close`, method: 'put', headers: { 'Content-Type': 'application/json;charset=UTF-8' }, data: simpleTask })
    }
}

export const useCloseTaskMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCloseTaskHook>>>, TError, { data: SimpleTask }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCloseTaskHook>>>, TError, { data: SimpleTask }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const closeTask = useCloseTaskHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCloseTaskHook>>>, { data: SimpleTask }> = (props) => {
        const { data } = props ?? {}

        return closeTask(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CloseTaskMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCloseTaskHook>>>>
export type CloseTaskMutationBody = SimpleTask
export type CloseTaskMutationError = ApiError

export const useCloseTask = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCloseTaskHook>>>, TError, { data: SimpleTask }, TContext>
}) => {
    const mutationOptions = useCloseTaskMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCreateTaskHook = () => {
    const createTask = useTasksSwaggerClient<void>()

    return (task: Task) => {
        return createTask({ url: `/tasks`, method: 'post', headers: { 'Content-Type': 'application/json;charset=UTF-8' }, data: task })
    }
}

export const useCreateTaskMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateTaskHook>>>, TError, { data: Task }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateTaskHook>>>, TError, { data: Task }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const createTask = useCreateTaskHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateTaskHook>>>, { data: Task }> = (props) => {
        const { data } = props ?? {}

        return createTask(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateTaskMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateTaskHook>>>>
export type CreateTaskMutationBody = Task
export type CreateTaskMutationError = ApiError

export const useCreateTask = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateTaskHook>>>, TError, { data: Task }, TContext>
}) => {
    const mutationOptions = useCreateTaskMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getTasks
 */
export const useGetTasksHook = () => {
    const getTasks = useTasksSwaggerClient<TaskList>()

    return (taskRequest: TaskRequest) => {
        return getTasks({ url: `/tasks/list`, method: 'post', headers: { 'Content-Type': 'application/json;charset=UTF-8' }, data: taskRequest })
    }
}

export const useGetTasksMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetTasksHook>>>, TError, { data: TaskRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetTasksHook>>>, TError, { data: TaskRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getTasks = useGetTasksHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetTasksHook>>>, { data: TaskRequest }> = (props) => {
        const { data } = props ?? {}

        return getTasks(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetTasksMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTasksHook>>>>
export type GetTasksMutationBody = TaskRequest
export type GetTasksMutationError = ApiError

/**
 * @summary getTasks
 */
export const useGetTasks = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetTasksHook>>>, TError, { data: TaskRequest }, TContext>
}) => {
    const mutationOptions = useGetTasksMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetTaskByIdHook = () => {
    const getTaskById = useTasksSwaggerClient<Task>()

    return (params: GetTaskByIdParams, signal?: AbortSignal) => {
        return getTaskById({ url: `/tasks/detail`, method: 'get', params, signal })
    }
}

export const getGetTaskByIdQueryKey = (params: GetTaskByIdParams) => [`/tasks/detail`, ...(params ? [params] : [])] as const

export const useGetTaskByIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>, TError = ApiError>(
    params: GetTaskByIdParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTaskByIdQueryKey(params)

    const getTaskById = useGetTaskByIdHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>> = ({ signal }) => getTaskById(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetTaskByIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>>
export type GetTaskByIdQueryError = ApiError

export const useGetTaskById = <TData = Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>, TError = ApiError>(
    params: GetTaskByIdParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTaskByIdHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTaskByIdQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

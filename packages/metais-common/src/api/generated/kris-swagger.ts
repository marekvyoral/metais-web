//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Kris
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useKRISSwaggerClient } from '../hooks/useKRISSwaggerClient'
export type FindKontrolaParams = {
    entityType: string
    page?: number
    pageSize?: number
    sortAttr?: string
    sortAsc?: boolean
}

export type FindInvalidEntitiesParams = {
    entityUuid: string
    kontrolaId: number
}

export type FindKontrolaResultParams = {
    entityUuid: string
    page?: number
    pageSize?: number
    sortAttr?: string
    sortAsc?: boolean
}

export type FindKontrolaResultDetailParams = {
    kontrolaResultId: number
    page?: number
    pageSize?: number
    sortAttr?: string
    sortAsc?: boolean
}

export type GetIsvsDirection = (typeof GetIsvsDirection)[keyof typeof GetIsvsDirection]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetIsvsDirection = {
    ASC: 'ASC',
    DESC: 'DESC',
} as const

export type GetIsvsOrder = (typeof GetIsvsOrder)[keyof typeof GetIsvsOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetIsvsOrder = {
    NAME: 'NAME',
    CODE: 'CODE',
    ISVS_STATE: 'ISVS_STATE',
    ISVS_TYPE: 'ISVS_TYPE',
    ISVS_MODULE: 'ISVS_MODULE',
} as const

export type GetIsvsParams = {
    page: number
    count: number
    order: GetIsvsOrder
    direction: GetIsvsDirection
}

export type GetKsDirection = (typeof GetKsDirection)[keyof typeof GetKsDirection]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetKsDirection = {
    ASC: 'ASC',
    DESC: 'DESC',
} as const

export type GetKsOrder = (typeof GetKsOrder)[keyof typeof GetKsOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetKsOrder = {
    NAME: 'NAME',
    CODE: 'CODE',
    FAZA_NAME: 'FAZA_NAME',
} as const

export type GetKsParams = {
    page: number
    count: number
    order: GetKsOrder
    direction: GetKsDirection
}

export type GetPhaseMap200 = { [key: string]: string }

export type GetProgramWithPartsParams = {
    programUuid: string
    projectType: string
}

export type GetProgramPartFinanceParams = {
    projectType: string
    financialValue: number
}

export type RequiredDocs200Item = { [key: string]: { [key: string]: any } }

export type SetStates200 = { [key: string]: any }

export type SetStatesParams = {
    typeOfApprovalProcess: string
}

export type Permissions200 = { [key: string]: boolean }

export type PermissionsParams = {
    type: string
}

export type CheckOperationPermissionByMetaisCodeParams = {
    operation: string
}

export type AgendaCezPo200 = { [key: string]: any }

export type AgendyCezProjekty200 = { [key: string]: any }

export type AplikacneSluzbyCezIsvs200 = { [key: string]: any }

export type AsCezProjekty200 = { [key: string]: any }

export type BazyDatCezIsvs200 = { [key: string]: any }

export type BazyDatCezProjekty200 = { [key: string]: any }

export type IsvsCezPo200 = { [key: string]: any }

export type IsvsCezProjekty200 = { [key: string]: any }

export type RunKontrolaResultParams = {
    kontrolaName: string
    'kontrolaIds[]': number[]
    entityUuid: string
}

export type ExportNoteResponseParams = {
    page: number
    count: number
    version: number
}

export type KoncoveSluzbyCezIsvs200 = { [key: string]: any }

export type KsCezPo200 = { [key: string]: any }

export type KsCezProjekty200 = { [key: string]: any }

export type PlatformyCezProjekty200 = { [key: string]: any }

export type CreateProgram200 = { [key: string]: any }

export type CancelProject200 = { [key: string]: string }

export type Confirm200 = { [key: string]: string }

export type ConfirmParams = {
    order?: number
    approvalProcess?: string
}

export type ReturnProject200 = { [key: string]: string }

export type ProjektyCezIsvs200 = { [key: string]: any }

export type ProjektyCezPo200 = { [key: string]: any }

export type UsekyverejnejSpravyCezIsvs200 = { [key: string]: any }

export type UvsCezProjekty200 = { [key: string]: any }

export type ZivotneSituacieCezIsvs200 = { [key: string]: any }

export type ZsCezPo200 = { [key: string]: any }

export type ZsCezProjekty200 = { [key: string]: any }

export type UpdateProgramPartsFinance200 = { [key: string]: any }

export interface PaginationResponseData {
    page?: number
    perPage?: number
    totalPages?: number
    totalItems?: number
}

export interface ApiKontrolaList {
    results?: ApiKontrola[]
    pagination?: PaginationResponseData
}

export interface ApiKontrolaResult {
    id?: number
    entityUuid?: string
    kontrolaName?: string
    kontrolaRunAt?: string
    kontrolaRunBy?: string
    errorCount?: number
}

export interface ApiKontrolaResultList {
    results?: ApiKontrolaResult[]
    pagination?: PaginationResponseData
}

export interface ApiKontrola {
    id?: number
    code?: string
    entityType?: string
    resultEntityType?: string
    errorDescription?: string
    description?: string
    relevance?: string
    query?: string
}

export interface ApiKontrolaResultDetail {
    id?: number
    kontrola?: ApiKontrola
    kontrolaResult?: ApiKontrolaResult
    entityUuid?: string
    entityName?: string
}

export interface ApiKontrolaResultDetailList {
    results?: ApiKontrolaResultDetail[]
    pagination?: PaginationResponseData
}

export interface KrisToBeIsvs {
    uuid?: string
    name?: string
    code?: string
    isvsState?: string
    isvsType?: string
    modulUuid?: string
    modulName?: string
    validated?: boolean
}

export interface NoteItemUi {
    state?: StateUi
    evaluations?: NoteUi[]
    responses?: NoteUi[]
}

export interface SortObject {
    empty?: boolean
    sorted?: boolean
    unsorted?: boolean
}

export interface PageableObject {
    offset?: number
    sort?: SortObject
    unpaged?: boolean
    pageNumber?: number
    pageSize?: number
    paged?: boolean
}

export interface PageKrisToBeIsvs {
    totalElements?: number
    totalPages?: number
    size?: number
    content?: KrisToBeIsvs[]
    number?: number
    sort?: SortObject
    numberOfElements?: number
    pageable?: PageableObject
    first?: boolean
    last?: boolean
    empty?: boolean
}

export interface KrisToBeKs {
    uuid?: string
    name?: string
    code?: string
    fazaUuid?: string
    fazaName?: string
    validated?: boolean
}

export interface PageKrisToBeKs {
    totalElements?: number
    totalPages?: number
    size?: number
    content?: KrisToBeKs[]
    number?: number
    sort?: SortObject
    numberOfElements?: number
    pageable?: PageableObject
    first?: boolean
    last?: boolean
    empty?: boolean
}

export interface KrisToBeRights {
    inEvaluation?: boolean
    inProgress?: boolean
    hasVersions?: boolean
    evaluator?: boolean
    municipality?: boolean
    creator?: boolean
}

export interface ApiPermissionResult {
    hasPermission?: boolean
}

export interface RecycleSetUi {
    relIdSet?: string[]
    ciIdSet?: string[]
}

export interface MetaAttributesUi {
    owner?: string
    state?: string
    createdBy?: string
    createdAt?: string
    lastModifiedBy?: string
    lastModifiedAt?: string
}

export interface ConfigurationItemInvalidateUi {
    type?: string
    uuid?: string
    owner?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
    invalidateReason?: InvalidateReason
}

export interface RelationshipUi {
    type?: string
    uuid?: string
    owner?: string
    startUuid?: string
    endUuid?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
}

export interface InvalidateReason {
    comment?: string
}

export interface StoreSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
}

export interface CustomMessageUi {
    messageSuccessType?: string
    successPlaceholderValues?: string[]
    messageFailType?: string
    failPlaceholderValues?: string[]
}

export interface GraphRequestUi {
    storeSet?: StoreSetUi
    invalidateSet?: InvalidateSetUi
    changeOwnerSet?: ChangeOwnerSetUi
    recycleSet?: RecycleSetUi
    customMessage?: CustomMessageUi
}

export interface ConfigurationItemUi {
    type?: string
    uuid?: string
    owner?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
}

export interface InvalidateSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
}

export type ChangeOwnerDataUiChangeType = (typeof ChangeOwnerDataUiChangeType)[keyof typeof ChangeOwnerDataUiChangeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeOwnerDataUiChangeType = {
    changeCmdbItemAndRelatedCmdbItems: 'changeCmdbItemAndRelatedCmdbItems',
    changeCmdbItemAndRelatedCmdbItemsWithSameOwner: 'changeCmdbItemAndRelatedCmdbItemsWithSameOwner',
    changeCmdbItem: 'changeCmdbItem',
} as const

export interface ChangeOwnerDataUi {
    newOwner?: string
    changeReason?: string
    changeDescription?: string
    changeType?: ChangeOwnerDataUiChangeType
}

export interface ChangeOwnerSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    relationshipSet?: RelationshipUi[]
    invalidateReason?: InvalidateReason
    changeOwnerData?: ChangeOwnerDataUi
}

export type AttributeUiValue = { [key: string]: any }

export interface AttributeUi {
    name?: string
    value?: AttributeUiValue
}

export interface ExportNoteUi {
    code?: string
    evaluation?: NoteUi
    response?: NoteUi
}

export interface ExportNoteResponse {
    page?: ExportNoteUi[]
    lastPage?: boolean
}

export interface ExportFilter {
    ids?: string[]
}

export interface StateValueUi {
    name?: string
    value?: boolean
}

export interface StateUi {
    values?: StateValueUi[]
}

export interface NoteVersionUi {
    created?: string
    createdBy?: string
    evaluated?: string
    evaluatedBy?: string
    noteState?: string
    versionNumber?: number
}

export interface NoteValueUi {
    name?: string
    value?: string
}

export interface NewNoteUi {
    values?: NoteValueUi[]
    state?: StateUi
}

export interface NoteUi {
    values?: NoteValueUi[]
    noteVersionUi?: NoteVersionUi
}

export interface DocumentGroup {
    id?: number
    name?: string
    nameEng?: string
    description?: string
    descriptionEng?: string
    state?: string
    position?: number
}

export interface Document {
    id?: number
    name?: string
    nameEng?: string
    description?: string
    descriptionEng?: string
    required?: boolean
    confluence?: boolean
    type?: string
    position?: number
    documentGroup?: DocumentGroup
}

export interface RequestIdUi {
    requestId?: string
}

export interface KrisRequestNew {
    mainPerson?: string
    showInvalidated?: boolean
    includeSubPersons?: boolean
}

export interface KrisRequest {
    data?: string[]
    showInvalidated?: boolean
}

export interface KrisUi {
    uuid?: string
    approved?: boolean
    manualApproved?: boolean
}

export interface ApiProgram {
    id?: number
    programUuid?: string
    name?: string
    projectType?: string
    partFinances?: ApiProgramPartFinance[]
    default?: boolean
}

export interface ApiApprovalProcess {
    id?: number
    name?: string
    nameEng?: string
    description?: string
    descriptionEng?: string
    technicalName?: string
}

export interface ApiProgramPartFinance {
    id?: number
    approvalProcess?: ApiApprovalProcess
    financialGroup?: string
    min?: number
    max?: number
    position?: number
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useUpdateProgramPartsFinanceHook = () => {
    const updateProgramPartsFinance = useKRISSwaggerClient<UpdateProgramPartsFinance200>()

    return (id: number, apiProgram: ApiProgram) => {
        return updateProgramPartsFinance({
            url: `/project/updateProgram/${id}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiProgram,
        })
    }
}

export const useUpdateProgramPartsFinanceMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateProgramPartsFinanceHook>>>,
        TError,
        { id: number; data: ApiProgram },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateProgramPartsFinanceHook>>>,
    TError,
    { id: number; data: ApiProgram },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateProgramPartsFinance = useUpdateProgramPartsFinanceHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateProgramPartsFinanceHook>>>, { id: number; data: ApiProgram }> = (
        props,
    ) => {
        const { id, data } = props ?? {}

        return updateProgramPartsFinance(id, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateProgramPartsFinanceMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateProgramPartsFinanceHook>>>>
export type UpdateProgramPartsFinanceMutationBody = ApiProgram
export type UpdateProgramPartsFinanceMutationError = ApiError

export const useUpdateProgramPartsFinance = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateProgramPartsFinanceHook>>>,
        TError,
        { id: number; data: ApiProgram },
        TContext
    >
}) => {
    const mutationOptions = useUpdateProgramPartsFinanceMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateManualApprovmentHook = () => {
    const updateManualApprovment = useKRISSwaggerClient<void>()

    return (uuid: string, krisUi: KrisUi) => {
        return updateManualApprovment({
            url: `/kris-to-be/kris/${uuid}/approve`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: krisUi,
        })
    }
}

export const useUpdateManualApprovmentMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateManualApprovmentHook>>>,
        TError,
        { uuid: string; data: KrisUi },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateManualApprovmentHook>>>, TError, { uuid: string; data: KrisUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateManualApprovment = useUpdateManualApprovmentHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateManualApprovmentHook>>>, { uuid: string; data: KrisUi }> = (
        props,
    ) => {
        const { uuid, data } = props ?? {}

        return updateManualApprovment(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateManualApprovmentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateManualApprovmentHook>>>>
export type UpdateManualApprovmentMutationBody = KrisUi
export type UpdateManualApprovmentMutationError = ApiError

export const useUpdateManualApprovment = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateManualApprovmentHook>>>,
        TError,
        { uuid: string; data: KrisUi },
        TContext
    >
}) => {
    const mutationOptions = useUpdateManualApprovmentMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary zsCezProjekty
 */
export const useZsCezProjektyHook = () => {
    const zsCezProjekty = useKRISSwaggerClient<ZsCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return zsCezProjekty({ url: `/zs-cez-projekty`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useZsCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const zsCezProjekty = useZsCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZsCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return zsCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ZsCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZsCezProjektyHook>>>>
export type ZsCezProjektyMutationBody = KrisRequest
export type ZsCezProjektyMutationError = ApiError

/**
 * @summary zsCezProjekty
 */
export const useZsCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useZsCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary zsCezPo
 */
export const useZsCezPoHook = () => {
    const zsCezPo = useKRISSwaggerClient<ZsCezPo200>()

    return (krisRequestNew: KrisRequestNew) => {
        return zsCezPo({ url: `/zs-cez-po`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequestNew })
    }
}

export const useZsCezPoMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const zsCezPo = useZsCezPoHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZsCezPoHook>>>, { data: KrisRequestNew }> = (props) => {
        const { data } = props ?? {}

        return zsCezPo(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ZsCezPoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZsCezPoHook>>>>
export type ZsCezPoMutationBody = KrisRequestNew
export type ZsCezPoMutationError = ApiError

/**
 * @summary zsCezPo
 */
export const useZsCezPo = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}) => {
    const mutationOptions = useZsCezPoMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary zivotneSituacieCezIsvs
 */
export const useZivotneSituacieCezIsvsHook = () => {
    const zivotneSituacieCezIsvs = useKRISSwaggerClient<ZivotneSituacieCezIsvs200>()

    return (krisRequest: KrisRequest) => {
        return zivotneSituacieCezIsvs({ url: `/zs-cez-isvs`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useZivotneSituacieCezIsvsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZivotneSituacieCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZivotneSituacieCezIsvsHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const zivotneSituacieCezIsvs = useZivotneSituacieCezIsvsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useZivotneSituacieCezIsvsHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return zivotneSituacieCezIsvs(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ZivotneSituacieCezIsvsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useZivotneSituacieCezIsvsHook>>>>
export type ZivotneSituacieCezIsvsMutationBody = KrisRequest
export type ZivotneSituacieCezIsvsMutationError = ApiError

/**
 * @summary zivotneSituacieCezIsvs
 */
export const useZivotneSituacieCezIsvs = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useZivotneSituacieCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useZivotneSituacieCezIsvsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary uvsCezProjekty
 */
export const useUvsCezProjektyHook = () => {
    const uvsCezProjekty = useKRISSwaggerClient<UvsCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return uvsCezProjekty({ url: `/uvs-cez-projekty`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useUvsCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUvsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUvsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const uvsCezProjekty = useUvsCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUvsCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return uvsCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UvsCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUvsCezProjektyHook>>>>
export type UvsCezProjektyMutationBody = KrisRequest
export type UvsCezProjektyMutationError = ApiError

/**
 * @summary uvsCezProjekty
 */
export const useUvsCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUvsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useUvsCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary usekyverejnejSpravyCezIsvs
 */
export const useUsekyverejnejSpravyCezIsvsHook = () => {
    const usekyverejnejSpravyCezIsvs = useKRISSwaggerClient<UsekyverejnejSpravyCezIsvs200>()

    return (krisRequest: KrisRequest) => {
        return usekyverejnejSpravyCezIsvs({
            url: `/uvs-cez-isvs`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: krisRequest,
        })
    }
}

export const useUsekyverejnejSpravyCezIsvsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUsekyverejnejSpravyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUsekyverejnejSpravyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const usekyverejnejSpravyCezIsvs = useUsekyverejnejSpravyCezIsvsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUsekyverejnejSpravyCezIsvsHook>>>, { data: KrisRequest }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return usekyverejnejSpravyCezIsvs(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UsekyverejnejSpravyCezIsvsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUsekyverejnejSpravyCezIsvsHook>>>>
export type UsekyverejnejSpravyCezIsvsMutationBody = KrisRequest
export type UsekyverejnejSpravyCezIsvsMutationError = ApiError

/**
 * @summary usekyverejnejSpravyCezIsvs
 */
export const useUsekyverejnejSpravyCezIsvs = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUsekyverejnejSpravyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useUsekyverejnejSpravyCezIsvsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRecycleConfigurationItemBiznisMdulesHook = () => {
    const recycleConfigurationItemBiznisMdules = useKRISSwaggerClient<RequestIdUi>()

    return (uuid: string) => {
        return recycleConfigurationItemBiznisMdules({ url: `/recycle/ci/${uuid}`, method: 'post' })
    }
}

export const useRecycleConfigurationItemBiznisMdulesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleConfigurationItemBiznisMdulesHook>>>,
        TError,
        { uuid: string },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRecycleConfigurationItemBiznisMdulesHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleConfigurationItemBiznisMdules = useRecycleConfigurationItemBiznisMdulesHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRecycleConfigurationItemBiznisMdulesHook>>>, { uuid: string }> = (
        props,
    ) => {
        const { uuid } = props ?? {}

        return recycleConfigurationItemBiznisMdules(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleConfigurationItemBiznisMdulesMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRecycleConfigurationItemBiznisMdulesHook>>>
>

export type RecycleConfigurationItemBiznisMdulesMutationError = ApiError

export const useRecycleConfigurationItemBiznisMdules = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleConfigurationItemBiznisMdulesHook>>>,
        TError,
        { uuid: string },
        TContext
    >
}) => {
    const mutationOptions = useRecycleConfigurationItemBiznisMdulesMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary projektyCezPo
 */
export const useProjektyCezPoHook = () => {
    const projektyCezPo = useKRISSwaggerClient<ProjektyCezPo200>()

    return (krisRequestNew: KrisRequestNew) => {
        return projektyCezPo({ url: `/projekty-cez-po`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequestNew })
    }
}

export const useProjektyCezPoMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProjektyCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProjektyCezPoHook>>>, TError, { data: KrisRequestNew }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const projektyCezPo = useProjektyCezPoHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useProjektyCezPoHook>>>, { data: KrisRequestNew }> = (props) => {
        const { data } = props ?? {}

        return projektyCezPo(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProjektyCezPoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProjektyCezPoHook>>>>
export type ProjektyCezPoMutationBody = KrisRequestNew
export type ProjektyCezPoMutationError = ApiError

/**
 * @summary projektyCezPo
 */
export const useProjektyCezPo = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProjektyCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}) => {
    const mutationOptions = useProjektyCezPoMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary projektyCezIsvs
 */
export const useProjektyCezIsvsHook = () => {
    const projektyCezIsvs = useKRISSwaggerClient<ProjektyCezIsvs200>()

    return (krisRequest: KrisRequest) => {
        return projektyCezIsvs({ url: `/projekty-cez-isvs`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useProjektyCezIsvsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProjektyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProjektyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const projektyCezIsvs = useProjektyCezIsvsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useProjektyCezIsvsHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return projektyCezIsvs(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProjektyCezIsvsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProjektyCezIsvsHook>>>>
export type ProjektyCezIsvsMutationBody = KrisRequest
export type ProjektyCezIsvsMutationError = ApiError

/**
 * @summary projektyCezIsvs
 */
export const useProjektyCezIsvs = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useProjektyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useProjektyCezIsvsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReturnProjectHook = () => {
    const returnProject = useKRISSwaggerClient<ReturnProject200>()

    return (uuid: string) => {
        return returnProject({ url: `/project/${uuid}/return`, method: 'post' })
    }
}

export const useReturnProjectMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReturnProjectHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReturnProjectHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const returnProject = useReturnProjectHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReturnProjectHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return returnProject(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReturnProjectMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReturnProjectHook>>>>

export type ReturnProjectMutationError = ApiError

export const useReturnProject = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReturnProjectHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useReturnProjectMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useConfirmHook = () => {
    const confirm = useKRISSwaggerClient<Confirm200>()

    return (uuid: string, params?: ConfirmParams) => {
        return confirm({ url: `/project/${uuid}/confirm`, method: 'post', params })
    }
}

export const useConfirmMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConfirmHook>>>, TError, { uuid: string; params?: ConfirmParams }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConfirmHook>>>, TError, { uuid: string; params?: ConfirmParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const confirm = useConfirmHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useConfirmHook>>>, { uuid: string; params?: ConfirmParams }> = (
        props,
    ) => {
        const { uuid, params } = props ?? {}

        return confirm(uuid, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ConfirmMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useConfirmHook>>>>

export type ConfirmMutationError = ApiError

export const useConfirm = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useConfirmHook>>>, TError, { uuid: string; params?: ConfirmParams }, TContext>
}) => {
    const mutationOptions = useConfirmMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCancelProjectHook = () => {
    const cancelProject = useKRISSwaggerClient<CancelProject200>()

    return (uuid: string) => {
        return cancelProject({ url: `/project/${uuid}/cancel`, method: 'post' })
    }
}

export const useCancelProjectMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCancelProjectHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCancelProjectHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const cancelProject = useCancelProjectHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCancelProjectHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return cancelProject(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type CancelProjectMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCancelProjectHook>>>>

export type CancelProjectMutationError = ApiError

export const useCancelProject = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCancelProjectHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useCancelProjectMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSaveDocumentHook = () => {
    const saveDocument = useKRISSwaggerClient<Document>()

    return (document: Document) => {
        return saveDocument({ url: `/project/documents`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: document })
    }
}

export const useSaveDocumentMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveDocumentHook>>>, TError, { data: Document }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveDocumentHook>>>, TError, { data: Document }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const saveDocument = useSaveDocumentHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSaveDocumentHook>>>, { data: Document }> = (props) => {
        const { data } = props ?? {}

        return saveDocument(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveDocumentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveDocumentHook>>>>
export type SaveDocumentMutationBody = Document
export type SaveDocumentMutationError = ApiError

export const useSaveDocument = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveDocumentHook>>>, TError, { data: Document }, TContext>
}) => {
    const mutationOptions = useSaveDocumentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSaveDocumentGroupHook = () => {
    const saveDocumentGroup = useKRISSwaggerClient<DocumentGroup>()

    return (documentGroup: DocumentGroup) => {
        return saveDocumentGroup({
            url: `/project/documents/groups/`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: documentGroup,
        })
    }
}

export const useSaveDocumentGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveDocumentGroupHook>>>, TError, { data: DocumentGroup }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveDocumentGroupHook>>>, TError, { data: DocumentGroup }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const saveDocumentGroup = useSaveDocumentGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSaveDocumentGroupHook>>>, { data: DocumentGroup }> = (props) => {
        const { data } = props ?? {}

        return saveDocumentGroup(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveDocumentGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveDocumentGroupHook>>>>
export type SaveDocumentGroupMutationBody = DocumentGroup
export type SaveDocumentGroupMutationError = ApiError

export const useSaveDocumentGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveDocumentGroupHook>>>, TError, { data: DocumentGroup }, TContext>
}) => {
    const mutationOptions = useSaveDocumentGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCreateProgramHook = () => {
    const createProgram = useKRISSwaggerClient<CreateProgram200>()

    return (apiProgram: ApiProgram) => {
        return createProgram({ url: `/project/createProgram`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: apiProgram })
    }
}

export const useCreateProgramMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateProgramHook>>>, TError, { data: ApiProgram }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateProgramHook>>>, TError, { data: ApiProgram }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const createProgram = useCreateProgramHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateProgramHook>>>, { data: ApiProgram }> = (props) => {
        const { data } = props ?? {}

        return createProgram(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateProgramMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateProgramHook>>>>
export type CreateProgramMutationBody = ApiProgram
export type CreateProgramMutationError = ApiError

export const useCreateProgram = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateProgramHook>>>, TError, { data: ApiProgram }, TContext>
}) => {
    const mutationOptions = useCreateProgramMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary platformyCezProjekty
 */
export const usePlatformyCezProjektyHook = () => {
    const platformyCezProjekty = useKRISSwaggerClient<PlatformyCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return platformyCezProjekty({
            url: `/platformy-cez-projekty`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: krisRequest,
        })
    }
}

export const usePlatformyCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePlatformyCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePlatformyCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const platformyCezProjekty = usePlatformyCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePlatformyCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return platformyCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PlatformyCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePlatformyCezProjektyHook>>>>
export type PlatformyCezProjektyMutationBody = KrisRequest
export type PlatformyCezProjektyMutationError = ApiError

/**
 * @summary platformyCezProjekty
 */
export const usePlatformyCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePlatformyCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = usePlatformyCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary ksCezProjekty
 */
export const useKsCezProjektyHook = () => {
    const ksCezProjekty = useKRISSwaggerClient<KsCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return ksCezProjekty({ url: `/ks-cez-projekty`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useKsCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const ksCezProjekty = useKsCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useKsCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return ksCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type KsCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useKsCezProjektyHook>>>>
export type KsCezProjektyMutationBody = KrisRequest
export type KsCezProjektyMutationError = ApiError

/**
 * @summary ksCezProjekty
 */
export const useKsCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useKsCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @deprecated
 * @summary ksCezPo
 */
export const useKsCezPoHook = () => {
    const ksCezPo = useKRISSwaggerClient<KsCezPo200>()

    return (krisRequestNew: KrisRequestNew) => {
        return ksCezPo({ url: `/ks-cez-po`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequestNew })
    }
}

export const useKsCezPoMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const ksCezPo = useKsCezPoHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useKsCezPoHook>>>, { data: KrisRequestNew }> = (props) => {
        const { data } = props ?? {}

        return ksCezPo(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type KsCezPoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useKsCezPoHook>>>>
export type KsCezPoMutationBody = KrisRequestNew
export type KsCezPoMutationError = ApiError

/**
 * @deprecated
 * @summary ksCezPo
 */
export const useKsCezPo = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}) => {
    const mutationOptions = useKsCezPoMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary koncoveSluzbyCezIsvs
 */
export const useKoncoveSluzbyCezIsvsHook = () => {
    const koncoveSluzbyCezIsvs = useKRISSwaggerClient<KoncoveSluzbyCezIsvs200>()

    return (krisRequest: KrisRequest) => {
        return koncoveSluzbyCezIsvs({ url: `/ks-cez-isvs`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useKoncoveSluzbyCezIsvsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKoncoveSluzbyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKoncoveSluzbyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const koncoveSluzbyCezIsvs = useKoncoveSluzbyCezIsvsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useKoncoveSluzbyCezIsvsHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return koncoveSluzbyCezIsvs(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type KoncoveSluzbyCezIsvsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useKoncoveSluzbyCezIsvsHook>>>>
export type KoncoveSluzbyCezIsvsMutationBody = KrisRequest
export type KoncoveSluzbyCezIsvsMutationError = ApiError

/**
 * @summary koncoveSluzbyCezIsvs
 */
export const useKoncoveSluzbyCezIsvs = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useKoncoveSluzbyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useKoncoveSluzbyCezIsvsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useAddResponseHook = () => {
    const addResponse = useKRISSwaggerClient<void>()

    return (kris: string, uuid: string, type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS', noteUi: NoteUi) => {
        return addResponse({
            url: `/kris-to-be/kris/${kris}/${uuid}/${type}/response`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: noteUi,
        })
    }
}

export const useAddResponseMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddResponseHook>>>,
        TError,
        { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NoteUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddResponseHook>>>,
    TError,
    { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NoteUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addResponse = useAddResponseHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddResponseHook>>>,
        { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NoteUi }
    > = (props) => {
        const { kris, uuid, type, data } = props ?? {}

        return addResponse(kris, uuid, type, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddResponseMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddResponseHook>>>>
export type AddResponseMutationBody = NoteUi
export type AddResponseMutationError = ApiError

export const useAddResponse = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddResponseHook>>>,
        TError,
        { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NoteUi },
        TContext
    >
}) => {
    const mutationOptions = useAddResponseMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useAddEvaluationHook = () => {
    const addEvaluation = useKRISSwaggerClient<void>()

    return (kris: string, uuid: string, type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS', newNoteUi: NewNoteUi) => {
        return addEvaluation({
            url: `/kris-to-be/kris/${kris}/${uuid}/${type}/evaluation`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: newNoteUi,
        })
    }
}

export const useAddEvaluationMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddEvaluationHook>>>,
        TError,
        { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NewNoteUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddEvaluationHook>>>,
    TError,
    { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NewNoteUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addEvaluation = useAddEvaluationHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddEvaluationHook>>>,
        { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NewNoteUi }
    > = (props) => {
        const { kris, uuid, type, data } = props ?? {}

        return addEvaluation(kris, uuid, type, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddEvaluationMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddEvaluationHook>>>>
export type AddEvaluationMutationBody = NewNoteUi
export type AddEvaluationMutationError = ApiError

export const useAddEvaluation = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddEvaluationHook>>>,
        TError,
        { kris: string; uuid: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: NewNoteUi },
        TContext
    >
}) => {
    const mutationOptions = useAddEvaluationMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportNoteResponseHook = () => {
    const exportNoteResponse = useKRISSwaggerClient<ExportNoteResponse>()

    return (kris: string, type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS', exportFilter: ExportFilter, params: ExportNoteResponseParams) => {
        return exportNoteResponse({
            url: `/kris-to-be/kris/${kris}/${type}/export`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilter,
            params,
        })
    }
}

export const useExportNoteResponseMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportNoteResponseHook>>>,
        TError,
        { kris: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: ExportFilter; params: ExportNoteResponseParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportNoteResponseHook>>>,
    TError,
    { kris: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: ExportFilter; params: ExportNoteResponseParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportNoteResponse = useExportNoteResponseHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportNoteResponseHook>>>,
        { kris: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: ExportFilter; params: ExportNoteResponseParams }
    > = (props) => {
        const { kris, type, data, params } = props ?? {}

        return exportNoteResponse(kris, type, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportNoteResponseMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportNoteResponseHook>>>>
export type ExportNoteResponseMutationBody = ExportFilter
export type ExportNoteResponseMutationError = ApiError

export const useExportNoteResponse = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportNoteResponseHook>>>,
        TError,
        { kris: string; type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS'; data: ExportFilter; params: ExportNoteResponseParams },
        TContext
    >
}) => {
    const mutationOptions = useExportNoteResponseMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useStoreRequestHook = () => {
    const storeRequest = useKRISSwaggerClient<RequestIdUi>()

    return (graphRequestUi: GraphRequestUi) => {
        return storeRequest({ url: `/kris-to-be/kris/store`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: graphRequestUi })
    }
}

export const useStoreRequestMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreRequestHook>>>, TError, { data: GraphRequestUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreRequestHook>>>, TError, { data: GraphRequestUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeRequest = useStoreRequestHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useStoreRequestHook>>>, { data: GraphRequestUi }> = (props) => {
        const { data } = props ?? {}

        return storeRequest(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreRequestMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreRequestHook>>>>
export type StoreRequestMutationBody = GraphRequestUi
export type StoreRequestMutationError = ApiError

export const useStoreRequest = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useStoreRequestHook>>>, TError, { data: GraphRequestUi }, TContext>
}) => {
    const mutationOptions = useStoreRequestMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useRunKontrolaResultHook = () => {
    const runKontrolaResult = useKRISSwaggerClient<void>()

    return (params: RunKontrolaResultParams) => {
        return runKontrolaResult({ url: `/kontrola/run`, method: 'post', params })
    }
}

export const useRunKontrolaResultMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRunKontrolaResultHook>>>,
        TError,
        { params: RunKontrolaResultParams },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useRunKontrolaResultHook>>>, TError, { params: RunKontrolaResultParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const runKontrolaResult = useRunKontrolaResultHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useRunKontrolaResultHook>>>, { params: RunKontrolaResultParams }> = (
        props,
    ) => {
        const { params } = props ?? {}

        return runKontrolaResult(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RunKontrolaResultMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRunKontrolaResultHook>>>>

export type RunKontrolaResultMutationError = ApiError

export const useRunKontrolaResult = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRunKontrolaResultHook>>>,
        TError,
        { params: RunKontrolaResultParams },
        TContext
    >
}) => {
    const mutationOptions = useRunKontrolaResultMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isvsCezProjekty
 */
export const useIsvsCezProjektyHook = () => {
    const isvsCezProjekty = useKRISSwaggerClient<IsvsCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return isvsCezProjekty({ url: `/isvs-cez-projekty`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useIsvsCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsvsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsvsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const isvsCezProjekty = useIsvsCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsvsCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return isvsCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsvsCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsvsCezProjektyHook>>>>
export type IsvsCezProjektyMutationBody = KrisRequest
export type IsvsCezProjektyMutationError = ApiError

/**
 * @summary isvsCezProjekty
 */
export const useIsvsCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsvsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useIsvsCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @deprecated
 * @summary isvsCezPo
 */
export const useIsvsCezPoHook = () => {
    const isvsCezPo = useKRISSwaggerClient<IsvsCezPo200>()

    return (krisRequestNew: KrisRequestNew) => {
        return isvsCezPo({ url: `/isvs-cez-po`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequestNew })
    }
}

export const useIsvsCezPoMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsvsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsvsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const isvsCezPo = useIsvsCezPoHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsvsCezPoHook>>>, { data: KrisRequestNew }> = (props) => {
        const { data } = props ?? {}

        return isvsCezPo(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsvsCezPoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsvsCezPoHook>>>>
export type IsvsCezPoMutationBody = KrisRequestNew
export type IsvsCezPoMutationError = ApiError

/**
 * @deprecated
 * @summary isvsCezPo
 */
export const useIsvsCezPo = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsvsCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}) => {
    const mutationOptions = useIsvsCezPoMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInvalidateConfigurationItemBiznisMdulesHook = () => {
    const invalidateConfigurationItemBiznisMdules = useKRISSwaggerClient<RequestIdUi>()

    return (configurationItemInvalidateUi: ConfigurationItemInvalidateUi) => {
        return invalidateConfigurationItemBiznisMdules({
            url: `/invalidate/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemInvalidateUi,
        })
    }
}

export const useInvalidateConfigurationItemBiznisMdulesMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUi },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
    TError,
    { data: ConfigurationItemInvalidateUi },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateConfigurationItemBiznisMdules = useInvalidateConfigurationItemBiznisMdulesHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
        { data: ConfigurationItemInvalidateUi }
    > = (props) => {
        const { data } = props ?? {}

        return invalidateConfigurationItemBiznisMdules(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateConfigurationItemBiznisMdulesMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>
>
export type InvalidateConfigurationItemBiznisMdulesMutationBody = ConfigurationItemInvalidateUi
export type InvalidateConfigurationItemBiznisMdulesMutationError = ApiError

export const useInvalidateConfigurationItemBiznisMdules = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUi },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateConfigurationItemBiznisMdulesMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary bazyDatCezProjekty
 */
export const useBazyDatCezProjektyHook = () => {
    const bazyDatCezProjekty = useKRISSwaggerClient<BazyDatCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return bazyDatCezProjekty({
            url: `/bazy-dat-cez-projekty`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: krisRequest,
        })
    }
}

export const useBazyDatCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBazyDatCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBazyDatCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const bazyDatCezProjekty = useBazyDatCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBazyDatCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return bazyDatCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BazyDatCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBazyDatCezProjektyHook>>>>
export type BazyDatCezProjektyMutationBody = KrisRequest
export type BazyDatCezProjektyMutationError = ApiError

/**
 * @summary bazyDatCezProjekty
 */
export const useBazyDatCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBazyDatCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useBazyDatCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary bazyDatCezIsvs
 */
export const useBazyDatCezIsvsHook = () => {
    const bazyDatCezIsvs = useKRISSwaggerClient<BazyDatCezIsvs200>()

    return (krisRequest: KrisRequest) => {
        return bazyDatCezIsvs({ url: `/bazy-dat-cez-isvs`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useBazyDatCezIsvsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBazyDatCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBazyDatCezIsvsHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const bazyDatCezIsvs = useBazyDatCezIsvsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBazyDatCezIsvsHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return bazyDatCezIsvs(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BazyDatCezIsvsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBazyDatCezIsvsHook>>>>
export type BazyDatCezIsvsMutationBody = KrisRequest
export type BazyDatCezIsvsMutationError = ApiError

/**
 * @summary bazyDatCezIsvs
 */
export const useBazyDatCezIsvs = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBazyDatCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useBazyDatCezIsvsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary asCezProjekty
 */
export const useAsCezProjektyHook = () => {
    const asCezProjekty = useKRISSwaggerClient<AsCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return asCezProjekty({ url: `/as-cez-projekty`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useAsCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const asCezProjekty = useAsCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAsCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return asCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AsCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAsCezProjektyHook>>>>
export type AsCezProjektyMutationBody = KrisRequest
export type AsCezProjektyMutationError = ApiError

/**
 * @summary asCezProjekty
 */
export const useAsCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAsCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useAsCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary asCezIsvs
 */
export const useAplikacneSluzbyCezIsvsHook = () => {
    const aplikacneSluzbyCezIsvs = useKRISSwaggerClient<AplikacneSluzbyCezIsvs200>()

    return (krisRequest: KrisRequest) => {
        return aplikacneSluzbyCezIsvs({ url: `/as-cez-isvs`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useAplikacneSluzbyCezIsvsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAplikacneSluzbyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAplikacneSluzbyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const aplikacneSluzbyCezIsvs = useAplikacneSluzbyCezIsvsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAplikacneSluzbyCezIsvsHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return aplikacneSluzbyCezIsvs(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AplikacneSluzbyCezIsvsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAplikacneSluzbyCezIsvsHook>>>>
export type AplikacneSluzbyCezIsvsMutationBody = KrisRequest
export type AplikacneSluzbyCezIsvsMutationError = ApiError

/**
 * @summary asCezIsvs
 */
export const useAplikacneSluzbyCezIsvs = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAplikacneSluzbyCezIsvsHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useAplikacneSluzbyCezIsvsMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary agendyCezProjekty
 */
export const useAgendyCezProjektyHook = () => {
    const agendyCezProjekty = useKRISSwaggerClient<AgendyCezProjekty200>()

    return (krisRequest: KrisRequest) => {
        return agendyCezProjekty({ url: `/agendy-cez-projekty`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequest })
    }
}

export const useAgendyCezProjektyMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgendyCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgendyCezProjektyHook>>>, TError, { data: KrisRequest }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const agendyCezProjekty = useAgendyCezProjektyHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgendyCezProjektyHook>>>, { data: KrisRequest }> = (props) => {
        const { data } = props ?? {}

        return agendyCezProjekty(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AgendyCezProjektyMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgendyCezProjektyHook>>>>
export type AgendyCezProjektyMutationBody = KrisRequest
export type AgendyCezProjektyMutationError = ApiError

/**
 * @summary agendyCezProjekty
 */
export const useAgendyCezProjekty = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgendyCezProjektyHook>>>, TError, { data: KrisRequest }, TContext>
}) => {
    const mutationOptions = useAgendyCezProjektyMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary agendaCezPo
 */
export const useAgendaCezPoHook = () => {
    const agendaCezPo = useKRISSwaggerClient<AgendaCezPo200>()

    return (krisRequestNew: KrisRequestNew) => {
        return agendaCezPo({ url: `/agenda-cez-po`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: krisRequestNew })
    }
}

export const useAgendaCezPoMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgendaCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgendaCezPoHook>>>, TError, { data: KrisRequestNew }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const agendaCezPo = useAgendaCezPoHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useAgendaCezPoHook>>>, { data: KrisRequestNew }> = (props) => {
        const { data } = props ?? {}

        return agendaCezPo(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AgendaCezPoMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAgendaCezPoHook>>>>
export type AgendaCezPoMutationBody = KrisRequestNew
export type AgendaCezPoMutationError = ApiError

/**
 * @summary agendaCezPo
 */
export const useAgendaCezPo = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useAgendaCezPoHook>>>, TError, { data: KrisRequestNew }, TContext>
}) => {
    const mutationOptions = useAgendaCezPoMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCheckOperationPermissionByMetaisCodeHook = () => {
    const checkOperationPermissionByMetaisCode = useKRISSwaggerClient<ApiPermissionResult>()

    return (suMetaisCode: string, params: CheckOperationPermissionByMetaisCodeParams, signal?: AbortSignal) => {
        return checkOperationPermissionByMetaisCode({ url: `/su/metaiscode/${suMetaisCode}/permissions`, method: 'get', params, signal })
    }
}

export const getCheckOperationPermissionByMetaisCodeQueryKey = (suMetaisCode: string, params: CheckOperationPermissionByMetaisCodeParams) =>
    [`/su/metaiscode/${suMetaisCode}/permissions`, ...(params ? [params] : [])] as const

export const useCheckOperationPermissionByMetaisCodeQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>,
    TError = ApiError,
>(
    suMetaisCode: string,
    params: CheckOperationPermissionByMetaisCodeParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getCheckOperationPermissionByMetaisCodeQueryKey(suMetaisCode, params)

    const checkOperationPermissionByMetaisCode = useCheckOperationPermissionByMetaisCodeHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>> = ({ signal }) =>
        checkOperationPermissionByMetaisCode(suMetaisCode, params, signal)

    return { queryKey, queryFn, enabled: !!suMetaisCode, ...queryOptions }
}

export type CheckOperationPermissionByMetaisCodeQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>
>
export type CheckOperationPermissionByMetaisCodeQueryError = ApiError

export const useCheckOperationPermissionByMetaisCode = <
    TData = Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>,
    TError = ApiError,
>(
    suMetaisCode: string,
    params: CheckOperationPermissionByMetaisCodeParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useCheckOperationPermissionByMetaisCodeQueryOptions(suMetaisCode, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const usePermissionsHook = () => {
    const permissions = useKRISSwaggerClient<Permissions200>()

    return (metaKod: string, params: PermissionsParams, signal?: AbortSignal) => {
        return permissions({ url: `/project/${metaKod}/permissions`, method: 'get', params, signal })
    }
}

export const getPermissionsQueryKey = (metaKod: string, params: PermissionsParams) =>
    [`/project/${metaKod}/permissions`, ...(params ? [params] : [])] as const

export const usePermissionsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>, TError = ApiError>(
    metaKod: string,
    params: PermissionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getPermissionsQueryKey(metaKod, params)

    const permissions = usePermissionsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>> = ({ signal }) => permissions(metaKod, params, signal)

    return { queryKey, queryFn, enabled: !!metaKod, ...queryOptions }
}

export type PermissionsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>>
export type PermissionsQueryError = ApiError

export const usePermissions = <TData = Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>, TError = ApiError>(
    metaKod: string,
    params: PermissionsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof usePermissionsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = usePermissionsQueryOptions(metaKod, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useSetStatesHook = () => {
    const setStates = useKRISSwaggerClient<SetStates200>()

    return (params: SetStatesParams, signal?: AbortSignal) => {
        return setStates({ url: `/project/states`, method: 'get', params, signal })
    }
}

export const getSetStatesQueryKey = (params: SetStatesParams) => [`/project/states`, ...(params ? [params] : [])] as const

export const useSetStatesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>, TError = ApiError>(
    params: SetStatesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSetStatesQueryKey(params)

    const setStates = useSetStatesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>> = ({ signal }) => setStates(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type SetStatesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>>
export type SetStatesQueryError = ApiError

export const useSetStates = <TData = Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>, TError = ApiError>(
    params: SetStatesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSetStatesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useSetStatesQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useRequiredDocsHook = () => {
    const requiredDocs = useKRISSwaggerClient<RequiredDocs200Item[]>()

    return (signal?: AbortSignal) => {
        return requiredDocs({ url: `/project/requireddoc`, method: 'get', signal })
    }
}

export const getRequiredDocsQueryKey = () => [`/project/requireddoc`] as const

export const useRequiredDocsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getRequiredDocsQueryKey()

    const requiredDocs = useRequiredDocsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>> = ({ signal }) => requiredDocs(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type RequiredDocsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>>
export type RequiredDocsQueryError = ApiError

export const useRequiredDocs = <TData = Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useRequiredDocsHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useRequiredDocsQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetAllProgramsHook = () => {
    const getAllPrograms = useKRISSwaggerClient<ApiProgram[]>()

    return (signal?: AbortSignal) => {
        return getAllPrograms({ url: `/project/programs`, method: 'get', signal })
    }
}

export const getGetAllProgramsQueryKey = () => [`/project/programs`] as const

export const useGetAllProgramsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAllProgramsQueryKey()

    const getAllPrograms = useGetAllProgramsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>> = ({ signal }) => getAllPrograms(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetAllProgramsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>>
export type GetAllProgramsQueryError = ApiError

export const useGetAllPrograms = <TData = Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllProgramsHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetAllProgramsQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetProgramPartFinanceHook = () => {
    const getProgramPartFinance = useKRISSwaggerClient<ApiProgramPartFinance>()

    return (programUuid: string, params: GetProgramPartFinanceParams, signal?: AbortSignal) => {
        return getProgramPartFinance({ url: `/project/programPartFinance/${programUuid}`, method: 'get', params, signal })
    }
}

export const getGetProgramPartFinanceQueryKey = (programUuid: string, params: GetProgramPartFinanceParams) =>
    [`/project/programPartFinance/${programUuid}`, ...(params ? [params] : [])] as const

export const useGetProgramPartFinanceQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>, TError = ApiError>(
    programUuid: string,
    params: GetProgramPartFinanceParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetProgramPartFinanceQueryKey(programUuid, params)

    const getProgramPartFinance = useGetProgramPartFinanceHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>> = ({ signal }) =>
        getProgramPartFinance(programUuid, params, signal)

    return { queryKey, queryFn, enabled: !!programUuid, ...queryOptions }
}

export type GetProgramPartFinanceQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>>
export type GetProgramPartFinanceQueryError = ApiError

export const useGetProgramPartFinance = <TData = Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>, TError = ApiError>(
    programUuid: string,
    params: GetProgramPartFinanceParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProgramPartFinanceHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetProgramPartFinanceQueryOptions(programUuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetProgramWithPartsHook = () => {
    const getProgramWithParts = useKRISSwaggerClient<ApiProgram>()

    return (params: GetProgramWithPartsParams, signal?: AbortSignal) => {
        return getProgramWithParts({ url: `/project/program/`, method: 'get', params, signal })
    }
}

export const getGetProgramWithPartsQueryKey = (params: GetProgramWithPartsParams) => [`/project/program/`, ...(params ? [params] : [])] as const

export const useGetProgramWithPartsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>, TError = ApiError>(
    params: GetProgramWithPartsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetProgramWithPartsQueryKey(params)

    const getProgramWithParts = useGetProgramWithPartsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>> = ({ signal }) =>
        getProgramWithParts(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetProgramWithPartsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>>
export type GetProgramWithPartsQueryError = ApiError

export const useGetProgramWithParts = <TData = Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>, TError = ApiError>(
    params: GetProgramWithPartsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetProgramWithPartsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetProgramWithPartsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetPhaseMapHook = () => {
    const getPhaseMap = useKRISSwaggerClient<GetPhaseMap200>()

    return (signal?: AbortSignal) => {
        return getPhaseMap({ url: `/project/phaseMap`, method: 'get', signal })
    }
}

export const getGetPhaseMapQueryKey = () => [`/project/phaseMap`] as const

export const useGetPhaseMapQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPhaseMapQueryKey()

    const getPhaseMap = useGetPhaseMapHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>> = ({ signal }) => getPhaseMap(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPhaseMapQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>>
export type GetPhaseMapQueryError = ApiError

export const useGetPhaseMap = <TData = Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPhaseMapHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPhaseMapQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useNextStatesHook = () => {
    const nextStates = useKRISSwaggerClient<string[]>()

    return (state: string, signal?: AbortSignal) => {
        return nextStates({ url: `/project/nextStates/${state}`, method: 'get', signal })
    }
}

export const getNextStatesQueryKey = (state: string) => [`/project/nextStates/${state}`] as const

export const useNextStatesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>, TError = ApiError>(
    state: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getNextStatesQueryKey(state)

    const nextStates = useNextStatesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>> = ({ signal }) => nextStates(state, signal)

    return { queryKey, queryFn, enabled: !!state, ...queryOptions }
}

export type NextStatesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>>
export type NextStatesQueryError = ApiError

export const useNextStates = <TData = Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>, TError = ApiError>(
    state: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useNextStatesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useNextStatesQueryOptions(state, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetDocumentHook = () => {
    const getDocument = useKRISSwaggerClient<Document>()

    return (id: number, signal?: AbortSignal) => {
        return getDocument({ url: `/project/documents/${id}`, method: 'get', signal })
    }
}

export const getGetDocumentQueryKey = (id: number) => [`/project/documents/${id}`] as const

export const useGetDocumentQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError = ApiError>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDocumentQueryKey(id)

    const getDocument = useGetDocumentHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>> = ({ signal }) => getDocument(id, signal)

    return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetDocumentQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>>
export type GetDocumentQueryError = ApiError

export const useGetDocument = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError = ApiError>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDocumentQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useDeleteDocumentHook = () => {
    const deleteDocument = useKRISSwaggerClient<boolean>()

    return (id: number) => {
        return deleteDocument({ url: `/project/documents/${id}`, method: 'delete' })
    }
}

export const useDeleteDocumentMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentHook>>>, TError, { id: number }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentHook>>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteDocument = useDeleteDocumentHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentHook>>>, { id: number }> = (props) => {
        const { id } = props ?? {}

        return deleteDocument(id)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteDocumentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentHook>>>>

export type DeleteDocumentMutationError = ApiError

export const useDeleteDocument = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentHook>>>, TError, { id: number }, TContext>
}) => {
    const mutationOptions = useDeleteDocumentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetDocumentGroupByIdHook = () => {
    const getDocumentGroupById = useKRISSwaggerClient<DocumentGroup>()

    return (id: number, signal?: AbortSignal) => {
        return getDocumentGroupById({ url: `/project/documents/groups/${id}`, method: 'get', signal })
    }
}

export const getGetDocumentGroupByIdQueryKey = (id: number) => [`/project/documents/groups/${id}`] as const

export const useGetDocumentGroupByIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>, TError = ApiError>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDocumentGroupByIdQueryKey(id)

    const getDocumentGroupById = useGetDocumentGroupByIdHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>> = ({ signal }) =>
        getDocumentGroupById(id, signal)

    return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetDocumentGroupByIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>>
export type GetDocumentGroupByIdQueryError = ApiError

export const useGetDocumentGroupById = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>, TError = ApiError>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupByIdHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDocumentGroupByIdQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useDeleteDocumentGroupHook = () => {
    const deleteDocumentGroup = useKRISSwaggerClient<boolean>()

    return (id: number) => {
        return deleteDocumentGroup({ url: `/project/documents/groups/${id}`, method: 'delete' })
    }
}

export const useDeleteDocumentGroupMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentGroupHook>>>, TError, { id: number }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentGroupHook>>>, TError, { id: number }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteDocumentGroup = useDeleteDocumentGroupHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentGroupHook>>>, { id: number }> = (props) => {
        const { id } = props ?? {}

        return deleteDocumentGroup(id)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteDocumentGroupMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentGroupHook>>>>

export type DeleteDocumentGroupMutationError = ApiError

export const useDeleteDocumentGroup = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteDocumentGroupHook>>>, TError, { id: number }, TContext>
}) => {
    const mutationOptions = useDeleteDocumentGroupMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetDocumentGroupsHook = () => {
    const getDocumentGroups = useKRISSwaggerClient<DocumentGroup[]>()

    return (state: string, signal?: AbortSignal) => {
        return getDocumentGroups({ url: `/project/documents/groups/state/${state}`, method: 'get', signal })
    }
}

export const getGetDocumentGroupsQueryKey = (state: string) => [`/project/documents/groups/state/${state}`] as const

export const useGetDocumentGroupsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>, TError = ApiError>(
    state: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDocumentGroupsQueryKey(state)

    const getDocumentGroups = useGetDocumentGroupsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>> = ({ signal }) => getDocumentGroups(state, signal)

    return { queryKey, queryFn, enabled: !!state, ...queryOptions }
}

export type GetDocumentGroupsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>>
export type GetDocumentGroupsQueryError = ApiError

export const useGetDocumentGroups = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>, TError = ApiError>(
    state: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentGroupsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDocumentGroupsQueryOptions(state, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetDocumentsHook = () => {
    const getDocuments = useKRISSwaggerClient<Document[]>()

    return (groupId: number, signal?: AbortSignal) => {
        return getDocuments({ url: `/project/documents/allByGroup/${groupId}`, method: 'get', signal })
    }
}

export const getGetDocumentsQueryKey = (groupId: number) => [`/project/documents/allByGroup/${groupId}`] as const

export const useGetDocumentsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>, TError = ApiError>(
    groupId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDocumentsQueryKey(groupId)

    const getDocuments = useGetDocumentsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>> = ({ signal }) => getDocuments(groupId, signal)

    return { queryKey, queryFn, enabled: !!groupId, ...queryOptions }
}

export type GetDocumentsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>>
export type GetDocumentsQueryError = ApiError

export const useGetDocuments = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>, TError = ApiError>(
    groupId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDocumentsQueryOptions(groupId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetAllApprovalProcessHook = () => {
    const getAllApprovalProcess = useKRISSwaggerClient<ApiApprovalProcess[]>()

    return (signal?: AbortSignal) => {
        return getAllApprovalProcess({ url: `/project/approvalProcesses`, method: 'get', signal })
    }
}

export const getGetAllApprovalProcessQueryKey = () => [`/project/approvalProcesses`] as const

export const useGetAllApprovalProcessQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>,
    TError = ApiError,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAllApprovalProcessQueryKey()

    const getAllApprovalProcess = useGetAllApprovalProcessHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>> = ({ signal }) => getAllApprovalProcess(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetAllApprovalProcessQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>>
export type GetAllApprovalProcessQueryError = ApiError

export const useGetAllApprovalProcess = <TData = Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>, TError = ApiError>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAllApprovalProcessHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetAllApprovalProcessQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetRightsHook = () => {
    const getRights = useKRISSwaggerClient<KrisToBeRights>()

    return (uuid: string, signal?: AbortSignal) => {
        return getRights({ url: `/kris-to-be/rights/${uuid}`, method: 'get', signal })
    }
}

export const getGetRightsQueryKey = (uuid: string) => [`/kris-to-be/rights/${uuid}`] as const

export const useGetRightsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRightsQueryKey(uuid)

    const getRights = useGetRightsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>> = ({ signal }) => getRights(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetRightsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>>
export type GetRightsQueryError = ApiError

export const useGetRights = <TData = Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRightsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRightsQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetKsHook = () => {
    const getKs = useKRISSwaggerClient<PageKrisToBeKs>()

    return (uuid: string, params: GetKsParams, signal?: AbortSignal) => {
        return getKs({ url: `/kris-to-be/ks/${uuid}`, method: 'get', params, signal })
    }
}

export const getGetKsQueryKey = (uuid: string, params: GetKsParams) => [`/kris-to-be/ks/${uuid}`, ...(params ? [params] : [])] as const

export const useGetKsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>, TError = ApiError>(
    uuid: string,
    params: GetKsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetKsQueryKey(uuid, params)

    const getKs = useGetKsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>> = ({ signal }) => getKs(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetKsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>>
export type GetKsQueryError = ApiError

export const useGetKs = <TData = Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>, TError = ApiError>(
    uuid: string,
    params: GetKsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetKsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetKrisHook = () => {
    const getKris = useKRISSwaggerClient<KrisUi>()

    return (uuid: string, signal?: AbortSignal) => {
        return getKris({ url: `/kris-to-be/kris/${uuid}`, method: 'get', signal })
    }
}

export const getGetKrisQueryKey = (uuid: string) => [`/kris-to-be/kris/${uuid}`] as const

export const useGetKrisQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetKrisQueryKey(uuid)

    const getKris = useGetKrisHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>> = ({ signal }) => getKris(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetKrisQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>>
export type GetKrisQueryError = ApiError

export const useGetKris = <TData = Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKrisHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetKrisQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetVersionsHook = () => {
    const getVersions = useKRISSwaggerClient<NoteVersionUi[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return getVersions({ url: `/kris-to-be/kris/${uuid}/versions`, method: 'get', signal })
    }
}

export const getGetVersionsQueryKey = (uuid: string) => [`/kris-to-be/kris/${uuid}/versions`] as const

export const useGetVersionsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetVersionsQueryKey(uuid)

    const getVersions = useGetVersionsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>> = ({ signal }) => getVersions(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetVersionsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>>
export type GetVersionsQueryError = ApiError

export const useGetVersions = <TData = Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>, TError = ApiError>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetVersionsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetVersionsQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetEvaluationsHook = () => {
    const getEvaluations = useKRISSwaggerClient<NoteItemUi>()

    return (kris: string, uuid: string, type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS', signal?: AbortSignal) => {
        return getEvaluations({ url: `/kris-to-be/kris/${kris}/${uuid}/${type}/notes`, method: 'get', signal })
    }
}

export const getGetEvaluationsQueryKey = (kris: string, uuid: string, type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS') =>
    [`/kris-to-be/kris/${kris}/${uuid}/${type}/notes`] as const

export const useGetEvaluationsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>, TError = ApiError>(
    kris: string,
    uuid: string,
    type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS',
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetEvaluationsQueryKey(kris, uuid, type)

    const getEvaluations = useGetEvaluationsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>> = ({ signal }) =>
        getEvaluations(kris, uuid, type, signal)

    return { queryKey, queryFn, enabled: !!(kris && uuid && type), ...queryOptions }
}

export type GetEvaluationsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>>
export type GetEvaluationsQueryError = ApiError

export const useGetEvaluations = <TData = Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>, TError = ApiError>(
    kris: string,
    uuid: string,
    type: 'COMMON' | 'GOALS' | 'KRIS' | 'KS' | 'ISVS',
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEvaluationsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetEvaluationsQueryOptions(kris, uuid, type, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetIsvsHook = () => {
    const getIsvs = useKRISSwaggerClient<PageKrisToBeIsvs>()

    return (uuid: string, params: GetIsvsParams, signal?: AbortSignal) => {
        return getIsvs({ url: `/kris-to-be/isvs/${uuid}`, method: 'get', params, signal })
    }
}

export const getGetIsvsQueryKey = (uuid: string, params: GetIsvsParams) => [`/kris-to-be/isvs/${uuid}`, ...(params ? [params] : [])] as const

export const useGetIsvsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>, TError = ApiError>(
    uuid: string,
    params: GetIsvsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetIsvsQueryKey(uuid, params)

    const getIsvs = useGetIsvsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>> = ({ signal }) => getIsvs(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetIsvsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>>
export type GetIsvsQueryError = ApiError

export const useGetIsvs = <TData = Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>, TError = ApiError>(
    uuid: string,
    params: GetIsvsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIsvsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetIsvsQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useFindKontrolaResultDetailHook = () => {
    const findKontrolaResultDetail = useKRISSwaggerClient<ApiKontrolaResultDetailList>()

    return (params: FindKontrolaResultDetailParams, signal?: AbortSignal) => {
        return findKontrolaResultDetail({ url: `/kontrola/resultDetail/find`, method: 'get', params, signal })
    }
}

export const getFindKontrolaResultDetailQueryKey = (params: FindKontrolaResultDetailParams) =>
    [`/kontrola/resultDetail/find`, ...(params ? [params] : [])] as const

export const useFindKontrolaResultDetailQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>,
    TError = ApiError,
>(
    params: FindKontrolaResultDetailParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindKontrolaResultDetailQueryKey(params)

    const findKontrolaResultDetail = useFindKontrolaResultDetailHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>> = ({ signal }) =>
        findKontrolaResultDetail(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindKontrolaResultDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>>
export type FindKontrolaResultDetailQueryError = ApiError

export const useFindKontrolaResultDetail = <TData = Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>, TError = ApiError>(
    params: FindKontrolaResultDetailParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultDetailHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindKontrolaResultDetailQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useFindKontrolaResultHook = () => {
    const findKontrolaResult = useKRISSwaggerClient<ApiKontrolaResultList>()

    return (params: FindKontrolaResultParams, signal?: AbortSignal) => {
        return findKontrolaResult({ url: `/kontrola/result/find`, method: 'get', params, signal })
    }
}

export const getFindKontrolaResultQueryKey = (params: FindKontrolaResultParams) => [`/kontrola/result/find`, ...(params ? [params] : [])] as const

export const useFindKontrolaResultQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>, TError = ApiError>(
    params: FindKontrolaResultParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindKontrolaResultQueryKey(params)

    const findKontrolaResult = useFindKontrolaResultHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>> = ({ signal }) =>
        findKontrolaResult(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindKontrolaResultQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>>
export type FindKontrolaResultQueryError = ApiError

export const useFindKontrolaResult = <TData = Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>, TError = ApiError>(
    params: FindKontrolaResultParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaResultHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindKontrolaResultQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useFindInvalidEntitiesHook = () => {
    const findInvalidEntities = useKRISSwaggerClient<string[]>()

    return (params: FindInvalidEntitiesParams, signal?: AbortSignal) => {
        return findInvalidEntities({ url: `/kontrola/invalidEntities/find`, method: 'get', params, signal })
    }
}

export const getFindInvalidEntitiesQueryKey = (params: FindInvalidEntitiesParams) =>
    [`/kontrola/invalidEntities/find`, ...(params ? [params] : [])] as const

export const useFindInvalidEntitiesQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>, TError = ApiError>(
    params: FindInvalidEntitiesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindInvalidEntitiesQueryKey(params)

    const findInvalidEntities = useFindInvalidEntitiesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>> = ({ signal }) =>
        findInvalidEntities(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindInvalidEntitiesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>>
export type FindInvalidEntitiesQueryError = ApiError

export const useFindInvalidEntities = <TData = Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>, TError = ApiError>(
    params: FindInvalidEntitiesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindInvalidEntitiesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindInvalidEntitiesQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useFindKontrolaHook = () => {
    const findKontrola = useKRISSwaggerClient<ApiKontrolaList>()

    return (params: FindKontrolaParams, signal?: AbortSignal) => {
        return findKontrola({ url: `/kontrola/find`, method: 'get', params, signal })
    }
}

export const getFindKontrolaQueryKey = (params: FindKontrolaParams) => [`/kontrola/find`, ...(params ? [params] : [])] as const

export const useFindKontrolaQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>, TError = ApiError>(
    params: FindKontrolaParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindKontrolaQueryKey(params)

    const findKontrola = useFindKontrolaHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>> = ({ signal }) => findKontrola(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindKontrolaQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>>
export type FindKontrolaQueryError = ApiError

export const useFindKontrola = <TData = Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>, TError = ApiError>(
    params: FindKontrolaParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindKontrolaHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindKontrolaQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

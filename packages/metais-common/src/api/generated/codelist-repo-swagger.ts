//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Codelist Repo
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import type { MutationFunction, QueryFunction, QueryKey, UseMutationOptions, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { useCodeListRepoSwaggerClient } from '../hooks/useCodeListRepoSwaggerClient'
export type ExistTemporalCodelistItem200 = { [key: string]: any }

export type UnlockTemporalCodelistItem200 = { [key: string]: any }

export type GetCodelistRequestItemsParams = {
    language: string
    pageNumber: number
    perPage: number
    sortBy?: string
    toDate?: string
    ascending?: boolean
}

export type DownloadInternalCodelistParams = {
    type?: string
}

export type DownloadExternalCodelist200 = { [key: string]: any }

export type DownloadInternalCodelistRequestParams = {
    type?: string
}

export type GetCodelistHistoryParams = {
    pageNumber?: number
    perPage?: number
    sortBy?: string
    ascending?: boolean
    action?: string[]
    lastModifiedBy?: string[]
    fromDate?: string
    toDate?: string
}

export type ExistTemporalCodelistHeader200 = { [key: string]: any }

export type GetUnlockTemporalCodelistHeader200 = { [key: string]: any }

export type GetCodelistHeadersParams = {
    language: string
    pageNumber: number
    perPage: number
    sortBy?: string
    ascending?: boolean
    isBase?: boolean
    isTemporal?: boolean
    toDate?: string
    wfState?: string
    uvs?: string
    avs?: string
    mainGestorPoUuid?: string
    mainGestorGid?: string
    code?: string
    nameFilter?: string
    name?: string
}

export type GetCodelistRequestDetailStateISVSProcessingParams = {
    code: string
}

export type GetFirstNotUsedCode200 = { [key: string]: string }

export type GetCodeListByRefIdParams = {
    refID: string
}

export type UploadCodeListPreviewBody = {
    file: Blob
}

export type UploadCodeListPreviewParams = {
    code: string
}

export type UploadCodeListRequestPreviewBody = {
    file: Blob
}

export type UploadCodeListRequestPreviewParams = {
    code: string
}

export type UploadInternalCodelist200 = { [key: string]: { [key: string]: any } }

export type UploadInternalCodelistBody = {
    file: Blob
}

export type UploadInternalCodelistRequest200 = { [key: string]: any }

export type UploadInternalCodelistRequestBody = {
    file: Blob
}

export type VerifyInternalCodelistBody = {
    file: Blob
}

export type VerifyInternalCodelistRequestBody = {
    file: Blob
}

export type CreateNewCodelistItemLangExtended200 = { [key: string]: any }

export type CreateCodelistItem200 = { [key: string]: any }

export type GetCodelistItemsParams = {
    language: string
    pageNumber: number
    perPage: number
    sortBy?: string
    state?: string
    effective?: boolean
    toDate?: string
    ascending?: boolean
}

export type CreateCodelistRequest200 = { [key: string]: any }

export type GetCodelistRequestsParams = {
    language: string
    pageNumber: number
    perPage: number
    sortBy?: string
    ascending?: boolean
    isBase?: boolean
    wfState?: string
    uvs?: string
    avs?: string
    mainGestorGid?: string
    code?: string
    nameFilter?: string
    name?: string
}

export type SaveAndSendCodelist200 = { [key: string]: any }

export type ExistsCodelist200 = (typeof ExistsCodelist200)[keyof typeof ExistsCodelist200]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExistsCodelist200 = {
    '100_CONTINUE': '100 CONTINUE',
    '101_SWITCHING_PROTOCOLS': '101 SWITCHING_PROTOCOLS',
    '102_PROCESSING': '102 PROCESSING',
    '103_EARLY_HINTS': '103 EARLY_HINTS',
    '103_CHECKPOINT': '103 CHECKPOINT',
    '200_OK': '200 OK',
    '201_CREATED': '201 CREATED',
    '202_ACCEPTED': '202 ACCEPTED',
    '203_NON_AUTHORITATIVE_INFORMATION': '203 NON_AUTHORITATIVE_INFORMATION',
    '204_NO_CONTENT': '204 NO_CONTENT',
    '205_RESET_CONTENT': '205 RESET_CONTENT',
    '206_PARTIAL_CONTENT': '206 PARTIAL_CONTENT',
    '207_MULTI_STATUS': '207 MULTI_STATUS',
    '208_ALREADY_REPORTED': '208 ALREADY_REPORTED',
    '226_IM_USED': '226 IM_USED',
    '300_MULTIPLE_CHOICES': '300 MULTIPLE_CHOICES',
    '301_MOVED_PERMANENTLY': '301 MOVED_PERMANENTLY',
    '302_FOUND': '302 FOUND',
    '302_MOVED_TEMPORARILY': '302 MOVED_TEMPORARILY',
    '303_SEE_OTHER': '303 SEE_OTHER',
    '304_NOT_MODIFIED': '304 NOT_MODIFIED',
    '305_USE_PROXY': '305 USE_PROXY',
    '307_TEMPORARY_REDIRECT': '307 TEMPORARY_REDIRECT',
    '308_PERMANENT_REDIRECT': '308 PERMANENT_REDIRECT',
    '400_BAD_REQUEST': '400 BAD_REQUEST',
    '401_UNAUTHORIZED': '401 UNAUTHORIZED',
    '402_PAYMENT_REQUIRED': '402 PAYMENT_REQUIRED',
    '403_FORBIDDEN': '403 FORBIDDEN',
    '404_NOT_FOUND': '404 NOT_FOUND',
    '405_METHOD_NOT_ALLOWED': '405 METHOD_NOT_ALLOWED',
    '406_NOT_ACCEPTABLE': '406 NOT_ACCEPTABLE',
    '407_PROXY_AUTHENTICATION_REQUIRED': '407 PROXY_AUTHENTICATION_REQUIRED',
    '408_REQUEST_TIMEOUT': '408 REQUEST_TIMEOUT',
    '409_CONFLICT': '409 CONFLICT',
    '410_GONE': '410 GONE',
    '411_LENGTH_REQUIRED': '411 LENGTH_REQUIRED',
    '412_PRECONDITION_FAILED': '412 PRECONDITION_FAILED',
    '413_PAYLOAD_TOO_LARGE': '413 PAYLOAD_TOO_LARGE',
    '413_REQUEST_ENTITY_TOO_LARGE': '413 REQUEST_ENTITY_TOO_LARGE',
    '414_URI_TOO_LONG': '414 URI_TOO_LONG',
    '414_REQUEST_URI_TOO_LONG': '414 REQUEST_URI_TOO_LONG',
    '415_UNSUPPORTED_MEDIA_TYPE': '415 UNSUPPORTED_MEDIA_TYPE',
    '416_REQUESTED_RANGE_NOT_SATISFIABLE': '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    '417_EXPECTATION_FAILED': '417 EXPECTATION_FAILED',
    '418_I_AM_A_TEAPOT': '418 I_AM_A_TEAPOT',
    '419_INSUFFICIENT_SPACE_ON_RESOURCE': '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    '420_METHOD_FAILURE': '420 METHOD_FAILURE',
    '421_DESTINATION_LOCKED': '421 DESTINATION_LOCKED',
    '422_UNPROCESSABLE_ENTITY': '422 UNPROCESSABLE_ENTITY',
    '423_LOCKED': '423 LOCKED',
    '424_FAILED_DEPENDENCY': '424 FAILED_DEPENDENCY',
    '425_TOO_EARLY': '425 TOO_EARLY',
    '426_UPGRADE_REQUIRED': '426 UPGRADE_REQUIRED',
    '428_PRECONDITION_REQUIRED': '428 PRECONDITION_REQUIRED',
    '429_TOO_MANY_REQUESTS': '429 TOO_MANY_REQUESTS',
    '431_REQUEST_HEADER_FIELDS_TOO_LARGE': '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    '451_UNAVAILABLE_FOR_LEGAL_REASONS': '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    '500_INTERNAL_SERVER_ERROR': '500 INTERNAL_SERVER_ERROR',
    '501_NOT_IMPLEMENTED': '501 NOT_IMPLEMENTED',
    '502_BAD_GATEWAY': '502 BAD_GATEWAY',
    '503_SERVICE_UNAVAILABLE': '503 SERVICE_UNAVAILABLE',
    '504_GATEWAY_TIMEOUT': '504 GATEWAY_TIMEOUT',
    '505_HTTP_VERSION_NOT_SUPPORTED': '505 HTTP_VERSION_NOT_SUPPORTED',
    '506_VARIANT_ALSO_NEGOTIATES': '506 VARIANT_ALSO_NEGOTIATES',
    '507_INSUFFICIENT_STORAGE': '507 INSUFFICIENT_STORAGE',
    '508_LOOP_DETECTED': '508 LOOP_DETECTED',
    '509_BANDWIDTH_LIMIT_EXCEEDED': '509 BANDWIDTH_LIMIT_EXCEEDED',
    '510_NOT_EXTENDED': '510 NOT_EXTENDED',
    '511_NETWORK_AUTHENTICATION_REQUIRED': '511 NETWORK_AUTHENTICATION_REQUIRED',
} as const

export type ProcessHeaderAction200 = { [key: string]: any }

export type ProcessHeaderActionParams = {
    action: string
}

export type ProcessAllItemsAction200 = { [key: string]: any }

export type ProcessAllItemsActionParams = {
    action: string
}

export type ProcessItemAction200 = { [key: string]: any }

export type ProcessItemActionParams = {
    action: string
    validFrom?: string
    effectiveFrom?: string
}

export type UpdateCodelistItemLangExtended200 = { [key: string]: any }

export type DeleteTemporalCodelistItem200 = { [key: string]: any }

export type UpdateAndUnlockTemporalCodelistItem200 = { [key: string]: any }

export type ProcessItemRequestAction1200 = { [key: string]: any }

export type ProcessItemRequestAction1Params = {
    fromIndex: number
    toIndex: number
}

export type ProcessItemRequestAction200 = { [key: string]: any }

export type ProcessItemRequestActionParams = {
    action: string
    validFrom?: string
    effectiveFrom?: string
}

export type UpdateCodelistContactData200 = { [key: string]: any }

export type ProcessKsHeaderAction200 = { [key: string]: any }

export type ProcessKsHeaderActionParams = {
    action: string
}

export type CreateCodelistLanguageVersion200 = { [key: string]: any }

export type UpdateCodelistLanguageVersion200 = { [key: string]: any }

export type DeleteTemporalCodelistHeader200 = { [key: string]: any }

export type UpdateAndUnlockTemporalCodelistHeader200 = { [key: string]: any }

export type SetIndividuums200 = { [key: string]: any }

export type ProcessRequestAction200 = { [key: string]: any }

export type ProcessRequestActionParams = {
    action: string
}

export type ProcessRequestKsAction200 = { [key: string]: any }

export type ProcessRequestKsActionParams = {
    action: string
}

export type SaveDates200 = { [key: string]: any }

export type SaveDatesParams = {
    validFrom?: string
    effectiveFrom?: string
}

export interface ApiCodelistGraphData {
    id?: number
    code?: string
    graphUuid?: string
    request?: boolean
}

export interface MetaAttributesUi {
    owner?: string
    state?: string
    createdBy?: string
    createdAt?: string
    lastModifiedBy?: string
    lastModifiedAt?: string
}

export type AttributeUiValue = { [key: string]: any }

export interface AttributeUi {
    name?: string
    value?: AttributeUiValue
}

export interface ConfigurationItemUi {
    type?: string
    uuid?: string
    owner?: string
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
}

export interface ApiCodelistPreviewList {
    codelistsCount?: number
    codelists?: ApiCodelistPreview[]
}

export type DiffResultApiCodelistPreviewStatus = (typeof DiffResultApiCodelistPreviewStatus)[keyof typeof DiffResultApiCodelistPreviewStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiffResultApiCodelistPreviewStatus = {
    SAME: 'SAME',
    ADDED: 'ADDED',
    UPDATED: 'UPDATED',
    DELETED: 'DELETED',
} as const

export interface DiffResultApiCodelistPreview {
    first?: ApiCodelistPreview
    second?: ApiCodelistPreview
    status?: DiffResultApiCodelistPreviewStatus
}

export type DiffResultApiCodelistItemStatus = (typeof DiffResultApiCodelistItemStatus)[keyof typeof DiffResultApiCodelistItemStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiffResultApiCodelistItemStatus = {
    SAME: 'SAME',
    ADDED: 'ADDED',
    UPDATED: 'UPDATED',
    DELETED: 'DELETED',
} as const

export interface DiffResultApiCodelistItem {
    first?: ApiCodelistItem
    second?: ApiCodelistItem
    status?: DiffResultApiCodelistItemStatus
}

export interface DiffApiCodelist {
    codelistPreview?: DiffResultApiCodelistPreview
    codelistItems?: DiffResultApiCodelistItem[]
}

export interface MultiValueMapObjectObject {
    empty?: boolean
    [key: string]: { [key: string]: any }
}

export interface CodelistItemsDates {
    validFrom?: string
    effectiveFrom?: string
    itemCodes?: string[]
}

export interface ApiCodelistContactData {
    code?: string
    contactFirstName?: string
    contactSurname?: string
    contactPhone?: string
    contactMail?: string
}

export interface ApiCodelistName {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistLanguageVersion {
    language?: string
    codelistNames?: ApiCodelistName[]
    codelistNotes?: ApiCodelistNote[]
}

export interface ApiCodelistManager {
    id?: number
    value?: string
    language?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistPreview {
    graphUuid?: string
    id?: number
    code?: string
    validFrom?: string
    effectiveFrom?: string
    effectiveTo?: string
    codelistState?: string
    base?: boolean
    temporal?: boolean
    codelistNames?: ApiCodelistName[]
    mainCodelistManagers?: ApiCodelistManager[]
    codelistManagers?: ApiCodelistManager[]
    codelistNotes?: ApiCodelistNote[]
    codelistSource?: string[]
    uvs?: string
    avs?: string
    contactFirstName?: string
    contactSurname?: string
    contactPhone?: string
    contactMail?: string
    locked?: boolean
    lockedBy?: string
    lockedFrom?: string
    comment?: string
    commentDate?: string
    histories?: ApiCodelistHistoriesList
    changeType?: string
    uri?: string
    uriOfDataElement?: string
    uriOfUriTemplate?: string
    resortCode?: string
    apiCodelistItemList?: ApiCodelistItemList
    fromDate?: string
    toDate?: string
}

export interface ApiCodelistItemValidity {
    id?: number
    effectiveFrom?: string
    effectiveTo?: string
    effectiveFromValue?: string
    effectiveToValue?: string
}

export interface ApiCodelistItemUnitOfMeasure {
    id?: number
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemShortenedName {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemNote {
    id?: number
    language?: string
    value?: string
}

export interface ApiCodelistItemName {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemLogicalOrder {
    id?: number
    language?: string
    value?: string
}

export interface ApiCodelistItemList {
    codelistsItemCount?: number
    codelistsItems?: ApiCodelistItem[]
}

export interface ApiCodelistItemLegislativeValidity {
    id?: number
    validityValue?: boolean
    effectiveFrom?: string
    effectiveTo?: string
    value?: boolean
}

export interface ApiCodelistItemIncludesAlso {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemInclude {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemExclude {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemAdditionalContent {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItemAbbreviatedName {
    id?: number
    language?: string
    value?: string
    effectiveFrom?: string
    effectiveTo?: string
}

export interface ApiCodelistItem {
    id?: number
    itemCode?: string
    itemUri?: string
    validFrom?: string
    codelistItemAbbreviatedNames?: ApiCodelistItemAbbreviatedName[]
    codelistItemAdditionalContents?: ApiCodelistItemAdditionalContent[]
    codelistItemExcludes?: ApiCodelistItemExclude[]
    codelistItemIncludes?: ApiCodelistItemInclude[]
    codelistItemIncludesAlso?: ApiCodelistItemIncludesAlso[]
    codelistItemLegislativeValidities?: ApiCodelistItemLegislativeValidity[]
    codelistItemLogicalOrders?: ApiCodelistItemLogicalOrder[]
    codelistItemNames?: ApiCodelistItemName[]
    codelistItemNotes?: ApiCodelistItemNote[]
    codelistItemShortenedNames?: ApiCodelistItemShortenedName[]
    codelistItemUnitsOfMeasure?: ApiCodelistItemUnitOfMeasure[]
    codelistItemValidities?: ApiCodelistItemValidity[]
    temporal?: boolean
    codelistItemState?: string
    published?: boolean
    locked?: boolean
    lockedBy?: string
    lockedFrom?: string
}

export interface ApiCodelistHistory {
    changedAt?: string
    changedBy?: string
    action?: string
}

export interface ApiCodelistHistoriesList {
    codelistHistoriesCount?: number
    codelistHistories?: ApiCodelistHistory[]
    codelistHistriesCount?: number
}

export interface ApiCodelistItemUriTemplate {
    uri?: string
}

export interface ApiAction {
    comment?: string
    commentDate?: string
}

export interface ApiCodelistNote {
    id?: number
    language?: string
    value?: string
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useSaveDatesHook = () => {
    const saveDates = useCodeListRepoSwaggerClient<SaveDates200>()

    return (code: string, apiCodelistNote: ApiCodelistNote[], params?: SaveDatesParams) => {
        return saveDates({
            url: `/codelists/codelistrequests/${code}/savedates`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistNote,
            params,
        })
    }
}

export const useSaveDatesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveDatesHook>>>,
        TError,
        { code: string; data: ApiCodelistNote[]; params?: SaveDatesParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSaveDatesHook>>>,
    TError,
    { code: string; data: ApiCodelistNote[]; params?: SaveDatesParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const saveDates = useSaveDatesHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useSaveDatesHook>>>,
        { code: string; data: ApiCodelistNote[]; params?: SaveDatesParams }
    > = (props) => {
        const { code, data, params } = props ?? {}

        return saveDates(code, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveDatesMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveDatesHook>>>>
export type SaveDatesMutationBody = ApiCodelistNote[]
export type SaveDatesMutationError = unknown

export const useSaveDates = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSaveDatesHook>>>,
        TError,
        { code: string; data: ApiCodelistNote[]; params?: SaveDatesParams },
        TContext
    >
}) => {
    const mutationOptions = useSaveDatesMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessRequestKsActionHook = () => {
    const processRequestKsAction = useCodeListRepoSwaggerClient<ProcessRequestKsAction200>()

    return (code: string, apiAction: ApiAction, params: ProcessRequestKsActionParams) => {
        return processRequestKsAction({
            url: `/codelists/codelistrequests/${code}/ksactions`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiAction,
            params,
        })
    }
}

export const useProcessRequestKsActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestKsActionHook>>>,
        TError,
        { code: string; data: ApiAction; params: ProcessRequestKsActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessRequestKsActionHook>>>,
    TError,
    { code: string; data: ApiAction; params: ProcessRequestKsActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processRequestKsAction = useProcessRequestKsActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestKsActionHook>>>,
        { code: string; data: ApiAction; params: ProcessRequestKsActionParams }
    > = (props) => {
        const { code, data, params } = props ?? {}

        return processRequestKsAction(code, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessRequestKsActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessRequestKsActionHook>>>>
export type ProcessRequestKsActionMutationBody = ApiAction
export type ProcessRequestKsActionMutationError = unknown

export const useProcessRequestKsAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestKsActionHook>>>,
        TError,
        { code: string; data: ApiAction; params: ProcessRequestKsActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessRequestKsActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessRequestActionHook = () => {
    const processRequestAction = useCodeListRepoSwaggerClient<ProcessRequestAction200>()

    return (code: string, apiAction: ApiAction, params: ProcessRequestActionParams) => {
        return processRequestAction({
            url: `/codelists/codelistrequests/${code}/actions`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiAction,
            params,
        })
    }
}

export const useProcessRequestActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
        TError,
        { code: string; data: ApiAction; params: ProcessRequestActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
    TError,
    { code: string; data: ApiAction; params: ProcessRequestActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processRequestAction = useProcessRequestActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
        { code: string; data: ApiAction; params: ProcessRequestActionParams }
    > = (props) => {
        const { code, data, params } = props ?? {}

        return processRequestAction(code, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessRequestActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>>
export type ProcessRequestActionMutationBody = ApiAction
export type ProcessRequestActionMutationError = unknown

export const useProcessRequestAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
        TError,
        { code: string; data: ApiAction; params: ProcessRequestActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessRequestActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetIndividuumsHook = () => {
    const getIndividuums = useCodeListRepoSwaggerClient<ConfigurationItemUi[]>()

    return (id: number, signal?: AbortSignal) => {
        return getIndividuums({ url: `/codelists/codelistheaders/${id}/individuums`, method: 'get', signal })
    }
}

export const getGetIndividuumsQueryKey = (id: number) => [`/codelists/codelistheaders/${id}/individuums`] as const

export const useGetIndividuumsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>, TError = unknown>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetIndividuumsQueryKey(id)

    const getIndividuums = useGetIndividuumsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>> = ({ signal }) => getIndividuums(id, signal)

    return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetIndividuumsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>>
export type GetIndividuumsQueryError = unknown

export const useGetIndividuums = <TData = Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>, TError = unknown>(
    id: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIndividuumsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetIndividuumsQueryOptions(id, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useSetIndividuumsHook = () => {
    const setIndividuums = useCodeListRepoSwaggerClient<SetIndividuums200>()

    return (id: number, apiCodelistItemUriTemplate: ApiCodelistItemUriTemplate) => {
        return setIndividuums({
            url: `/codelists/codelistheaders/${id}/individuums`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistItemUriTemplate,
        })
    }
}

export const useSetIndividuumsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSetIndividuumsHook>>>,
        TError,
        { id: number; data: ApiCodelistItemUriTemplate },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSetIndividuumsHook>>>,
    TError,
    { id: number; data: ApiCodelistItemUriTemplate },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const setIndividuums = useSetIndividuumsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useSetIndividuumsHook>>>,
        { id: number; data: ApiCodelistItemUriTemplate }
    > = (props) => {
        const { id, data } = props ?? {}

        return setIndividuums(id, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type SetIndividuumsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSetIndividuumsHook>>>>
export type SetIndividuumsMutationBody = ApiCodelistItemUriTemplate
export type SetIndividuumsMutationError = unknown

export const useSetIndividuums = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useSetIndividuumsHook>>>,
        TError,
        { id: number; data: ApiCodelistItemUriTemplate },
        TContext
    >
}) => {
    const mutationOptions = useSetIndividuumsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetTemporalCodelistHeaderHook = () => {
    const getTemporalCodelistHeader = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (code: string, signal?: AbortSignal) => {
        return getTemporalCodelistHeader({ url: `/codelists/codelistheaders/${code}/temporal`, method: 'get', signal })
    }
}

export const getGetTemporalCodelistHeaderQueryKey = (code: string) => [`/codelists/codelistheaders/${code}/temporal`] as const

export const useGetTemporalCodelistHeaderQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>,
    TError = unknown,
>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTemporalCodelistHeaderQueryKey(code)

    const getTemporalCodelistHeader = useGetTemporalCodelistHeaderHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>> = ({ signal }) =>
        getTemporalCodelistHeader(code, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type GetTemporalCodelistHeaderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>>
export type GetTemporalCodelistHeaderQueryError = unknown

export const useGetTemporalCodelistHeader = <TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>, TError = unknown>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTemporalCodelistHeaderQueryOptions(code, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUpdateAndUnlockTemporalCodelistHeaderHook = () => {
    const updateAndUnlockTemporalCodelistHeader = useCodeListRepoSwaggerClient<UpdateAndUnlockTemporalCodelistHeader200>()

    return (code: string, apiCodelistPreview: ApiCodelistPreview) => {
        return updateAndUnlockTemporalCodelistHeader({
            url: `/codelists/codelistheaders/${code}/temporal`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistPreview,
        })
    }
}

export const useUpdateAndUnlockTemporalCodelistHeaderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistHeaderHook>>>,
        TError,
        { code: string; data: ApiCodelistPreview },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistHeaderHook>>>,
    TError,
    { code: string; data: ApiCodelistPreview },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateAndUnlockTemporalCodelistHeader = useUpdateAndUnlockTemporalCodelistHeaderHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistHeaderHook>>>,
        { code: string; data: ApiCodelistPreview }
    > = (props) => {
        const { code, data } = props ?? {}

        return updateAndUnlockTemporalCodelistHeader(code, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateAndUnlockTemporalCodelistHeaderMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistHeaderHook>>>
>
export type UpdateAndUnlockTemporalCodelistHeaderMutationBody = ApiCodelistPreview
export type UpdateAndUnlockTemporalCodelistHeaderMutationError = unknown

export const useUpdateAndUnlockTemporalCodelistHeader = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistHeaderHook>>>,
        TError,
        { code: string; data: ApiCodelistPreview },
        TContext
    >
}) => {
    const mutationOptions = useUpdateAndUnlockTemporalCodelistHeaderMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteTemporalCodelistHeaderHook = () => {
    const deleteTemporalCodelistHeader = useCodeListRepoSwaggerClient<DeleteTemporalCodelistHeader200>()

    return (code: string) => {
        return deleteTemporalCodelistHeader({ url: `/codelists/codelistheaders/${code}/temporal`, method: 'delete' })
    }
}

export const useDeleteTemporalCodelistHeaderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistHeaderHook>>>, TError, { code: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistHeaderHook>>>, TError, { code: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteTemporalCodelistHeader = useDeleteTemporalCodelistHeaderHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistHeaderHook>>>, { code: string }> = (props) => {
        const { code } = props ?? {}

        return deleteTemporalCodelistHeader(code)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteTemporalCodelistHeaderMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistHeaderHook>>>>

export type DeleteTemporalCodelistHeaderMutationError = unknown

export const useDeleteTemporalCodelistHeader = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistHeaderHook>>>, TError, { code: string }, TContext>
}) => {
    const mutationOptions = useDeleteTemporalCodelistHeaderMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateCodelistLanguageVersionHook = () => {
    const updateCodelistLanguageVersion = useCodeListRepoSwaggerClient<UpdateCodelistLanguageVersion200>()

    return (code: string, apiCodelistLanguageVersion: ApiCodelistLanguageVersion) => {
        return updateCodelistLanguageVersion({
            url: `/codelists/codelistheaders/${code}/languageversions`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistLanguageVersion,
        })
    }
}

export const useUpdateCodelistLanguageVersionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistLanguageVersionHook>>>,
        TError,
        { code: string; data: ApiCodelistLanguageVersion },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateCodelistLanguageVersionHook>>>,
    TError,
    { code: string; data: ApiCodelistLanguageVersion },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateCodelistLanguageVersion = useUpdateCodelistLanguageVersionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistLanguageVersionHook>>>,
        { code: string; data: ApiCodelistLanguageVersion }
    > = (props) => {
        const { code, data } = props ?? {}

        return updateCodelistLanguageVersion(code, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateCodelistLanguageVersionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateCodelistLanguageVersionHook>>>>
export type UpdateCodelistLanguageVersionMutationBody = ApiCodelistLanguageVersion
export type UpdateCodelistLanguageVersionMutationError = unknown

export const useUpdateCodelistLanguageVersion = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistLanguageVersionHook>>>,
        TError,
        { code: string; data: ApiCodelistLanguageVersion },
        TContext
    >
}) => {
    const mutationOptions = useUpdateCodelistLanguageVersionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCreateCodelistLanguageVersionHook = () => {
    const createCodelistLanguageVersion = useCodeListRepoSwaggerClient<CreateCodelistLanguageVersion200>()

    return (code: string, apiCodelistLanguageVersion: ApiCodelistLanguageVersion) => {
        return createCodelistLanguageVersion({
            url: `/codelists/codelistheaders/${code}/languageversions`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistLanguageVersion,
        })
    }
}

export const useCreateCodelistLanguageVersionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistLanguageVersionHook>>>,
        TError,
        { code: string; data: ApiCodelistLanguageVersion },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateCodelistLanguageVersionHook>>>,
    TError,
    { code: string; data: ApiCodelistLanguageVersion },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const createCodelistLanguageVersion = useCreateCodelistLanguageVersionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistLanguageVersionHook>>>,
        { code: string; data: ApiCodelistLanguageVersion }
    > = (props) => {
        const { code, data } = props ?? {}

        return createCodelistLanguageVersion(code, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateCodelistLanguageVersionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateCodelistLanguageVersionHook>>>>
export type CreateCodelistLanguageVersionMutationBody = ApiCodelistLanguageVersion
export type CreateCodelistLanguageVersionMutationError = unknown

export const useCreateCodelistLanguageVersion = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistLanguageVersionHook>>>,
        TError,
        { code: string; data: ApiCodelistLanguageVersion },
        TContext
    >
}) => {
    const mutationOptions = useCreateCodelistLanguageVersionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessKsHeaderActionHook = () => {
    const processKsHeaderAction = useCodeListRepoSwaggerClient<ProcessKsHeaderAction200>()

    return (code: string, apiAction: ApiAction, params: ProcessKsHeaderActionParams) => {
        return processKsHeaderAction({
            url: `/codelists/codelistheaders/${code}/ksactions`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiAction,
            params,
        })
    }
}

export const useProcessKsHeaderActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessKsHeaderActionHook>>>,
        TError,
        { code: string; data: ApiAction; params: ProcessKsHeaderActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessKsHeaderActionHook>>>,
    TError,
    { code: string; data: ApiAction; params: ProcessKsHeaderActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processKsHeaderAction = useProcessKsHeaderActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessKsHeaderActionHook>>>,
        { code: string; data: ApiAction; params: ProcessKsHeaderActionParams }
    > = (props) => {
        const { code, data, params } = props ?? {}

        return processKsHeaderAction(code, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessKsHeaderActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessKsHeaderActionHook>>>>
export type ProcessKsHeaderActionMutationBody = ApiAction
export type ProcessKsHeaderActionMutationError = unknown

export const useProcessKsHeaderAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessKsHeaderActionHook>>>,
        TError,
        { code: string; data: ApiAction; params: ProcessKsHeaderActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessKsHeaderActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateCodelistContactDataHook = () => {
    const updateCodelistContactData = useCodeListRepoSwaggerClient<UpdateCodelistContactData200>()

    return (code: string, apiCodelistContactData: ApiCodelistContactData) => {
        return updateCodelistContactData({
            url: `/codelists/codelistheaders/${code}/contactData`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistContactData,
        })
    }
}

export const useUpdateCodelistContactDataMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistContactDataHook>>>,
        TError,
        { code: string; data: ApiCodelistContactData },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateCodelistContactDataHook>>>,
    TError,
    { code: string; data: ApiCodelistContactData },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateCodelistContactData = useUpdateCodelistContactDataHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistContactDataHook>>>,
        { code: string; data: ApiCodelistContactData }
    > = (props) => {
        const { code, data } = props ?? {}

        return updateCodelistContactData(code, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateCodelistContactDataMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateCodelistContactDataHook>>>>
export type UpdateCodelistContactDataMutationBody = ApiCodelistContactData
export type UpdateCodelistContactDataMutationError = unknown

export const useUpdateCodelistContactData = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistContactDataHook>>>,
        TError,
        { code: string; data: ApiCodelistContactData },
        TContext
    >
}) => {
    const mutationOptions = useUpdateCodelistContactDataMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessItemRequestActionHook = () => {
    const processItemRequestAction = useCodeListRepoSwaggerClient<ProcessItemRequestAction200>()

    return (code: string, itemCode: string, params: ProcessItemRequestActionParams) => {
        return processItemRequestAction({ url: `/codelists/codelistheaders/${code}/codelistrequestitems/${itemCode}/actions`, method: 'put', params })
    }
}

export const useProcessItemRequestActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessItemRequestActionHook>>>,
        TError,
        { code: string; itemCode: string; params: ProcessItemRequestActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessItemRequestActionHook>>>,
    TError,
    { code: string; itemCode: string; params: ProcessItemRequestActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processItemRequestAction = useProcessItemRequestActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessItemRequestActionHook>>>,
        { code: string; itemCode: string; params: ProcessItemRequestActionParams }
    > = (props) => {
        const { code, itemCode, params } = props ?? {}

        return processItemRequestAction(code, itemCode, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessItemRequestActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessItemRequestActionHook>>>>

export type ProcessItemRequestActionMutationError = unknown

export const useProcessItemRequestAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessItemRequestActionHook>>>,
        TError,
        { code: string; itemCode: string; params: ProcessItemRequestActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessItemRequestActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessItemRequestAction1Hook = () => {
    const processItemRequestAction1 = useCodeListRepoSwaggerClient<ProcessItemRequestAction1200>()

    return (code: string, allCodelistItems: boolean, codelistItemsDates: CodelistItemsDates, params: ProcessItemRequestAction1Params) => {
        return processItemRequestAction1({
            url: `/codelists/codelistheaders/${code}/codelistrequestitems/setDates/${allCodelistItems}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: codelistItemsDates,
            params,
        })
    }
}

export const useProcessItemRequestAction1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessItemRequestAction1Hook>>>,
        TError,
        { code: string; allCodelistItems: boolean; data: CodelistItemsDates; params: ProcessItemRequestAction1Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessItemRequestAction1Hook>>>,
    TError,
    { code: string; allCodelistItems: boolean; data: CodelistItemsDates; params: ProcessItemRequestAction1Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processItemRequestAction1 = useProcessItemRequestAction1Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessItemRequestAction1Hook>>>,
        { code: string; allCodelistItems: boolean; data: CodelistItemsDates; params: ProcessItemRequestAction1Params }
    > = (props) => {
        const { code, allCodelistItems, data, params } = props ?? {}

        return processItemRequestAction1(code, allCodelistItems, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessItemRequestAction1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessItemRequestAction1Hook>>>>
export type ProcessItemRequestAction1MutationBody = CodelistItemsDates
export type ProcessItemRequestAction1MutationError = unknown

export const useProcessItemRequestAction1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessItemRequestAction1Hook>>>,
        TError,
        { code: string; allCodelistItems: boolean; data: CodelistItemsDates; params: ProcessItemRequestAction1Params },
        TContext
    >
}) => {
    const mutationOptions = useProcessItemRequestAction1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetTemporalCodelistItemHook = () => {
    const getTemporalCodelistItem = useCodeListRepoSwaggerClient<ApiCodelistItem>()

    return (code: string, itemCode: string, signal?: AbortSignal) => {
        return getTemporalCodelistItem({ url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporal`, method: 'get', signal })
    }
}

export const getGetTemporalCodelistItemQueryKey = (code: string, itemCode: string) =>
    [`/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporal`] as const

export const useGetTemporalCodelistItemQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>,
    TError = unknown,
>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTemporalCodelistItemQueryKey(code, itemCode)

    const getTemporalCodelistItem = useGetTemporalCodelistItemHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>> = ({ signal }) =>
        getTemporalCodelistItem(code, itemCode, signal)

    return { queryKey, queryFn, enabled: !!(code && itemCode), ...queryOptions }
}

export type GetTemporalCodelistItemQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>>
export type GetTemporalCodelistItemQueryError = unknown

export const useGetTemporalCodelistItem = <TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>, TError = unknown>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTemporalCodelistItemQueryOptions(code, itemCode, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUpdateAndUnlockTemporalCodelistItemHook = () => {
    const updateAndUnlockTemporalCodelistItem = useCodeListRepoSwaggerClient<UpdateAndUnlockTemporalCodelistItem200>()

    return (code: string, itemCode: string, apiCodelistItem: ApiCodelistItem) => {
        return updateAndUnlockTemporalCodelistItem({
            url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporal`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistItem,
        })
    }
}

export const useUpdateAndUnlockTemporalCodelistItemMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistItemHook>>>,
        TError,
        { code: string; itemCode: string; data: ApiCodelistItem },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistItemHook>>>,
    TError,
    { code: string; itemCode: string; data: ApiCodelistItem },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateAndUnlockTemporalCodelistItem = useUpdateAndUnlockTemporalCodelistItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistItemHook>>>,
        { code: string; itemCode: string; data: ApiCodelistItem }
    > = (props) => {
        const { code, itemCode, data } = props ?? {}

        return updateAndUnlockTemporalCodelistItem(code, itemCode, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateAndUnlockTemporalCodelistItemMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistItemHook>>>
>
export type UpdateAndUnlockTemporalCodelistItemMutationBody = ApiCodelistItem
export type UpdateAndUnlockTemporalCodelistItemMutationError = unknown

export const useUpdateAndUnlockTemporalCodelistItem = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateAndUnlockTemporalCodelistItemHook>>>,
        TError,
        { code: string; itemCode: string; data: ApiCodelistItem },
        TContext
    >
}) => {
    const mutationOptions = useUpdateAndUnlockTemporalCodelistItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteTemporalCodelistItemHook = () => {
    const deleteTemporalCodelistItem = useCodeListRepoSwaggerClient<DeleteTemporalCodelistItem200>()

    return (code: string, itemCode: string) => {
        return deleteTemporalCodelistItem({ url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporal`, method: 'delete' })
    }
}

export const useDeleteTemporalCodelistItemMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistItemHook>>>,
        TError,
        { code: string; itemCode: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistItemHook>>>,
    TError,
    { code: string; itemCode: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteTemporalCodelistItem = useDeleteTemporalCodelistItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistItemHook>>>,
        { code: string; itemCode: string }
    > = (props) => {
        const { code, itemCode } = props ?? {}

        return deleteTemporalCodelistItem(code, itemCode)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteTemporalCodelistItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistItemHook>>>>

export type DeleteTemporalCodelistItemMutationError = unknown

export const useDeleteTemporalCodelistItem = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteTemporalCodelistItemHook>>>,
        TError,
        { code: string; itemCode: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteTemporalCodelistItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateCodelistItemLangExtendedHook = () => {
    const updateCodelistItemLangExtended = useCodeListRepoSwaggerClient<UpdateCodelistItemLangExtended200>()

    return (code: string, itemCode: string, apiCodelistItem: ApiCodelistItem) => {
        return updateCodelistItemLangExtended({
            url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/langextended`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistItem,
        })
    }
}

export const useUpdateCodelistItemLangExtendedMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistItemLangExtendedHook>>>,
        TError,
        { code: string; itemCode: string; data: ApiCodelistItem },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateCodelistItemLangExtendedHook>>>,
    TError,
    { code: string; itemCode: string; data: ApiCodelistItem },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateCodelistItemLangExtended = useUpdateCodelistItemLangExtendedHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistItemLangExtendedHook>>>,
        { code: string; itemCode: string; data: ApiCodelistItem }
    > = (props) => {
        const { code, itemCode, data } = props ?? {}

        return updateCodelistItemLangExtended(code, itemCode, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateCodelistItemLangExtendedMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateCodelistItemLangExtendedHook>>>>
export type UpdateCodelistItemLangExtendedMutationBody = ApiCodelistItem
export type UpdateCodelistItemLangExtendedMutationError = unknown

export const useUpdateCodelistItemLangExtended = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateCodelistItemLangExtendedHook>>>,
        TError,
        { code: string; itemCode: string; data: ApiCodelistItem },
        TContext
    >
}) => {
    const mutationOptions = useUpdateCodelistItemLangExtendedMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessItemActionHook = () => {
    const processItemAction = useCodeListRepoSwaggerClient<ProcessItemAction200>()

    return (code: string, itemCode: string, params: ProcessItemActionParams) => {
        return processItemAction({ url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/actions`, method: 'put', params })
    }
}

export const useProcessItemActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessItemActionHook>>>,
        TError,
        { code: string; itemCode: string; params: ProcessItemActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessItemActionHook>>>,
    TError,
    { code: string; itemCode: string; params: ProcessItemActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processItemAction = useProcessItemActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessItemActionHook>>>,
        { code: string; itemCode: string; params: ProcessItemActionParams }
    > = (props) => {
        const { code, itemCode, params } = props ?? {}

        return processItemAction(code, itemCode, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessItemActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessItemActionHook>>>>

export type ProcessItemActionMutationError = unknown

export const useProcessItemAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessItemActionHook>>>,
        TError,
        { code: string; itemCode: string; params: ProcessItemActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessItemActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessAllItemsActionHook = () => {
    const processAllItemsAction = useCodeListRepoSwaggerClient<ProcessAllItemsAction200>()

    return (code: string, params: ProcessAllItemsActionParams) => {
        return processAllItemsAction({ url: `/codelists/codelistheaders/${code}/codelistitems/actions`, method: 'put', params })
    }
}

export const useProcessAllItemsActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessAllItemsActionHook>>>,
        TError,
        { code: string; params: ProcessAllItemsActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessAllItemsActionHook>>>,
    TError,
    { code: string; params: ProcessAllItemsActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processAllItemsAction = useProcessAllItemsActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessAllItemsActionHook>>>,
        { code: string; params: ProcessAllItemsActionParams }
    > = (props) => {
        const { code, params } = props ?? {}

        return processAllItemsAction(code, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessAllItemsActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessAllItemsActionHook>>>>

export type ProcessAllItemsActionMutationError = unknown

export const useProcessAllItemsAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessAllItemsActionHook>>>,
        TError,
        { code: string; params: ProcessAllItemsActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessAllItemsActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessHeaderActionHook = () => {
    const processHeaderAction = useCodeListRepoSwaggerClient<ProcessHeaderAction200>()

    return (code: string, params: ProcessHeaderActionParams) => {
        return processHeaderAction({ url: `/codelists/codelistheaders/${code}/actions`, method: 'put', params })
    }
}

export const useProcessHeaderActionMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessHeaderActionHook>>>,
        TError,
        { code: string; params: ProcessHeaderActionParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessHeaderActionHook>>>,
    TError,
    { code: string; params: ProcessHeaderActionParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processHeaderAction = useProcessHeaderActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessHeaderActionHook>>>,
        { code: string; params: ProcessHeaderActionParams }
    > = (props) => {
        const { code, params } = props ?? {}

        return processHeaderAction(code, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessHeaderActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessHeaderActionHook>>>>

export type ProcessHeaderActionMutationError = unknown

export const useProcessHeaderAction = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessHeaderActionHook>>>,
        TError,
        { code: string; params: ProcessHeaderActionParams },
        TContext
    >
}) => {
    const mutationOptions = useProcessHeaderActionMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary existsCodelist
 */
export const useExistsCodelistHook = () => {
    const existsCodelist = useCodeListRepoSwaggerClient<ExistsCodelist200>()

    return (apiCodelistPreview: ApiCodelistPreview) => {
        return existsCodelist({
            url: `/codelists/existscodelist`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistPreview,
        })
    }
}

export const useExistsCodelistMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExistsCodelistHook>>>, TError, { data: ApiCodelistPreview }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExistsCodelistHook>>>, TError, { data: ApiCodelistPreview }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const existsCodelist = useExistsCodelistHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExistsCodelistHook>>>, { data: ApiCodelistPreview }> = (props) => {
        const { data } = props ?? {}

        return existsCodelist(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExistsCodelistMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExistsCodelistHook>>>>
export type ExistsCodelistMutationBody = ApiCodelistPreview
export type ExistsCodelistMutationError = unknown

/**
 * @summary existsCodelist
 */
export const useExistsCodelist = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExistsCodelistHook>>>, TError, { data: ApiCodelistPreview }, TContext>
}) => {
    const mutationOptions = useExistsCodelistMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useSaveAndSendCodelistHook = () => {
    const saveAndSendCodelist = useCodeListRepoSwaggerClient<SaveAndSendCodelist200>()

    return (apiCodelistPreview: ApiCodelistPreview) => {
        return saveAndSendCodelist({
            url: `/codelists/codelistsaveandsend`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistPreview,
        })
    }
}

export const useSaveAndSendCodelistMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveAndSendCodelistHook>>>, TError, { data: ApiCodelistPreview }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveAndSendCodelistHook>>>, TError, { data: ApiCodelistPreview }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const saveAndSendCodelist = useSaveAndSendCodelistHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useSaveAndSendCodelistHook>>>, { data: ApiCodelistPreview }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return saveAndSendCodelist(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type SaveAndSendCodelistMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSaveAndSendCodelistHook>>>>
export type SaveAndSendCodelistMutationBody = ApiCodelistPreview
export type SaveAndSendCodelistMutationError = unknown

export const useSaveAndSendCodelist = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useSaveAndSendCodelistHook>>>, TError, { data: ApiCodelistPreview }, TContext>
}) => {
    const mutationOptions = useSaveAndSendCodelistMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetCodelistRequestsHook = () => {
    const getCodelistRequests = useCodeListRepoSwaggerClient<ApiCodelistPreviewList>()

    return (params: GetCodelistRequestsParams, signal?: AbortSignal) => {
        return getCodelistRequests({ url: `/codelists/codelistrequests`, method: 'get', params, signal })
    }
}

export const getGetCodelistRequestsQueryKey = (params: GetCodelistRequestsParams) =>
    [`/codelists/codelistrequests`, ...(params ? [params] : [])] as const

export const useGetCodelistRequestsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>, TError = unknown>(
    params: GetCodelistRequestsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistRequestsQueryKey(params)

    const getCodelistRequests = useGetCodelistRequestsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>> = ({ signal }) =>
        getCodelistRequests(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetCodelistRequestsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>>
export type GetCodelistRequestsQueryError = unknown

export const useGetCodelistRequests = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>, TError = unknown>(
    params: GetCodelistRequestsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistRequestsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCreateCodelistRequestHook = () => {
    const createCodelistRequest = useCodeListRepoSwaggerClient<CreateCodelistRequest200>()

    return (apiCodelistPreview: ApiCodelistPreview) => {
        return createCodelistRequest({
            url: `/codelists/codelistrequests`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistPreview,
        })
    }
}

export const useCreateCodelistRequestMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistRequestHook>>>,
        TError,
        { data: ApiCodelistPreview },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateCodelistRequestHook>>>, TError, { data: ApiCodelistPreview }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const createCodelistRequest = useCreateCodelistRequestHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateCodelistRequestHook>>>, { data: ApiCodelistPreview }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return createCodelistRequest(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateCodelistRequestMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateCodelistRequestHook>>>>
export type CreateCodelistRequestMutationBody = ApiCodelistPreview
export type CreateCodelistRequestMutationError = unknown

export const useCreateCodelistRequest = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistRequestHook>>>,
        TError,
        { data: ApiCodelistPreview },
        TContext
    >
}) => {
    const mutationOptions = useCreateCodelistRequestMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetCodelistItemsHook = () => {
    const getCodelistItems = useCodeListRepoSwaggerClient<ApiCodelistItemList>()

    return (code: string, params: GetCodelistItemsParams, signal?: AbortSignal) => {
        return getCodelistItems({ url: `/codelists/codelistheaders/${code}/codelistitems`, method: 'get', params, signal })
    }
}

export const getGetCodelistItemsQueryKey = (code: string, params: GetCodelistItemsParams) =>
    [`/codelists/codelistheaders/${code}/codelistitems`, ...(params ? [params] : [])] as const

export const useGetCodelistItemsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>, TError = unknown>(
    code: string,
    params: GetCodelistItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistItemsQueryKey(code, params)

    const getCodelistItems = useGetCodelistItemsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>> = ({ signal }) =>
        getCodelistItems(code, params, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type GetCodelistItemsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>>
export type GetCodelistItemsQueryError = unknown

export const useGetCodelistItems = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>, TError = unknown>(
    code: string,
    params: GetCodelistItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistItemsQueryOptions(code, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCreateCodelistItemHook = () => {
    const createCodelistItem = useCodeListRepoSwaggerClient<CreateCodelistItem200>()

    return (code: string, apiCodelistItem: ApiCodelistItem) => {
        return createCodelistItem({
            url: `/codelists/codelistheaders/${code}/codelistitems`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistItem,
        })
    }
}

export const useCreateCodelistItemMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistItemHook>>>,
        TError,
        { code: string; data: ApiCodelistItem },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateCodelistItemHook>>>,
    TError,
    { code: string; data: ApiCodelistItem },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const createCodelistItem = useCreateCodelistItemHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateCodelistItemHook>>>, { code: string; data: ApiCodelistItem }> = (
        props,
    ) => {
        const { code, data } = props ?? {}

        return createCodelistItem(code, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateCodelistItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateCodelistItemHook>>>>
export type CreateCodelistItemMutationBody = ApiCodelistItem
export type CreateCodelistItemMutationError = unknown

export const useCreateCodelistItem = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateCodelistItemHook>>>,
        TError,
        { code: string; data: ApiCodelistItem },
        TContext
    >
}) => {
    const mutationOptions = useCreateCodelistItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCreateNewCodelistItemLangExtendedHook = () => {
    const createNewCodelistItemLangExtended = useCodeListRepoSwaggerClient<CreateNewCodelistItemLangExtended200>()

    return (code: string, itemCode: string, actualLang: string, apiCodelistItem: ApiCodelistItem) => {
        return createNewCodelistItemLangExtended({
            url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/${actualLang}/langextended`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiCodelistItem,
        })
    }
}

export const useCreateNewCodelistItemLangExtendedMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateNewCodelistItemLangExtendedHook>>>,
        TError,
        { code: string; itemCode: string; actualLang: string; data: ApiCodelistItem },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateNewCodelistItemLangExtendedHook>>>,
    TError,
    { code: string; itemCode: string; actualLang: string; data: ApiCodelistItem },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const createNewCodelistItemLangExtended = useCreateNewCodelistItemLangExtendedHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useCreateNewCodelistItemLangExtendedHook>>>,
        { code: string; itemCode: string; actualLang: string; data: ApiCodelistItem }
    > = (props) => {
        const { code, itemCode, actualLang, data } = props ?? {}

        return createNewCodelistItemLangExtended(code, itemCode, actualLang, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateNewCodelistItemLangExtendedMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useCreateNewCodelistItemLangExtendedHook>>>
>
export type CreateNewCodelistItemLangExtendedMutationBody = ApiCodelistItem
export type CreateNewCodelistItemLangExtendedMutationError = unknown

export const useCreateNewCodelistItemLangExtended = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateNewCodelistItemLangExtendedHook>>>,
        TError,
        { code: string; itemCode: string; actualLang: string; data: ApiCodelistItem },
        TContext
    >
}) => {
    const mutationOptions = useCreateNewCodelistItemLangExtendedMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary verifyInternalCodelistRequest
 */
export const useVerifyInternalCodelistRequestHook = () => {
    const verifyInternalCodelistRequest = useCodeListRepoSwaggerClient<MultiValueMapObjectObject>()

    return (verifyInternalCodelistRequestBody: VerifyInternalCodelistRequestBody) => {
        return verifyInternalCodelistRequest({
            url: `/codelists/codelistheaders/verifyrequest`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: verifyInternalCodelistRequestBody,
        })
    }
}

export const useVerifyInternalCodelistRequestMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistRequestHook>>>,
        TError,
        { data: VerifyInternalCodelistRequestBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistRequestHook>>>,
    TError,
    { data: VerifyInternalCodelistRequestBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const verifyInternalCodelistRequest = useVerifyInternalCodelistRequestHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistRequestHook>>>,
        { data: VerifyInternalCodelistRequestBody }
    > = (props) => {
        const { data } = props ?? {}

        return verifyInternalCodelistRequest(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerifyInternalCodelistRequestMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistRequestHook>>>>
export type VerifyInternalCodelistRequestMutationBody = VerifyInternalCodelistRequestBody
export type VerifyInternalCodelistRequestMutationError = unknown

/**
 * @summary verifyInternalCodelistRequest
 */
export const useVerifyInternalCodelistRequest = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistRequestHook>>>,
        TError,
        { data: VerifyInternalCodelistRequestBody },
        TContext
    >
}) => {
    const mutationOptions = useVerifyInternalCodelistRequestMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary verifyInternalCodelist
 */
export const useVerifyInternalCodelistHook = () => {
    const verifyInternalCodelist = useCodeListRepoSwaggerClient<MultiValueMapObjectObject>()

    return (verifyInternalCodelistBody: VerifyInternalCodelistBody) => {
        return verifyInternalCodelist({
            url: `/codelists/codelistheaders/verify`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: verifyInternalCodelistBody,
        })
    }
}

export const useVerifyInternalCodelistMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistHook>>>,
        TError,
        { data: VerifyInternalCodelistBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistHook>>>,
    TError,
    { data: VerifyInternalCodelistBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const verifyInternalCodelist = useVerifyInternalCodelistHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistHook>>>,
        { data: VerifyInternalCodelistBody }
    > = (props) => {
        const { data } = props ?? {}

        return verifyInternalCodelist(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type VerifyInternalCodelistMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistHook>>>>
export type VerifyInternalCodelistMutationBody = VerifyInternalCodelistBody
export type VerifyInternalCodelistMutationError = unknown

/**
 * @summary verifyInternalCodelist
 */
export const useVerifyInternalCodelist = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useVerifyInternalCodelistHook>>>,
        TError,
        { data: VerifyInternalCodelistBody },
        TContext
    >
}) => {
    const mutationOptions = useVerifyInternalCodelistMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUploadInternalCodelistRequestHook = () => {
    const uploadInternalCodelistRequest = useCodeListRepoSwaggerClient<UploadInternalCodelistRequest200>()

    return (uploadInternalCodelistRequestBody: UploadInternalCodelistRequestBody) => {
        return uploadInternalCodelistRequest({
            url: `/codelists/codelistheaders/uploadrequest`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: uploadInternalCodelistRequestBody,
        })
    }
}

export const useUploadInternalCodelistRequestMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistRequestHook>>>,
        TError,
        { data: UploadInternalCodelistRequestBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistRequestHook>>>,
    TError,
    { data: UploadInternalCodelistRequestBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const uploadInternalCodelistRequest = useUploadInternalCodelistRequestHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistRequestHook>>>,
        { data: UploadInternalCodelistRequestBody }
    > = (props) => {
        const { data } = props ?? {}

        return uploadInternalCodelistRequest(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UploadInternalCodelistRequestMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistRequestHook>>>>
export type UploadInternalCodelistRequestMutationBody = UploadInternalCodelistRequestBody
export type UploadInternalCodelistRequestMutationError = unknown

export const useUploadInternalCodelistRequest = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistRequestHook>>>,
        TError,
        { data: UploadInternalCodelistRequestBody },
        TContext
    >
}) => {
    const mutationOptions = useUploadInternalCodelistRequestMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUploadInternalCodelistHook = () => {
    const uploadInternalCodelist = useCodeListRepoSwaggerClient<UploadInternalCodelist200>()

    return (uploadInternalCodelistBody: UploadInternalCodelistBody) => {
        return uploadInternalCodelist({
            url: `/codelists/codelistheaders/upload`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: uploadInternalCodelistBody,
        })
    }
}

export const useUploadInternalCodelistMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistHook>>>,
        TError,
        { data: UploadInternalCodelistBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistHook>>>,
    TError,
    { data: UploadInternalCodelistBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const uploadInternalCodelist = useUploadInternalCodelistHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistHook>>>,
        { data: UploadInternalCodelistBody }
    > = (props) => {
        const { data } = props ?? {}

        return uploadInternalCodelist(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UploadInternalCodelistMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistHook>>>>
export type UploadInternalCodelistMutationBody = UploadInternalCodelistBody
export type UploadInternalCodelistMutationError = unknown

export const useUploadInternalCodelist = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadInternalCodelistHook>>>,
        TError,
        { data: UploadInternalCodelistBody },
        TContext
    >
}) => {
    const mutationOptions = useUploadInternalCodelistMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary uploadCodeListRequestPreview
 */
export const useUploadCodeListRequestPreviewHook = () => {
    const uploadCodeListRequestPreview = useCodeListRepoSwaggerClient<DiffApiCodelist>()

    return (uploadCodeListRequestPreviewBody: UploadCodeListRequestPreviewBody, params: UploadCodeListRequestPreviewParams) => {
        return uploadCodeListRequestPreview({
            url: `/codelists/codelistheaders/upload/previewrequest`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: uploadCodeListRequestPreviewBody,
            params,
        })
    }
}

export const useUploadCodeListRequestPreviewMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadCodeListRequestPreviewHook>>>,
        TError,
        { data: UploadCodeListRequestPreviewBody; params: UploadCodeListRequestPreviewParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUploadCodeListRequestPreviewHook>>>,
    TError,
    { data: UploadCodeListRequestPreviewBody; params: UploadCodeListRequestPreviewParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const uploadCodeListRequestPreview = useUploadCodeListRequestPreviewHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUploadCodeListRequestPreviewHook>>>,
        { data: UploadCodeListRequestPreviewBody; params: UploadCodeListRequestPreviewParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return uploadCodeListRequestPreview(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UploadCodeListRequestPreviewMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUploadCodeListRequestPreviewHook>>>>
export type UploadCodeListRequestPreviewMutationBody = UploadCodeListRequestPreviewBody
export type UploadCodeListRequestPreviewMutationError = unknown

/**
 * @summary uploadCodeListRequestPreview
 */
export const useUploadCodeListRequestPreview = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadCodeListRequestPreviewHook>>>,
        TError,
        { data: UploadCodeListRequestPreviewBody; params: UploadCodeListRequestPreviewParams },
        TContext
    >
}) => {
    const mutationOptions = useUploadCodeListRequestPreviewMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary uploadCodeListPreview
 */
export const useUploadCodeListPreviewHook = () => {
    const uploadCodeListPreview = useCodeListRepoSwaggerClient<DiffApiCodelist>()

    return (uploadCodeListPreviewBody: UploadCodeListPreviewBody, params: UploadCodeListPreviewParams) => {
        return uploadCodeListPreview({
            url: `/codelists/codelistheaders/upload/preview`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: uploadCodeListPreviewBody,
            params,
        })
    }
}

export const useUploadCodeListPreviewMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadCodeListPreviewHook>>>,
        TError,
        { data: UploadCodeListPreviewBody; params: UploadCodeListPreviewParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUploadCodeListPreviewHook>>>,
    TError,
    { data: UploadCodeListPreviewBody; params: UploadCodeListPreviewParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const uploadCodeListPreview = useUploadCodeListPreviewHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUploadCodeListPreviewHook>>>,
        { data: UploadCodeListPreviewBody; params: UploadCodeListPreviewParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return uploadCodeListPreview(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UploadCodeListPreviewMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUploadCodeListPreviewHook>>>>
export type UploadCodeListPreviewMutationBody = UploadCodeListPreviewBody
export type UploadCodeListPreviewMutationError = unknown

/**
 * @summary uploadCodeListPreview
 */
export const useUploadCodeListPreview = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUploadCodeListPreviewHook>>>,
        TError,
        { data: UploadCodeListPreviewBody; params: UploadCodeListPreviewParams },
        TContext
    >
}) => {
    const mutationOptions = useUploadCodeListPreviewMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetCodeListByRefIdHook = () => {
    const getCodeListByRefId = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (params: GetCodeListByRefIdParams, signal?: AbortSignal) => {
        return getCodeListByRefId({ url: `/codelists/codelistheaders/readByRefID`, method: 'get', params, signal })
    }
}

export const getGetCodeListByRefIdQueryKey = (params: GetCodeListByRefIdParams) =>
    [`/codelists/codelistheaders/readByRefID`, ...(params ? [params] : [])] as const

export const useGetCodeListByRefIdQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>, TError = unknown>(
    params: GetCodeListByRefIdParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodeListByRefIdQueryKey(params)

    const getCodeListByRefId = useGetCodeListByRefIdHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>> = ({ signal }) =>
        getCodeListByRefId(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetCodeListByRefIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>>
export type GetCodeListByRefIdQueryError = unknown

export const useGetCodeListByRefId = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>, TError = unknown>(
    params: GetCodeListByRefIdParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodeListByRefIdHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodeListByRefIdQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary postCodeListByRefId
 */
export const usePostCodeListByRefIdHook = () => {
    const postCodeListByRefId = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (postCodeListByRefIdBody: string) => {
        return postCodeListByRefId({
            url: `/codelists/codelistheaders/readByRefID`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: postCodeListByRefIdBody,
        })
    }
}

export const usePostCodeListByRefIdMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostCodeListByRefIdHook>>>, TError, { data: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostCodeListByRefIdHook>>>, TError, { data: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const postCodeListByRefId = usePostCodeListByRefIdHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostCodeListByRefIdHook>>>, { data: string }> = (props) => {
        const { data } = props ?? {}

        return postCodeListByRefId(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type PostCodeListByRefIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostCodeListByRefIdHook>>>>
export type PostCodeListByRefIdMutationBody = string
export type PostCodeListByRefIdMutationError = unknown

/**
 * @summary postCodeListByRefId
 */
export const usePostCodeListByRefId = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostCodeListByRefIdHook>>>, TError, { data: string }, TContext>
}) => {
    const mutationOptions = usePostCodeListByRefIdMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetFirstNotUsedCodeHook = () => {
    const getFirstNotUsedCode = useCodeListRepoSwaggerClient<GetFirstNotUsedCode200>()

    return (signal?: AbortSignal) => {
        return getFirstNotUsedCode({ url: `/codelists/firstNotUsedCode`, method: 'get', signal })
    }
}

export const getGetFirstNotUsedCodeQueryKey = () => [`/codelists/firstNotUsedCode`] as const

export const useGetFirstNotUsedCodeQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>,
    TError = unknown,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetFirstNotUsedCodeQueryKey()

    const getFirstNotUsedCode = useGetFirstNotUsedCodeHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>> = ({ signal }) => getFirstNotUsedCode(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetFirstNotUsedCodeQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>>
export type GetFirstNotUsedCodeQueryError = unknown

export const useGetFirstNotUsedCode = <TData = Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFirstNotUsedCodeHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetFirstNotUsedCodeQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistRequestDetailHook = () => {
    const getCodelistRequestDetail = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (codelistId: number, signal?: AbortSignal) => {
        return getCodelistRequestDetail({ url: `/codelists/codelistrequests/${codelistId}`, method: 'get', signal })
    }
}

export const getGetCodelistRequestDetailQueryKey = (codelistId: number) => [`/codelists/codelistrequests/${codelistId}`] as const

export const useGetCodelistRequestDetailQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>,
    TError = unknown,
>(
    codelistId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistRequestDetailQueryKey(codelistId)

    const getCodelistRequestDetail = useGetCodelistRequestDetailHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>> = ({ signal }) =>
        getCodelistRequestDetail(codelistId, signal)

    return { queryKey, queryFn, enabled: !!codelistId, ...queryOptions }
}

export type GetCodelistRequestDetailQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>>
export type GetCodelistRequestDetailQueryError = unknown

export const useGetCodelistRequestDetail = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>, TError = unknown>(
    codelistId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistRequestDetailQueryOptions(codelistId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistRequestDetailStateISVSProcessingHook = () => {
    const getCodelistRequestDetailStateISVSProcessing = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (params: GetCodelistRequestDetailStateISVSProcessingParams, signal?: AbortSignal) => {
        return getCodelistRequestDetailStateISVSProcessing({ url: `/codelists/codelistrequests/detail`, method: 'get', params, signal })
    }
}

export const getGetCodelistRequestDetailStateISVSProcessingQueryKey = (params: GetCodelistRequestDetailStateISVSProcessingParams) =>
    [`/codelists/codelistrequests/detail`, ...(params ? [params] : [])] as const

export const useGetCodelistRequestDetailStateISVSProcessingQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>,
    TError = unknown,
>(
    params: GetCodelistRequestDetailStateISVSProcessingParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistRequestDetailStateISVSProcessingQueryKey(params)

    const getCodelistRequestDetailStateISVSProcessing = useGetCodelistRequestDetailStateISVSProcessingHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>> = ({ signal }) =>
        getCodelistRequestDetailStateISVSProcessing(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetCodelistRequestDetailStateISVSProcessingQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>
>
export type GetCodelistRequestDetailStateISVSProcessingQueryError = unknown

export const useGetCodelistRequestDetailStateISVSProcessing = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>,
    TError = unknown,
>(
    params: GetCodelistRequestDetailStateISVSProcessingParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestDetailStateISVSProcessingHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistRequestDetailStateISVSProcessingQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistItemHook = () => {
    const getCodelistItem = useCodeListRepoSwaggerClient<ApiCodelistItem>()

    return (codelistItemId: number, signal?: AbortSignal) => {
        return getCodelistItem({ url: `/codelists/codelistitems/${codelistItemId}`, method: 'get', signal })
    }
}

export const getGetCodelistItemQueryKey = (codelistItemId: number) => [`/codelists/codelistitems/${codelistItemId}`] as const

export const useGetCodelistItemQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>, TError = unknown>(
    codelistItemId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistItemQueryKey(codelistItemId)

    const getCodelistItem = useGetCodelistItemHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>> = ({ signal }) =>
        getCodelistItem(codelistItemId, signal)

    return { queryKey, queryFn, enabled: !!codelistItemId, ...queryOptions }
}

export type GetCodelistItemQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>>
export type GetCodelistItemQueryError = unknown

export const useGetCodelistItem = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>, TError = unknown>(
    codelistItemId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistItemHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistItemQueryOptions(codelistItemId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistHeadersHook = () => {
    const getCodelistHeaders = useCodeListRepoSwaggerClient<ApiCodelistPreviewList>()

    return (params: GetCodelistHeadersParams, signal?: AbortSignal) => {
        return getCodelistHeaders({ url: `/codelists/codelistheaders`, method: 'get', params, signal })
    }
}

export const getGetCodelistHeadersQueryKey = (params: GetCodelistHeadersParams) =>
    [`/codelists/codelistheaders`, ...(params ? [params] : [])] as const

export const useGetCodelistHeadersQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>, TError = unknown>(
    params: GetCodelistHeadersParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistHeadersQueryKey(params)

    const getCodelistHeaders = useGetCodelistHeadersHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>> = ({ signal }) =>
        getCodelistHeaders(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetCodelistHeadersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>>
export type GetCodelistHeadersQueryError = unknown

export const useGetCodelistHeaders = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>, TError = unknown>(
    params: GetCodelistHeadersParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeadersHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistHeadersQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetTemporalCodelistHeaderWithLockHook = () => {
    const getTemporalCodelistHeaderWithLock = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (code: string, signal?: AbortSignal) => {
        return getTemporalCodelistHeaderWithLock({ url: `/codelists/codelistheaders/${code}/temporalWithLock`, method: 'get', signal })
    }
}

export const getGetTemporalCodelistHeaderWithLockQueryKey = (code: string) => [`/codelists/codelistheaders/${code}/temporalWithLock`] as const

export const useGetTemporalCodelistHeaderWithLockQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>,
    TError = unknown,
>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTemporalCodelistHeaderWithLockQueryKey(code)

    const getTemporalCodelistHeaderWithLock = useGetTemporalCodelistHeaderWithLockHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>> = ({ signal }) =>
        getTemporalCodelistHeaderWithLock(code, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type GetTemporalCodelistHeaderWithLockQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>
>
export type GetTemporalCodelistHeaderWithLockQueryError = unknown

export const useGetTemporalCodelistHeaderWithLock = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>,
    TError = unknown,
>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistHeaderWithLockHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTemporalCodelistHeaderWithLockQueryOptions(code, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetUnlockTemporalCodelistHeaderHook = () => {
    const getUnlockTemporalCodelistHeader = useCodeListRepoSwaggerClient<GetUnlockTemporalCodelistHeader200>()

    return (code: string) => {
        return getUnlockTemporalCodelistHeader({ url: `/codelists/codelistheaders/${code}/temporalWithLock`, method: 'delete' })
    }
}

export const useGetUnlockTemporalCodelistHeaderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetUnlockTemporalCodelistHeaderHook>>>, TError, { code: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetUnlockTemporalCodelistHeaderHook>>>, TError, { code: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getUnlockTemporalCodelistHeader = useGetUnlockTemporalCodelistHeaderHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetUnlockTemporalCodelistHeaderHook>>>, { code: string }> = (
        props,
    ) => {
        const { code } = props ?? {}

        return getUnlockTemporalCodelistHeader(code)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetUnlockTemporalCodelistHeaderMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetUnlockTemporalCodelistHeaderHook>>>
>

export type GetUnlockTemporalCodelistHeaderMutationError = unknown

export const useGetUnlockTemporalCodelistHeader = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetUnlockTemporalCodelistHeaderHook>>>, TError, { code: string }, TContext>
}) => {
    const mutationOptions = useGetUnlockTemporalCodelistHeaderMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExistTemporalCodelistHeaderHook = () => {
    const existTemporalCodelistHeader = useCodeListRepoSwaggerClient<ExistTemporalCodelistHeader200>()

    return (code: string, signal?: AbortSignal) => {
        return existTemporalCodelistHeader({ url: `/codelists/codelistheaders/${code}/temporal/exist`, method: 'get', signal })
    }
}

export const getExistTemporalCodelistHeaderQueryKey = (code: string) => [`/codelists/codelistheaders/${code}/temporal/exist`] as const

export const useExistTemporalCodelistHeaderQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>,
    TError = unknown,
>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExistTemporalCodelistHeaderQueryKey(code)

    const existTemporalCodelistHeader = useExistTemporalCodelistHeaderHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>> = ({ signal }) =>
        existTemporalCodelistHeader(code, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type ExistTemporalCodelistHeaderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>>
export type ExistTemporalCodelistHeaderQueryError = unknown

export const useExistTemporalCodelistHeader = <TData = Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>, TError = unknown>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistHeaderHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExistTemporalCodelistHeaderQueryOptions(code, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetOriginalCodelistHeaderHook = () => {
    const getOriginalCodelistHeader = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (code: string, signal?: AbortSignal) => {
        return getOriginalCodelistHeader({ url: `/codelists/codelistheaders/${code}/original`, method: 'get', signal })
    }
}

export const getGetOriginalCodelistHeaderQueryKey = (code: string) => [`/codelists/codelistheaders/${code}/original`] as const

export const useGetOriginalCodelistHeaderQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>,
    TError = unknown,
>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetOriginalCodelistHeaderQueryKey(code)

    const getOriginalCodelistHeader = useGetOriginalCodelistHeaderHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>> = ({ signal }) =>
        getOriginalCodelistHeader(code, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type GetOriginalCodelistHeaderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>>
export type GetOriginalCodelistHeaderQueryError = unknown

export const useGetOriginalCodelistHeader = <TData = Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>, TError = unknown>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistHeaderHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetOriginalCodelistHeaderQueryOptions(code, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistHistoryHook = () => {
    const getCodelistHistory = useCodeListRepoSwaggerClient<ApiCodelistHistoriesList>()

    return (code: string, params?: GetCodelistHistoryParams, signal?: AbortSignal) => {
        return getCodelistHistory({ url: `/codelists/codelistheaders/${code}/history`, method: 'get', params, signal })
    }
}

export const getGetCodelistHistoryQueryKey = (code: string, params?: GetCodelistHistoryParams) =>
    [`/codelists/codelistheaders/${code}/history`, ...(params ? [params] : [])] as const

export const useGetCodelistHistoryQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>, TError = unknown>(
    code: string,
    params?: GetCodelistHistoryParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistHistoryQueryKey(code, params)

    const getCodelistHistory = useGetCodelistHistoryHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>> = ({ signal }) =>
        getCodelistHistory(code, params, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type GetCodelistHistoryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>>
export type GetCodelistHistoryQueryError = unknown

export const useGetCodelistHistory = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>, TError = unknown>(
    code: string,
    params?: GetCodelistHistoryParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHistoryHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistHistoryQueryOptions(code, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistActionsHistoryHook = () => {
    const getCodelistActionsHistory = useCodeListRepoSwaggerClient<string[]>()

    return (code: string, type: string, signal?: AbortSignal) => {
        return getCodelistActionsHistory({ url: `/codelists/codelistheaders/${code}/history/list/${type}`, method: 'get', signal })
    }
}

export const getGetCodelistActionsHistoryQueryKey = (code: string, type: string) =>
    [`/codelists/codelistheaders/${code}/history/list/${type}`] as const

export const useGetCodelistActionsHistoryQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>,
    TError = unknown,
>(
    code: string,
    type: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistActionsHistoryQueryKey(code, type)

    const getCodelistActionsHistory = useGetCodelistActionsHistoryHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>> = ({ signal }) =>
        getCodelistActionsHistory(code, type, signal)

    return { queryKey, queryFn, enabled: !!(code && type), ...queryOptions }
}

export type GetCodelistActionsHistoryQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>>
export type GetCodelistActionsHistoryQueryError = unknown

export const useGetCodelistActionsHistory = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>, TError = unknown>(
    code: string,
    type: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistActionsHistoryHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistActionsHistoryQueryOptions(code, type, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useDownloadInternalCodelistRequestHook = () => {
    const downloadInternalCodelistRequest = useCodeListRepoSwaggerClient<Blob>()

    return (code: string, params?: DownloadInternalCodelistRequestParams, signal?: AbortSignal) => {
        return downloadInternalCodelistRequest({
            url: `/codelists/codelistheaders/${code}/downloadrequest`,
            method: 'get',
            params,
            responseType: 'blob',
            signal,
        })
    }
}

export const getDownloadInternalCodelistRequestQueryKey = (code: string, params?: DownloadInternalCodelistRequestParams) =>
    [`/codelists/codelistheaders/${code}/downloadrequest`, ...(params ? [params] : [])] as const

export const useDownloadInternalCodelistRequestQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>,
    TError = unknown,
>(
    code: string,
    params?: DownloadInternalCodelistRequestParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getDownloadInternalCodelistRequestQueryKey(code, params)

    const downloadInternalCodelistRequest = useDownloadInternalCodelistRequestHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>> = ({ signal }) =>
        downloadInternalCodelistRequest(code, params, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type DownloadInternalCodelistRequestQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>>
export type DownloadInternalCodelistRequestQueryError = unknown

export const useDownloadInternalCodelistRequest = <
    TData = Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>,
    TError = unknown,
>(
    code: string,
    params?: DownloadInternalCodelistRequestParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistRequestHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useDownloadInternalCodelistRequestQueryOptions(code, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useDownloadExternalCodelistHook = () => {
    const downloadExternalCodelist = useCodeListRepoSwaggerClient<DownloadExternalCodelist200>()

    return (code: string, signal?: AbortSignal) => {
        return downloadExternalCodelist({ url: `/codelists/codelistheaders/${code}/downloadexternal`, method: 'get', signal })
    }
}

export const getDownloadExternalCodelistQueryKey = (code: string) => [`/codelists/codelistheaders/${code}/downloadexternal`] as const

export const useDownloadExternalCodelistQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>,
    TError = unknown,
>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getDownloadExternalCodelistQueryKey(code)

    const downloadExternalCodelist = useDownloadExternalCodelistHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>> = ({ signal }) =>
        downloadExternalCodelist(code, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type DownloadExternalCodelistQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>>
export type DownloadExternalCodelistQueryError = unknown

export const useDownloadExternalCodelist = <TData = Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>, TError = unknown>(
    code: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadExternalCodelistHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useDownloadExternalCodelistQueryOptions(code, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useDownloadInternalCodelistHook = () => {
    const downloadInternalCodelist = useCodeListRepoSwaggerClient<Blob>()

    return (code: string, params?: DownloadInternalCodelistParams, signal?: AbortSignal) => {
        return downloadInternalCodelist({ url: `/codelists/codelistheaders/${code}/download`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getDownloadInternalCodelistQueryKey = (code: string, params?: DownloadInternalCodelistParams) =>
    [`/codelists/codelistheaders/${code}/download`, ...(params ? [params] : [])] as const

export const useDownloadInternalCodelistQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>,
    TError = unknown,
>(
    code: string,
    params?: DownloadInternalCodelistParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getDownloadInternalCodelistQueryKey(code, params)

    const downloadInternalCodelist = useDownloadInternalCodelistHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>> = ({ signal }) =>
        downloadInternalCodelist(code, params, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type DownloadInternalCodelistQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>>
export type DownloadInternalCodelistQueryError = unknown

export const useDownloadInternalCodelist = <TData = Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>, TError = unknown>(
    code: string,
    params?: DownloadInternalCodelistParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useDownloadInternalCodelistHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useDownloadInternalCodelistQueryOptions(code, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistRequestItemsHook = () => {
    const getCodelistRequestItems = useCodeListRepoSwaggerClient<ApiCodelistItemList>()

    return (code: number, params: GetCodelistRequestItemsParams, signal?: AbortSignal) => {
        return getCodelistRequestItems({ url: `/codelists/codelistheaders/${code}/codelistrequestitems`, method: 'get', params, signal })
    }
}

export const getGetCodelistRequestItemsQueryKey = (code: number, params: GetCodelistRequestItemsParams) =>
    [`/codelists/codelistheaders/${code}/codelistrequestitems`, ...(params ? [params] : [])] as const

export const useGetCodelistRequestItemsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>,
    TError = unknown,
>(
    code: number,
    params: GetCodelistRequestItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistRequestItemsQueryKey(code, params)

    const getCodelistRequestItems = useGetCodelistRequestItemsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>> = ({ signal }) =>
        getCodelistRequestItems(code, params, signal)

    return { queryKey, queryFn, enabled: !!code, ...queryOptions }
}

export type GetCodelistRequestItemsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>>
export type GetCodelistRequestItemsQueryError = unknown

export const useGetCodelistRequestItems = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>, TError = unknown>(
    code: number,
    params: GetCodelistRequestItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistRequestItemsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistRequestItemsQueryOptions(code, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetTemporalCodelistItemWithLockHook = () => {
    const getTemporalCodelistItemWithLock = useCodeListRepoSwaggerClient<ApiCodelistItem>()

    return (code: string, itemCode: string, signal?: AbortSignal) => {
        return getTemporalCodelistItemWithLock({
            url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporalWithLock`,
            method: 'get',
            signal,
        })
    }
}

export const getGetTemporalCodelistItemWithLockQueryKey = (code: string, itemCode: string) =>
    [`/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporalWithLock`] as const

export const useGetTemporalCodelistItemWithLockQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>,
    TError = unknown,
>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetTemporalCodelistItemWithLockQueryKey(code, itemCode)

    const getTemporalCodelistItemWithLock = useGetTemporalCodelistItemWithLockHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>> = ({ signal }) =>
        getTemporalCodelistItemWithLock(code, itemCode, signal)

    return { queryKey, queryFn, enabled: !!(code && itemCode), ...queryOptions }
}

export type GetTemporalCodelistItemWithLockQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>>
export type GetTemporalCodelistItemWithLockQueryError = unknown

export const useGetTemporalCodelistItemWithLock = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>,
    TError = unknown,
>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetTemporalCodelistItemWithLockHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetTemporalCodelistItemWithLockQueryOptions(code, itemCode, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUnlockTemporalCodelistItemHook = () => {
    const unlockTemporalCodelistItem = useCodeListRepoSwaggerClient<UnlockTemporalCodelistItem200>()

    return (code: string, itemCode: string) => {
        return unlockTemporalCodelistItem({ url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporalWithLock`, method: 'delete' })
    }
}

export const useUnlockTemporalCodelistItemMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUnlockTemporalCodelistItemHook>>>,
        TError,
        { code: string; itemCode: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUnlockTemporalCodelistItemHook>>>,
    TError,
    { code: string; itemCode: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const unlockTemporalCodelistItem = useUnlockTemporalCodelistItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUnlockTemporalCodelistItemHook>>>,
        { code: string; itemCode: string }
    > = (props) => {
        const { code, itemCode } = props ?? {}

        return unlockTemporalCodelistItem(code, itemCode)
    }

    return { mutationFn, ...mutationOptions }
}

export type UnlockTemporalCodelistItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUnlockTemporalCodelistItemHook>>>>

export type UnlockTemporalCodelistItemMutationError = unknown

export const useUnlockTemporalCodelistItem = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUnlockTemporalCodelistItemHook>>>,
        TError,
        { code: string; itemCode: string },
        TContext
    >
}) => {
    const mutationOptions = useUnlockTemporalCodelistItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExistTemporalCodelistItemHook = () => {
    const existTemporalCodelistItem = useCodeListRepoSwaggerClient<ExistTemporalCodelistItem200>()

    return (code: string, itemCode: string, signal?: AbortSignal) => {
        return existTemporalCodelistItem({
            url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporal/exist`,
            method: 'get',
            signal,
        })
    }
}

export const getExistTemporalCodelistItemQueryKey = (code: string, itemCode: string) =>
    [`/codelists/codelistheaders/${code}/codelistitems/${itemCode}/temporal/exist`] as const

export const useExistTemporalCodelistItemQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>,
    TError = unknown,
>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExistTemporalCodelistItemQueryKey(code, itemCode)

    const existTemporalCodelistItem = useExistTemporalCodelistItemHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>> = ({ signal }) =>
        existTemporalCodelistItem(code, itemCode, signal)

    return { queryKey, queryFn, enabled: !!(code && itemCode), ...queryOptions }
}

export type ExistTemporalCodelistItemQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>>
export type ExistTemporalCodelistItemQueryError = unknown

export const useExistTemporalCodelistItem = <TData = Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>, TError = unknown>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExistTemporalCodelistItemHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExistTemporalCodelistItemQueryOptions(code, itemCode, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetOriginalCodelistItemHook = () => {
    const getOriginalCodelistItem = useCodeListRepoSwaggerClient<ApiCodelistItem>()

    return (code: string, itemCode: string, signal?: AbortSignal) => {
        return getOriginalCodelistItem({ url: `/codelists/codelistheaders/${code}/codelistitems/${itemCode}/original`, method: 'get', signal })
    }
}

export const getGetOriginalCodelistItemQueryKey = (code: string, itemCode: string) =>
    [`/codelists/codelistheaders/${code}/codelistitems/${itemCode}/original`] as const

export const useGetOriginalCodelistItemQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>,
    TError = unknown,
>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetOriginalCodelistItemQueryKey(code, itemCode)

    const getOriginalCodelistItem = useGetOriginalCodelistItemHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>> = ({ signal }) =>
        getOriginalCodelistItem(code, itemCode, signal)

    return { queryKey, queryFn, enabled: !!(code && itemCode), ...queryOptions }
}

export type GetOriginalCodelistItemQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>>
export type GetOriginalCodelistItemQueryError = unknown

export const useGetOriginalCodelistItem = <TData = Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>, TError = unknown>(
    code: string,
    itemCode: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOriginalCodelistItemHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetOriginalCodelistItemQueryOptions(code, itemCode, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistHeaderHook = () => {
    const getCodelistHeader = useCodeListRepoSwaggerClient<ApiCodelistPreview>()

    return (codelistId: number, signal?: AbortSignal) => {
        return getCodelistHeader({ url: `/codelists/codelistheaders/${codelistId}`, method: 'get', signal })
    }
}

export const getGetCodelistHeaderQueryKey = (codelistId: number) => [`/codelists/codelistheaders/${codelistId}`] as const

export const useGetCodelistHeaderQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>, TError = unknown>(
    codelistId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistHeaderQueryKey(codelistId)

    const getCodelistHeader = useGetCodelistHeaderHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>> = ({ signal }) =>
        getCodelistHeader(codelistId, signal)

    return { queryKey, queryFn, enabled: !!codelistId, ...queryOptions }
}

export type GetCodelistHeaderQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>>
export type GetCodelistHeaderQueryError = unknown

export const useGetCodelistHeader = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>, TError = unknown>(
    codelistId: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistHeaderHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistHeaderQueryOptions(codelistId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetCodelistGraphDataHook = () => {
    const getCodelistGraphData = useCodeListRepoSwaggerClient<ApiCodelistGraphData>()

    return (graphUuid: string, signal?: AbortSignal) => {
        return getCodelistGraphData({ url: `/codelists/codelistgraphdata/${graphUuid}`, method: 'get', signal })
    }
}

export const getGetCodelistGraphDataQueryKey = (graphUuid: string) => [`/codelists/codelistgraphdata/${graphUuid}`] as const

export const useGetCodelistGraphDataQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>, TError = unknown>(
    graphUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCodelistGraphDataQueryKey(graphUuid)

    const getCodelistGraphData = useGetCodelistGraphDataHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>> = ({ signal }) =>
        getCodelistGraphData(graphUuid, signal)

    return { queryKey, queryFn, enabled: !!graphUuid, ...queryOptions }
}

export type GetCodelistGraphDataQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>>
export type GetCodelistGraphDataQueryError = unknown

export const useGetCodelistGraphData = <TData = Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>, TError = unknown>(
    graphUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCodelistGraphDataHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCodelistGraphDataQueryOptions(graphUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

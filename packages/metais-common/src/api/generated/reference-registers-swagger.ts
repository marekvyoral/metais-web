//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Reference Registers
 * OpenAPI spec version: latest
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useReferenceRegistersSwaggerClient } from '../hooks/useReferenceRegistersSwaggerClient'
export type GetReferenceRegisterItemSubGroupsParams = {
    pattern?: string
}

export type GetReferenceRegisterItemGroupsParams = {
    pattern?: string
}

export type CreateReferenceRegister1200 = { [key: string]: any }

export type GetFOPReferenceRegisters1Muk = (typeof GetFOPReferenceRegisters1Muk)[keyof typeof GetFOPReferenceRegisters1Muk]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFOPReferenceRegisters1Muk = {
    NONE: 'NONE',
    BOTH: 'BOTH',
    MV: 'MV',
    MF: 'MF',
} as const

export type GetFOPReferenceRegisters1State = (typeof GetFOPReferenceRegisters1State)[keyof typeof GetFOPReferenceRegisters1State]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetFOPReferenceRegisters1State = {
    IN_CONSTRUCTION: 'IN_CONSTRUCTION',
    READY_TO_APPROVAL: 'READY_TO_APPROVAL',
    APPROVAL_IN_PROGRESS: 'APPROVAL_IN_PROGRESS',
    MPK_IN_PROGRESS: 'MPK_IN_PROGRESS',
    PUBLISHED: 'PUBLISHED',
    REJECTED: 'REJECTED',
} as const

export type GetFOPReferenceRegisters1Params = {
    pageNumber: number
    perPage: number
    sortBy?: string
    ascending?: boolean
    isvsUuid?: string
    managerUuid?: string
    registratorUuid?: string
    state?: GetFOPReferenceRegisters1State
    muk?: GetFOPReferenceRegisters1Muk
    name?: string
    name_en?: string
}

export type CreateAccessEvidenceItem200 = { [key: string]: any }

export type GetFOPAccessEvidenceItemsParams = {
    pageNumber: number
    perPage: number
    sortBy?: string
    ascending?: boolean
}

export type CreateReferenceRegisterItem200 = { [key: string]: any }

export type GetFOPReferenceRegisterItemsParams = {
    pageNumber: number
    perPage: number
    sortBy?: string
    ascending?: boolean
}

export type CreateUsingEvidenceItem200 = { [key: string]: any }

export type GetFOPUsingEvidenceItemsParams = {
    pageNumber: number
    perPage: number
    sortBy?: string
    ascending?: boolean
}

export type UpdateReferenceRegisterAccessData200 = { [key: string]: any }

export type DeleteAccessEvidenceItem200 = { [key: string]: any }

export type UpdateAccessEvidenceItem200 = { [key: string]: any }

export type UpdateReferenceRegisterContact200 = { [key: string]: any }

export type DeleteReferenceRegisterItem200 = { [key: string]: any }

export type UpdateReferenceRegisterItem200 = { [key: string]: any }

export type UpdateReferenceRegisterNote200 = { [key: string]: any }

export type DeleteUsingEvidenceItem200 = { [key: string]: any }

export type UpdateUsingEvidenceItem200 = { [key: string]: any }

export type ProcessRequestAction200 = { [key: string]: any }

export type DeleteReferenceRegister200 = { [key: string]: any }

export type UpdateReferenceRegister200 = { [key: string]: any }

export interface ApiReferenceRegisterList {
    referenceRegistersCount?: number
    referenceRegistersList?: ApiReferenceRegister[]
}

export type MetadataStatus = (typeof MetadataStatus)[keyof typeof MetadataStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetadataStatus = {
    CREATED: 'CREATED',
    UPDATED: 'UPDATED',
    REMOVED: 'REMOVED',
} as const

export interface Metadata {
    uuid?: string
    status?: MetadataStatus
    version?: string
    mimeType?: string
    encoding?: string
    filename?: string
    contentLength?: number
    created?: string
    createdBy?: string
    lastModified?: string
    lastModifiedBy?: string
}

export interface ApiCountResult {
    count?: number
}

export interface ApiReferenceRegisterItemList {
    apiReferenceRegisterItemsCount?: number
    apiReferenceRegisterItems?: ApiReferenceRegisterItem[]
}

export interface ApiUsedByAsList {
    asListCount?: number
    asList?: ApiUsedByAs[]
}

export interface ApiAccessedByPo {
    uuid?: string
    poUuid?: string
    poName?: string
    note?: string
}

export interface ApiAccessedByPoList {
    poListCount?: number
    poList?: ApiAccessedByPo[]
}

export interface ApiContact {
    contactRegistratorFirstName?: string
    contactRegistratorLastName?: string
    contactRegistratorEmail?: string
    contactRegistratorPhone?: string
    contactFirstName?: string
    contactLastName?: string
    contactEmail?: string
    contactPhone?: string
}

export interface ApiReferenceRegisterItemSourceReference {
    sourceIsvsUuid?: string
    sourceIsvsName?: string
    sourceIsvsMetaisCode?: string
    sourceRegistratorUuid?: string
    sourceRegistratorName?: string
}

export interface ApiReferenceRegisterItemGroup {
    uuid?: string
    groupName?: string
}

export interface ApiReferenceRegisterItem {
    uuid?: string
    itemName?: string
    note?: string
    refID?: string
    dataElementRefID?: string
    subjectIdentification?: string
    sourceReferenceHolders?: ApiReferenceRegisterItemSourceReference[]
    referenceRegisterGroup?: ApiReferenceRegisterItemGroup
    referenceRegisterSubGroup?: ApiReferenceRegisterItemGroup
    order?: string
}

export interface ApiDescription {
    description?: string
}

export interface ApiUsedByAs {
    uuid?: string
    asUuid?: string
    asName?: string
    asCode?: string
    asManagesName?: string
    note?: string
}

export type ApiChangeStateTargetState = (typeof ApiChangeStateTargetState)[keyof typeof ApiChangeStateTargetState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiChangeStateTargetState = {
    IN_CONSTRUCTION: 'IN_CONSTRUCTION',
    READY_TO_APPROVAL: 'READY_TO_APPROVAL',
    APPROVAL_IN_PROGRESS: 'APPROVAL_IN_PROGRESS',
    MPK_IN_PROGRESS: 'MPK_IN_PROGRESS',
    PUBLISHED: 'PUBLISHED',
    REJECTED: 'REJECTED',
} as const

export interface ApiChangeState {
    targetState?: ApiChangeStateTargetState
    description?: string
    attachementIds?: string[]
}

export type ApiReferenceRegisterMuk = (typeof ApiReferenceRegisterMuk)[keyof typeof ApiReferenceRegisterMuk]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiReferenceRegisterMuk = {
    NONE: 'NONE',
    BOTH: 'BOTH',
    MV: 'MV',
    MF: 'MF',
} as const

export type ApiReferenceRegisterState = (typeof ApiReferenceRegisterState)[keyof typeof ApiReferenceRegisterState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiReferenceRegisterState = {
    IN_CONSTRUCTION: 'IN_CONSTRUCTION',
    READY_TO_APPROVAL: 'READY_TO_APPROVAL',
    APPROVAL_IN_PROGRESS: 'APPROVAL_IN_PROGRESS',
    MPK_IN_PROGRESS: 'MPK_IN_PROGRESS',
    PUBLISHED: 'PUBLISHED',
    REJECTED: 'REJECTED',
} as const

export interface ApiReferenceRegister {
    uuid?: string
    creatorUuid?: string
    isvsUuid?: string
    isvsName?: string
    isvsCode?: string
    isvsRefId?: string
    managerUuid?: string
    managerName?: string
    registratorUuid?: string
    registratorName?: string
    effectiveFrom?: string
    effectiveTo?: string
    additionalData?: string
    state?: ApiReferenceRegisterState
    muk?: ApiReferenceRegisterMuk
    note?: string
    name?: string
    name_en?: string
    contactFirstName?: string
    contactLastName?: string
    contactEmail?: string
    contactPhone?: string
    contactRegistratorFirstName?: string
    contactRegistratorLastName?: string
    contactRegistratorEmail?: string
    contactRegistratorPhone?: string
    validFrom?: string
    owner?: string
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useGetReferenceRegisterByUuidHook = () => {
    const getReferenceRegisterByUuid = useReferenceRegistersSwaggerClient<ApiReferenceRegister>()

    return (referenceRegisterUuid: string, signal?: AbortSignal) => {
        return getReferenceRegisterByUuid({ url: `/${referenceRegisterUuid}`, method: 'get', signal })
    }
}

export const getGetReferenceRegisterByUuidQueryKey = (referenceRegisterUuid: string) => [`/${referenceRegisterUuid}`] as const

export const useGetReferenceRegisterByUuidQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReferenceRegisterByUuidQueryKey(referenceRegisterUuid)

    const getReferenceRegisterByUuid = useGetReferenceRegisterByUuidHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>> = ({ signal }) =>
        getReferenceRegisterByUuid(referenceRegisterUuid, signal)

    return { queryKey, queryFn, enabled: !!referenceRegisterUuid, ...queryOptions }
}

export type GetReferenceRegisterByUuidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>>
export type GetReferenceRegisterByUuidQueryError = ApiError

export const useGetReferenceRegisterByUuid = <TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>, TError = ApiError>(
    referenceRegisterUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterByUuidHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReferenceRegisterByUuidQueryOptions(referenceRegisterUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUpdateReferenceRegisterHook = () => {
    const updateReferenceRegister = useReferenceRegistersSwaggerClient<UpdateReferenceRegister200>()

    return (referenceRegisterUuid: string, apiReferenceRegister: ApiReferenceRegister) => {
        return updateReferenceRegister({
            url: `/${referenceRegisterUuid}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiReferenceRegister,
        })
    }
}

export const useUpdateReferenceRegisterMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiReferenceRegister },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiReferenceRegister },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateReferenceRegister = useUpdateReferenceRegisterHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterHook>>>,
        { referenceRegisterUuid: string; data: ApiReferenceRegister }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return updateReferenceRegister(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateReferenceRegisterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterHook>>>>
export type UpdateReferenceRegisterMutationBody = ApiReferenceRegister
export type UpdateReferenceRegisterMutationError = ApiError

export const useUpdateReferenceRegister = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiReferenceRegister },
        TContext
    >
}) => {
    const mutationOptions = useUpdateReferenceRegisterMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteReferenceRegisterHook = () => {
    const deleteReferenceRegister = useReferenceRegistersSwaggerClient<DeleteReferenceRegister200>()

    return (referenceRegisterUuid: string) => {
        return deleteReferenceRegister({ url: `/${referenceRegisterUuid}`, method: 'delete' })
    }
}

export const useDeleteReferenceRegisterMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterHook>>>,
        TError,
        { referenceRegisterUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterHook>>>,
    TError,
    { referenceRegisterUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteReferenceRegister = useDeleteReferenceRegisterHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterHook>>>, { referenceRegisterUuid: string }> = (
        props,
    ) => {
        const { referenceRegisterUuid } = props ?? {}

        return deleteReferenceRegister(referenceRegisterUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteReferenceRegisterMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterHook>>>>

export type DeleteReferenceRegisterMutationError = ApiError

export const useDeleteReferenceRegister = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterHook>>>,
        TError,
        { referenceRegisterUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteReferenceRegisterMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProcessRequestActionHook = () => {
    const processRequestAction = useReferenceRegistersSwaggerClient<ProcessRequestAction200>()

    return (referenceRegisterUuid: string, apiChangeState: ApiChangeState) => {
        return processRequestAction({
            url: `/${referenceRegisterUuid}/wfaction`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiChangeState,
        })
    }
}

export const useProcessRequestActionMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiChangeState },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiChangeState },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const processRequestAction = useProcessRequestActionHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
        { referenceRegisterUuid: string; data: ApiChangeState }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return processRequestAction(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProcessRequestActionMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>>
export type ProcessRequestActionMutationBody = ApiChangeState
export type ProcessRequestActionMutationError = ApiError

export const useProcessRequestAction = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProcessRequestActionHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiChangeState },
        TContext
    >
}) => {
    const mutationOptions = useProcessRequestActionMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateUsingEvidenceItemHook = () => {
    const updateUsingEvidenceItem = useReferenceRegistersSwaggerClient<UpdateUsingEvidenceItem200>()

    return (referenceRegisterUuid: string, usingEvidenceItemUuid: string, apiUsedByAs: ApiUsedByAs) => {
        return updateUsingEvidenceItem({
            url: `/${referenceRegisterUuid}/usingevidence/${usingEvidenceItemUuid}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiUsedByAs,
        })
    }
}

export const useUpdateUsingEvidenceItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateUsingEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; usingEvidenceItemUuid: string; data: ApiUsedByAs },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateUsingEvidenceItemHook>>>,
    TError,
    { referenceRegisterUuid: string; usingEvidenceItemUuid: string; data: ApiUsedByAs },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateUsingEvidenceItem = useUpdateUsingEvidenceItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateUsingEvidenceItemHook>>>,
        { referenceRegisterUuid: string; usingEvidenceItemUuid: string; data: ApiUsedByAs }
    > = (props) => {
        const { referenceRegisterUuid, usingEvidenceItemUuid, data } = props ?? {}

        return updateUsingEvidenceItem(referenceRegisterUuid, usingEvidenceItemUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateUsingEvidenceItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateUsingEvidenceItemHook>>>>
export type UpdateUsingEvidenceItemMutationBody = ApiUsedByAs
export type UpdateUsingEvidenceItemMutationError = ApiError

export const useUpdateUsingEvidenceItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateUsingEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; usingEvidenceItemUuid: string; data: ApiUsedByAs },
        TContext
    >
}) => {
    const mutationOptions = useUpdateUsingEvidenceItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteUsingEvidenceItemHook = () => {
    const deleteUsingEvidenceItem = useReferenceRegistersSwaggerClient<DeleteUsingEvidenceItem200>()

    return (referenceRegisterUuid: string, usingEvidenceItemUuid: string) => {
        return deleteUsingEvidenceItem({ url: `/${referenceRegisterUuid}/usingevidence/${usingEvidenceItemUuid}`, method: 'delete' })
    }
}

export const useDeleteUsingEvidenceItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteUsingEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; usingEvidenceItemUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteUsingEvidenceItemHook>>>,
    TError,
    { referenceRegisterUuid: string; usingEvidenceItemUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteUsingEvidenceItem = useDeleteUsingEvidenceItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteUsingEvidenceItemHook>>>,
        { referenceRegisterUuid: string; usingEvidenceItemUuid: string }
    > = (props) => {
        const { referenceRegisterUuid, usingEvidenceItemUuid } = props ?? {}

        return deleteUsingEvidenceItem(referenceRegisterUuid, usingEvidenceItemUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteUsingEvidenceItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteUsingEvidenceItemHook>>>>

export type DeleteUsingEvidenceItemMutationError = ApiError

export const useDeleteUsingEvidenceItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteUsingEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; usingEvidenceItemUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteUsingEvidenceItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateReferenceRegisterNoteHook = () => {
    const updateReferenceRegisterNote = useReferenceRegistersSwaggerClient<UpdateReferenceRegisterNote200>()

    return (referenceRegisterUuid: string, apiDescription: ApiDescription) => {
        return updateReferenceRegisterNote({
            url: `/${referenceRegisterUuid}/note`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiDescription,
        })
    }
}

export const useUpdateReferenceRegisterNoteMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterNoteHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiDescription },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterNoteHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiDescription },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateReferenceRegisterNote = useUpdateReferenceRegisterNoteHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterNoteHook>>>,
        { referenceRegisterUuid: string; data: ApiDescription }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return updateReferenceRegisterNote(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateReferenceRegisterNoteMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterNoteHook>>>>
export type UpdateReferenceRegisterNoteMutationBody = ApiDescription
export type UpdateReferenceRegisterNoteMutationError = ApiError

export const useUpdateReferenceRegisterNote = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterNoteHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiDescription },
        TContext
    >
}) => {
    const mutationOptions = useUpdateReferenceRegisterNoteMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetReferenceRegisterItemHook = () => {
    const getReferenceRegisterItem = useReferenceRegistersSwaggerClient<ApiReferenceRegisterItem>()

    return (referenceRegisterUuid: string, referenceRegisterItemUuid: string, signal?: AbortSignal) => {
        return getReferenceRegisterItem({ url: `/${referenceRegisterUuid}/items/${referenceRegisterItemUuid}`, method: 'get', signal })
    }
}

export const getGetReferenceRegisterItemQueryKey = (referenceRegisterUuid: string, referenceRegisterItemUuid: string) =>
    [`/${referenceRegisterUuid}/items/${referenceRegisterItemUuid}`] as const

export const useGetReferenceRegisterItemQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    referenceRegisterItemUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReferenceRegisterItemQueryKey(referenceRegisterUuid, referenceRegisterItemUuid)

    const getReferenceRegisterItem = useGetReferenceRegisterItemHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>> = ({ signal }) =>
        getReferenceRegisterItem(referenceRegisterUuid, referenceRegisterItemUuid, signal)

    return { queryKey, queryFn, enabled: !!(referenceRegisterUuid && referenceRegisterItemUuid), ...queryOptions }
}

export type GetReferenceRegisterItemQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>>
export type GetReferenceRegisterItemQueryError = ApiError

export const useGetReferenceRegisterItem = <TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>, TError = ApiError>(
    referenceRegisterUuid: string,
    referenceRegisterItemUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReferenceRegisterItemQueryOptions(referenceRegisterUuid, referenceRegisterItemUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useUpdateReferenceRegisterItemHook = () => {
    const updateReferenceRegisterItem = useReferenceRegistersSwaggerClient<UpdateReferenceRegisterItem200>()

    return (referenceRegisterUuid: string, referenceRegisterItemUuid: string, apiReferenceRegisterItem: ApiReferenceRegisterItem) => {
        return updateReferenceRegisterItem({
            url: `/${referenceRegisterUuid}/items/${referenceRegisterItemUuid}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiReferenceRegisterItem,
        })
    }
}

export const useUpdateReferenceRegisterItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterItemHook>>>,
        TError,
        { referenceRegisterUuid: string; referenceRegisterItemUuid: string; data: ApiReferenceRegisterItem },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterItemHook>>>,
    TError,
    { referenceRegisterUuid: string; referenceRegisterItemUuid: string; data: ApiReferenceRegisterItem },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateReferenceRegisterItem = useUpdateReferenceRegisterItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterItemHook>>>,
        { referenceRegisterUuid: string; referenceRegisterItemUuid: string; data: ApiReferenceRegisterItem }
    > = (props) => {
        const { referenceRegisterUuid, referenceRegisterItemUuid, data } = props ?? {}

        return updateReferenceRegisterItem(referenceRegisterUuid, referenceRegisterItemUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateReferenceRegisterItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterItemHook>>>>
export type UpdateReferenceRegisterItemMutationBody = ApiReferenceRegisterItem
export type UpdateReferenceRegisterItemMutationError = ApiError

export const useUpdateReferenceRegisterItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterItemHook>>>,
        TError,
        { referenceRegisterUuid: string; referenceRegisterItemUuid: string; data: ApiReferenceRegisterItem },
        TContext
    >
}) => {
    const mutationOptions = useUpdateReferenceRegisterItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteReferenceRegisterItemHook = () => {
    const deleteReferenceRegisterItem = useReferenceRegistersSwaggerClient<DeleteReferenceRegisterItem200>()

    return (referenceRegisterUuid: string, referenceRegisterItemUuid: string) => {
        return deleteReferenceRegisterItem({ url: `/${referenceRegisterUuid}/items/${referenceRegisterItemUuid}`, method: 'delete' })
    }
}

export const useDeleteReferenceRegisterItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterItemHook>>>,
        TError,
        { referenceRegisterUuid: string; referenceRegisterItemUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterItemHook>>>,
    TError,
    { referenceRegisterUuid: string; referenceRegisterItemUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteReferenceRegisterItem = useDeleteReferenceRegisterItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterItemHook>>>,
        { referenceRegisterUuid: string; referenceRegisterItemUuid: string }
    > = (props) => {
        const { referenceRegisterUuid, referenceRegisterItemUuid } = props ?? {}

        return deleteReferenceRegisterItem(referenceRegisterUuid, referenceRegisterItemUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteReferenceRegisterItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterItemHook>>>>

export type DeleteReferenceRegisterItemMutationError = ApiError

export const useDeleteReferenceRegisterItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteReferenceRegisterItemHook>>>,
        TError,
        { referenceRegisterUuid: string; referenceRegisterItemUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteReferenceRegisterItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateReferenceRegisterContactHook = () => {
    const updateReferenceRegisterContact = useReferenceRegistersSwaggerClient<UpdateReferenceRegisterContact200>()

    return (referenceRegisterUuid: string, apiContact: ApiContact) => {
        return updateReferenceRegisterContact({
            url: `/${referenceRegisterUuid}/contact`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiContact,
        })
    }
}

export const useUpdateReferenceRegisterContactMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterContactHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiContact },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterContactHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiContact },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateReferenceRegisterContact = useUpdateReferenceRegisterContactHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterContactHook>>>,
        { referenceRegisterUuid: string; data: ApiContact }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return updateReferenceRegisterContact(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateReferenceRegisterContactMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterContactHook>>>>
export type UpdateReferenceRegisterContactMutationBody = ApiContact
export type UpdateReferenceRegisterContactMutationError = ApiError

export const useUpdateReferenceRegisterContact = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterContactHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiContact },
        TContext
    >
}) => {
    const mutationOptions = useUpdateReferenceRegisterContactMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateAccessEvidenceItemHook = () => {
    const updateAccessEvidenceItem = useReferenceRegistersSwaggerClient<UpdateAccessEvidenceItem200>()

    return (referenceRegisterUuid: string, accesEvidenceItemUuid: string, apiAccessedByPo: ApiAccessedByPo) => {
        return updateAccessEvidenceItem({
            url: `/${referenceRegisterUuid}/accessevidence/${accesEvidenceItemUuid}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiAccessedByPo,
        })
    }
}

export const useUpdateAccessEvidenceItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateAccessEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; accesEvidenceItemUuid: string; data: ApiAccessedByPo },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateAccessEvidenceItemHook>>>,
    TError,
    { referenceRegisterUuid: string; accesEvidenceItemUuid: string; data: ApiAccessedByPo },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateAccessEvidenceItem = useUpdateAccessEvidenceItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateAccessEvidenceItemHook>>>,
        { referenceRegisterUuid: string; accesEvidenceItemUuid: string; data: ApiAccessedByPo }
    > = (props) => {
        const { referenceRegisterUuid, accesEvidenceItemUuid, data } = props ?? {}

        return updateAccessEvidenceItem(referenceRegisterUuid, accesEvidenceItemUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateAccessEvidenceItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateAccessEvidenceItemHook>>>>
export type UpdateAccessEvidenceItemMutationBody = ApiAccessedByPo
export type UpdateAccessEvidenceItemMutationError = ApiError

export const useUpdateAccessEvidenceItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateAccessEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; accesEvidenceItemUuid: string; data: ApiAccessedByPo },
        TContext
    >
}) => {
    const mutationOptions = useUpdateAccessEvidenceItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteAccessEvidenceItemHook = () => {
    const deleteAccessEvidenceItem = useReferenceRegistersSwaggerClient<DeleteAccessEvidenceItem200>()

    return (referenceRegisterUuid: string, accesEvidenceItemUuid: string) => {
        return deleteAccessEvidenceItem({ url: `/${referenceRegisterUuid}/accessevidence/${accesEvidenceItemUuid}`, method: 'delete' })
    }
}

export const useDeleteAccessEvidenceItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteAccessEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; accesEvidenceItemUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteAccessEvidenceItemHook>>>,
    TError,
    { referenceRegisterUuid: string; accesEvidenceItemUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteAccessEvidenceItem = useDeleteAccessEvidenceItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteAccessEvidenceItemHook>>>,
        { referenceRegisterUuid: string; accesEvidenceItemUuid: string }
    > = (props) => {
        const { referenceRegisterUuid, accesEvidenceItemUuid } = props ?? {}

        return deleteAccessEvidenceItem(referenceRegisterUuid, accesEvidenceItemUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteAccessEvidenceItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteAccessEvidenceItemHook>>>>

export type DeleteAccessEvidenceItemMutationError = ApiError

export const useDeleteAccessEvidenceItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteAccessEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; accesEvidenceItemUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteAccessEvidenceItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateReferenceRegisterAccessDataHook = () => {
    const updateReferenceRegisterAccessData = useReferenceRegistersSwaggerClient<UpdateReferenceRegisterAccessData200>()

    return (referenceRegisterUuid: string, apiDescription: ApiDescription) => {
        return updateReferenceRegisterAccessData({
            url: `/${referenceRegisterUuid}/accessDataDescription`,
            method: 'put',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiDescription,
        })
    }
}

export const useUpdateReferenceRegisterAccessDataMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterAccessDataHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiDescription },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterAccessDataHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiDescription },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateReferenceRegisterAccessData = useUpdateReferenceRegisterAccessDataHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterAccessDataHook>>>,
        { referenceRegisterUuid: string; data: ApiDescription }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return updateReferenceRegisterAccessData(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateReferenceRegisterAccessDataMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterAccessDataHook>>>
>
export type UpdateReferenceRegisterAccessDataMutationBody = ApiDescription
export type UpdateReferenceRegisterAccessDataMutationError = ApiError

export const useUpdateReferenceRegisterAccessData = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateReferenceRegisterAccessDataHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiDescription },
        TContext
    >
}) => {
    const mutationOptions = useUpdateReferenceRegisterAccessDataMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetFOPUsingEvidenceItemsHook = () => {
    const getFOPUsingEvidenceItems = useReferenceRegistersSwaggerClient<ApiUsedByAsList>()

    return (referenceRegisterUuid: string, params: GetFOPUsingEvidenceItemsParams, signal?: AbortSignal) => {
        return getFOPUsingEvidenceItems({ url: `/${referenceRegisterUuid}/usingevidence`, method: 'get', params, signal })
    }
}

export const getGetFOPUsingEvidenceItemsQueryKey = (referenceRegisterUuid: string, params: GetFOPUsingEvidenceItemsParams) =>
    [`/${referenceRegisterUuid}/usingevidence`, ...(params ? [params] : [])] as const

export const useGetFOPUsingEvidenceItemsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    params: GetFOPUsingEvidenceItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetFOPUsingEvidenceItemsQueryKey(referenceRegisterUuid, params)

    const getFOPUsingEvidenceItems = useGetFOPUsingEvidenceItemsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>> = ({ signal }) =>
        getFOPUsingEvidenceItems(referenceRegisterUuid, params, signal)

    return { queryKey, queryFn, enabled: !!referenceRegisterUuid, ...queryOptions }
}

export type GetFOPUsingEvidenceItemsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>>
export type GetFOPUsingEvidenceItemsQueryError = ApiError

export const useGetFOPUsingEvidenceItems = <TData = Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>, TError = ApiError>(
    referenceRegisterUuid: string,
    params: GetFOPUsingEvidenceItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPUsingEvidenceItemsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetFOPUsingEvidenceItemsQueryOptions(referenceRegisterUuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCreateUsingEvidenceItemHook = () => {
    const createUsingEvidenceItem = useReferenceRegistersSwaggerClient<CreateUsingEvidenceItem200>()

    return (referenceRegisterUuid: string, apiUsedByAs: ApiUsedByAs) => {
        return createUsingEvidenceItem({
            url: `/${referenceRegisterUuid}/usingevidence`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiUsedByAs,
        })
    }
}

export const useCreateUsingEvidenceItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateUsingEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiUsedByAs },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateUsingEvidenceItemHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiUsedByAs },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const createUsingEvidenceItem = useCreateUsingEvidenceItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useCreateUsingEvidenceItemHook>>>,
        { referenceRegisterUuid: string; data: ApiUsedByAs }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return createUsingEvidenceItem(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateUsingEvidenceItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateUsingEvidenceItemHook>>>>
export type CreateUsingEvidenceItemMutationBody = ApiUsedByAs
export type CreateUsingEvidenceItemMutationError = ApiError

export const useCreateUsingEvidenceItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateUsingEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiUsedByAs },
        TContext
    >
}) => {
    const mutationOptions = useCreateUsingEvidenceItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetFOPReferenceRegisterItemsHook = () => {
    const getFOPReferenceRegisterItems = useReferenceRegistersSwaggerClient<ApiReferenceRegisterItemList>()

    return (referenceRegisterUuid: string, params: GetFOPReferenceRegisterItemsParams, signal?: AbortSignal) => {
        return getFOPReferenceRegisterItems({ url: `/${referenceRegisterUuid}/items`, method: 'get', params, signal })
    }
}

export const getGetFOPReferenceRegisterItemsQueryKey = (referenceRegisterUuid: string, params: GetFOPReferenceRegisterItemsParams) =>
    [`/${referenceRegisterUuid}/items`, ...(params ? [params] : [])] as const

export const useGetFOPReferenceRegisterItemsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    params: GetFOPReferenceRegisterItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetFOPReferenceRegisterItemsQueryKey(referenceRegisterUuid, params)

    const getFOPReferenceRegisterItems = useGetFOPReferenceRegisterItemsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>> = ({ signal }) =>
        getFOPReferenceRegisterItems(referenceRegisterUuid, params, signal)

    return { queryKey, queryFn, enabled: !!referenceRegisterUuid, ...queryOptions }
}

export type GetFOPReferenceRegisterItemsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>>
export type GetFOPReferenceRegisterItemsQueryError = ApiError

export const useGetFOPReferenceRegisterItems = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    params: GetFOPReferenceRegisterItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisterItemsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetFOPReferenceRegisterItemsQueryOptions(referenceRegisterUuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCreateReferenceRegisterItemHook = () => {
    const createReferenceRegisterItem = useReferenceRegistersSwaggerClient<CreateReferenceRegisterItem200>()

    return (referenceRegisterUuid: string, apiReferenceRegisterItem: ApiReferenceRegisterItem) => {
        return createReferenceRegisterItem({
            url: `/${referenceRegisterUuid}/items`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiReferenceRegisterItem,
        })
    }
}

export const useCreateReferenceRegisterItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegisterItemHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiReferenceRegisterItem },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegisterItemHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiReferenceRegisterItem },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const createReferenceRegisterItem = useCreateReferenceRegisterItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegisterItemHook>>>,
        { referenceRegisterUuid: string; data: ApiReferenceRegisterItem }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return createReferenceRegisterItem(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateReferenceRegisterItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegisterItemHook>>>>
export type CreateReferenceRegisterItemMutationBody = ApiReferenceRegisterItem
export type CreateReferenceRegisterItemMutationError = ApiError

export const useCreateReferenceRegisterItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegisterItemHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiReferenceRegisterItem },
        TContext
    >
}) => {
    const mutationOptions = useCreateReferenceRegisterItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetFOPAccessEvidenceItemsHook = () => {
    const getFOPAccessEvidenceItems = useReferenceRegistersSwaggerClient<ApiAccessedByPoList>()

    return (referenceRegisterUuid: string, params: GetFOPAccessEvidenceItemsParams, signal?: AbortSignal) => {
        return getFOPAccessEvidenceItems({ url: `/${referenceRegisterUuid}/accessevidence`, method: 'get', params, signal })
    }
}

export const getGetFOPAccessEvidenceItemsQueryKey = (referenceRegisterUuid: string, params: GetFOPAccessEvidenceItemsParams) =>
    [`/${referenceRegisterUuid}/accessevidence`, ...(params ? [params] : [])] as const

export const useGetFOPAccessEvidenceItemsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    params: GetFOPAccessEvidenceItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetFOPAccessEvidenceItemsQueryKey(referenceRegisterUuid, params)

    const getFOPAccessEvidenceItems = useGetFOPAccessEvidenceItemsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>> = ({ signal }) =>
        getFOPAccessEvidenceItems(referenceRegisterUuid, params, signal)

    return { queryKey, queryFn, enabled: !!referenceRegisterUuid, ...queryOptions }
}

export type GetFOPAccessEvidenceItemsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>>
export type GetFOPAccessEvidenceItemsQueryError = ApiError

export const useGetFOPAccessEvidenceItems = <TData = Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>, TError = ApiError>(
    referenceRegisterUuid: string,
    params: GetFOPAccessEvidenceItemsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPAccessEvidenceItemsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetFOPAccessEvidenceItemsQueryOptions(referenceRegisterUuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCreateAccessEvidenceItemHook = () => {
    const createAccessEvidenceItem = useReferenceRegistersSwaggerClient<CreateAccessEvidenceItem200>()

    return (referenceRegisterUuid: string, apiAccessedByPo: ApiAccessedByPo) => {
        return createAccessEvidenceItem({
            url: `/${referenceRegisterUuid}/accessevidence`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiAccessedByPo,
        })
    }
}

export const useCreateAccessEvidenceItemMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateAccessEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiAccessedByPo },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateAccessEvidenceItemHook>>>,
    TError,
    { referenceRegisterUuid: string; data: ApiAccessedByPo },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const createAccessEvidenceItem = useCreateAccessEvidenceItemHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useCreateAccessEvidenceItemHook>>>,
        { referenceRegisterUuid: string; data: ApiAccessedByPo }
    > = (props) => {
        const { referenceRegisterUuid, data } = props ?? {}

        return createAccessEvidenceItem(referenceRegisterUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateAccessEvidenceItemMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateAccessEvidenceItemHook>>>>
export type CreateAccessEvidenceItemMutationBody = ApiAccessedByPo
export type CreateAccessEvidenceItemMutationError = ApiError

export const useCreateAccessEvidenceItem = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateAccessEvidenceItemHook>>>,
        TError,
        { referenceRegisterUuid: string; data: ApiAccessedByPo },
        TContext
    >
}) => {
    const mutationOptions = useCreateAccessEvidenceItemMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetFOPReferenceRegisters1Hook = () => {
    const getFOPReferenceRegisters1 = useReferenceRegistersSwaggerClient<ApiReferenceRegisterList>()

    return (params: GetFOPReferenceRegisters1Params, signal?: AbortSignal) => {
        return getFOPReferenceRegisters1({ url: `/`, method: 'get', params, signal })
    }
}

export const getGetFOPReferenceRegisters1QueryKey = (params: GetFOPReferenceRegisters1Params) => [`/`, ...(params ? [params] : [])] as const

export const useGetFOPReferenceRegisters1QueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>,
    TError = ApiError,
>(
    params: GetFOPReferenceRegisters1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetFOPReferenceRegisters1QueryKey(params)

    const getFOPReferenceRegisters1 = useGetFOPReferenceRegisters1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>> = ({ signal }) =>
        getFOPReferenceRegisters1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetFOPReferenceRegisters1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>>
export type GetFOPReferenceRegisters1QueryError = ApiError

export const useGetFOPReferenceRegisters1 = <TData = Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>, TError = ApiError>(
    params: GetFOPReferenceRegisters1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetFOPReferenceRegisters1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetFOPReferenceRegisters1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCreateReferenceRegister1Hook = () => {
    const createReferenceRegister1 = useReferenceRegistersSwaggerClient<CreateReferenceRegister1200>()

    return (apiReferenceRegister: ApiReferenceRegister) => {
        return createReferenceRegister1({
            url: `/`,
            method: 'post',
            headers: { 'Content-Type': 'application/json;charset=UTF-8' },
            data: apiReferenceRegister,
        })
    }
}

export const useCreateReferenceRegister1MutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegister1Hook>>>,
        TError,
        { data: ApiReferenceRegister },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegister1Hook>>>, TError, { data: ApiReferenceRegister }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const createReferenceRegister1 = useCreateReferenceRegister1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegister1Hook>>>, { data: ApiReferenceRegister }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return createReferenceRegister1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateReferenceRegister1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegister1Hook>>>>
export type CreateReferenceRegister1MutationBody = ApiReferenceRegister
export type CreateReferenceRegister1MutationError = ApiError

export const useCreateReferenceRegister1 = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateReferenceRegister1Hook>>>,
        TError,
        { data: ApiReferenceRegister },
        TContext
    >
}) => {
    const mutationOptions = useCreateReferenceRegister1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetReferenceRegisterItemGroupsHook = () => {
    const getReferenceRegisterItemGroups = useReferenceRegistersSwaggerClient<ApiReferenceRegisterItemGroup[]>()

    return (referenceRegisterUuid: string, params?: GetReferenceRegisterItemGroupsParams, signal?: AbortSignal) => {
        return getReferenceRegisterItemGroups({ url: `/${referenceRegisterUuid}/itemGroups`, method: 'get', params, signal })
    }
}

export const getGetReferenceRegisterItemGroupsQueryKey = (referenceRegisterUuid: string, params?: GetReferenceRegisterItemGroupsParams) =>
    [`/${referenceRegisterUuid}/itemGroups`, ...(params ? [params] : [])] as const

export const useGetReferenceRegisterItemGroupsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    params?: GetReferenceRegisterItemGroupsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReferenceRegisterItemGroupsQueryKey(referenceRegisterUuid, params)

    const getReferenceRegisterItemGroups = useGetReferenceRegisterItemGroupsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>> = ({ signal }) =>
        getReferenceRegisterItemGroups(referenceRegisterUuid, params, signal)

    return { queryKey, queryFn, enabled: !!referenceRegisterUuid, ...queryOptions }
}

export type GetReferenceRegisterItemGroupsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>>
export type GetReferenceRegisterItemGroupsQueryError = ApiError

export const useGetReferenceRegisterItemGroups = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    params?: GetReferenceRegisterItemGroupsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReferenceRegisterItemGroupsQueryOptions(referenceRegisterUuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetReferenceRegisterItemSubGroupsHook = () => {
    const getReferenceRegisterItemSubGroups = useReferenceRegistersSwaggerClient<ApiReferenceRegisterItemGroup[]>()

    return (referenceRegisterUuid: string, itemGroupUuid: string, params?: GetReferenceRegisterItemSubGroupsParams, signal?: AbortSignal) => {
        return getReferenceRegisterItemSubGroups({
            url: `/${referenceRegisterUuid}/itemGroups/${itemGroupUuid}/subGroups`,
            method: 'get',
            params,
            signal,
        })
    }
}

export const getGetReferenceRegisterItemSubGroupsQueryKey = (
    referenceRegisterUuid: string,
    itemGroupUuid: string,
    params?: GetReferenceRegisterItemSubGroupsParams,
) => [`/${referenceRegisterUuid}/itemGroups/${itemGroupUuid}/subGroups`, ...(params ? [params] : [])] as const

export const useGetReferenceRegisterItemSubGroupsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    itemGroupUuid: string,
    params?: GetReferenceRegisterItemSubGroupsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReferenceRegisterItemSubGroupsQueryKey(referenceRegisterUuid, itemGroupUuid, params)

    const getReferenceRegisterItemSubGroups = useGetReferenceRegisterItemSubGroupsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>> = ({ signal }) =>
        getReferenceRegisterItemSubGroups(referenceRegisterUuid, itemGroupUuid, params, signal)

    return { queryKey, queryFn, enabled: !!(referenceRegisterUuid && itemGroupUuid), ...queryOptions }
}

export type GetReferenceRegisterItemSubGroupsQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>
>
export type GetReferenceRegisterItemSubGroupsQueryError = ApiError

export const useGetReferenceRegisterItemSubGroups = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    itemGroupUuid: string,
    params?: GetReferenceRegisterItemSubGroupsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReferenceRegisterItemSubGroupsQueryOptions(referenceRegisterUuid, itemGroupUuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetReferenceRegisterItemSubGroupsCountHook = () => {
    const getReferenceRegisterItemSubGroupsCount = useReferenceRegistersSwaggerClient<ApiCountResult>()

    return (itemSubGroupUuid: string, signal?: AbortSignal) => {
        return getReferenceRegisterItemSubGroupsCount({ url: `/subgroupitemscount/${itemSubGroupUuid}`, method: 'get', signal })
    }
}

export const getGetReferenceRegisterItemSubGroupsCountQueryKey = (itemSubGroupUuid: string) => [`/subgroupitemscount/${itemSubGroupUuid}`] as const

export const useGetReferenceRegisterItemSubGroupsCountQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>,
    TError = ApiError,
>(
    itemSubGroupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReferenceRegisterItemSubGroupsCountQueryKey(itemSubGroupUuid)

    const getReferenceRegisterItemSubGroupsCount = useGetReferenceRegisterItemSubGroupsCountHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>> = ({ signal }) =>
        getReferenceRegisterItemSubGroupsCount(itemSubGroupUuid, signal)

    return { queryKey, queryFn, enabled: !!itemSubGroupUuid, ...queryOptions }
}

export type GetReferenceRegisterItemSubGroupsCountQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>
>
export type GetReferenceRegisterItemSubGroupsCountQueryError = ApiError

export const useGetReferenceRegisterItemSubGroupsCount = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>,
    TError = ApiError,
>(
    itemSubGroupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemSubGroupsCountHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReferenceRegisterItemSubGroupsCountQueryOptions(itemSubGroupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGetReferenceRegisterItemGroupsCountHook = () => {
    const getReferenceRegisterItemGroupsCount = useReferenceRegistersSwaggerClient<ApiCountResult>()

    return (itemGroupUuid: string, signal?: AbortSignal) => {
        return getReferenceRegisterItemGroupsCount({ url: `/groupitemscount/${itemGroupUuid}`, method: 'get', signal })
    }
}

export const getGetReferenceRegisterItemGroupsCountQueryKey = (itemGroupUuid: string) => [`/groupitemscount/${itemGroupUuid}`] as const

export const useGetReferenceRegisterItemGroupsCountQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>,
    TError = ApiError,
>(
    itemGroupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetReferenceRegisterItemGroupsCountQueryKey(itemGroupUuid)

    const getReferenceRegisterItemGroupsCount = useGetReferenceRegisterItemGroupsCountHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>> = ({ signal }) =>
        getReferenceRegisterItemGroupsCount(itemGroupUuid, signal)

    return { queryKey, queryFn, enabled: !!itemGroupUuid, ...queryOptions }
}

export type GetReferenceRegisterItemGroupsCountQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>
>
export type GetReferenceRegisterItemGroupsCountQueryError = ApiError

export const useGetReferenceRegisterItemGroupsCount = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>,
    TError = ApiError,
>(
    itemGroupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetReferenceRegisterItemGroupsCountHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetReferenceRegisterItemGroupsCountQueryOptions(itemGroupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useGenerateReferenceRegisterByUuidHook = () => {
    const generateReferenceRegisterByUuid = useReferenceRegistersSwaggerClient<Metadata>()

    return (referenceRegisterUuid: string, signal?: AbortSignal) => {
        return generateReferenceRegisterByUuid({ url: `/generate/${referenceRegisterUuid}`, method: 'get', signal })
    }
}

export const getGenerateReferenceRegisterByUuidQueryKey = (referenceRegisterUuid: string) => [`/generate/${referenceRegisterUuid}`] as const

export const useGenerateReferenceRegisterByUuidQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGenerateReferenceRegisterByUuidQueryKey(referenceRegisterUuid)

    const generateReferenceRegisterByUuid = useGenerateReferenceRegisterByUuidHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>> = ({ signal }) =>
        generateReferenceRegisterByUuid(referenceRegisterUuid, signal)

    return { queryKey, queryFn, enabled: !!referenceRegisterUuid, ...queryOptions }
}

export type GenerateReferenceRegisterByUuidQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>>
export type GenerateReferenceRegisterByUuidQueryError = ApiError

export const useGenerateReferenceRegisterByUuid = <
    TData = Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>,
    TError = ApiError,
>(
    referenceRegisterUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGenerateReferenceRegisterByUuidHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGenerateReferenceRegisterByUuidQueryOptions(referenceRegisterUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

//@ts-nocheck
/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * MetaIS Impexp CMDB
 * Api Documentation
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useImpexpCmdbSwaggerClient } from '../hooks/useImpexpCmdbSwaggerClient'
export type ValidateContentUsingPOSTParams = {
    /**
     * poId
     */
    poId?: string
    /**
     * roleId
     */
    roleId?: string
    /**
     * type
     */
    type: string
}

export type UpdateContentUsingPOSTParams = {
    /**
     * poId
     */
    poId?: string
    /**
     * roleId
     */
    roleId?: string
}

export type ExportXmlUsingPUTParams = {
    name?: string
}

export type ExportXmlUsingGETParams = {
    name?: string
}

export type ExportRelXmlUsingPUTParams = {
    name?: string
}

export type ExportRelXmlUsingGETParams = {
    name?: string
}

export type ExportRelExcelUsingPUTParams = {
    name?: string
}

export type ExportRelExcelUsingGETParams = {
    name?: string
}

export type ExportRelCsvUsingPUTParams = {
    name?: string
}

export type ExportRelCsvUsingGETParams = {
    name?: string
}

export type ExportXmlUsingPUT2Params = {
    /**
     * intervalEnd
     */
    intervalEnd: string
    /**
     * intervalStart
     */
    intervalStart: string
    /**
     * isvs
     */
    isvs?: string
    /**
     * project
     */
    project: string
    /**
     * serviceType
     */
    serviceType: string
    /**
     * services
     */
    services?: string[]
}

export type ExportXmlUsingGET1Params = {
    /**
     * intervalEnd
     */
    intervalEnd: string
    /**
     * intervalStart
     */
    intervalStart: string
    /**
     * isvs
     */
    isvs?: string
    /**
     * project
     */
    project: string
    /**
     * serviceType
     */
    serviceType: string
    /**
     * services
     */
    services?: string[]
}

export type ExportExcelUsingPUT2Params = {
    /**
     * intervalEnd
     */
    intervalEnd: string
    /**
     * intervalStart
     */
    intervalStart: string
    /**
     * isvs
     */
    isvs?: string
    /**
     * project
     */
    project: string
    /**
     * serviceType
     */
    serviceType: string
    /**
     * services
     */
    services?: string[]
}

export type ExportExcelUsingGET1Params = {
    /**
     * intervalEnd
     */
    intervalEnd: string
    /**
     * intervalStart
     */
    intervalStart: string
    /**
     * isvs
     */
    isvs?: string
    /**
     * project
     */
    project: string
    /**
     * serviceType
     */
    serviceType: string
    /**
     * services
     */
    services?: string[]
}

export type ExportCsvUsingPUT2Params = {
    /**
     * intervalEnd
     */
    intervalEnd: string
    /**
     * intervalStart
     */
    intervalStart: string
    /**
     * isvs
     */
    isvs?: string
    /**
     * project
     */
    project: string
    /**
     * serviceType
     */
    serviceType: string
    /**
     * services
     */
    services?: string[]
}

export type ExportCsvUsingGET1Params = {
    /**
     * intervalEnd
     */
    intervalEnd: string
    /**
     * intervalStart
     */
    intervalStart: string
    /**
     * isvs
     */
    isvs?: string
    /**
     * project
     */
    project: string
    /**
     * serviceType
     */
    serviceType: string
    /**
     * services
     */
    services?: string[]
}

export type ExportXmlUsingPUT1Type = (typeof ExportXmlUsingPUT1Type)[keyof typeof ExportXmlUsingPUT1Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportXmlUsingPUT1Type = {
    COMMON: 'COMMON',
    GOALS: 'GOALS',
    KRIS: 'KRIS',
    KS: 'KS',
    ISVS: 'ISVS',
} as const

export type ExportXmlUsingPUT1Params = {
    /**
     * type
     */
    type: ExportXmlUsingPUT1Type
    /**
     * uuid
     */
    uuid: string
    /**
     * version
     */
    version: number
}

export type ExportExcelUsingPUT1Type = (typeof ExportExcelUsingPUT1Type)[keyof typeof ExportExcelUsingPUT1Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportExcelUsingPUT1Type = {
    COMMON: 'COMMON',
    GOALS: 'GOALS',
    KRIS: 'KRIS',
    KS: 'KS',
    ISVS: 'ISVS',
} as const

export type ExportExcelUsingPUT1Params = {
    /**
     * type
     */
    type: ExportExcelUsingPUT1Type
    /**
     * uuid
     */
    uuid: string
    /**
     * version
     */
    version: number
}

export type ExportCsvUsingPUT1Type = (typeof ExportCsvUsingPUT1Type)[keyof typeof ExportCsvUsingPUT1Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCsvUsingPUT1Type = {
    COMMON: 'COMMON',
    GOALS: 'GOALS',
    KRIS: 'KRIS',
    KS: 'KS',
    ISVS: 'ISVS',
} as const

export type ExportCsvUsingPUT1Params = {
    /**
     * type
     */
    type: ExportCsvUsingPUT1Type
    /**
     * uuid
     */
    uuid: string
    /**
     * version
     */
    version: number
}

export type ExportExcelUsingPUTParams = {
    name?: string
}

export type ExportExcelUsingGETParams = {
    name?: string
}

export type ExportCsvUsingPUTParams = {
    name?: string
}

export type ExportCsvUsingGETParams = {
    name?: string
}

export type UpdateContentUsingPOSTBody = {
    /** file */
    file: Blob
}

/**
 * reportExecute
 */
export type ReportExecuteBody = ReportExecute

/**
 * filter
 */
export type ExportFilterBody = ExportFilter

/**
 * filter
 */
export type CiListFilterContainerUiBody = CiListFilterContainerUi

export type UsageTypeFilterUiWhiteListItem = (typeof UsageTypeFilterUiWhiteListItem)[keyof typeof UsageTypeFilterUiWhiteListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiWhiteListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export type UsageTypeFilterUiBlackListItem = (typeof UsageTypeFilterUiBlackListItem)[keyof typeof UsageTypeFilterUiBlackListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiBlackListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export interface UsageTypeFilterUi {
    blackList?: UsageTypeFilterUiBlackListItem[]
    whiteList?: UsageTypeFilterUiWhiteListItem[]
}

export type UrlContent = { [key: string]: any }

export interface Url {
    authority?: string
    content?: UrlContent
    defaultPort?: number
    file?: string
    host?: string
    path?: string
    port?: number
    protocol?: string
    query?: string
    ref?: string
    userInfo?: string
}

export interface Uri {
    absolute?: boolean
    authority?: string
    fragment?: string
    host?: string
    opaque?: boolean
    path?: string
    port?: number
    query?: string
    rawAuthority?: string
    rawFragment?: string
    rawPath?: string
    rawQuery?: string
    rawSchemeSpecificPart?: string
    rawUserInfo?: string
    scheme?: string
    schemeSpecificPart?: string
    userInfo?: string
}

export interface RequestIdUi {
    requestId?: string
}

export type ReportExecuteParameters = { [key: string]: any }

export interface ReportExecute {
    page?: number
    parameters?: ReportExecuteParameters
    perPage?: number
}

export interface RelTypeFilterUi {
    byHierarchy?: boolean
    onlyValidRel?: boolean
    relCiUuids?: string[]
    relType?: string
}

export interface RelFilterUi {
    attributes?: FilterAttributesUi[]
    endCiTypeName?: string[]
    endCiUuid?: string[]
    fullTextSearch?: string
    metaAttributes?: FilterMetaAttributesUi
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    poUuid?: string
    searchFields?: string[]
    startCiTypeName?: string[]
    startCiUuid?: string[]
    startOrEndCiUuid?: string[]
    type?: string[]
    usageType?: string[]
    uuid?: string[]
}

export interface InputStream {
    [key: string]: any
}

export interface InputStreamResource {
    description?: string
    file?: File
    filename?: string
    inputStream?: InputStream
    open?: boolean
    readable?: boolean
    uri?: Uri
    url?: Url
}

export type ImportResultImportState = (typeof ImportResultImportState)[keyof typeof ImportResultImportState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportResultImportState = {
    STARTED: 'STARTED',
    IN_PROGRESS: 'IN_PROGRESS',
    DONE: 'DONE',
    DONE_WITH_ERRORS: 'DONE_WITH_ERRORS',
} as const

export interface ImportResult {
    count?: number
    errorMessage?: ErrorMessageUiExtended[]
    importState?: ImportResultImportState
    items?: CMDBItem[]
    type?: string
}

export type FilterValueUiValue = { [key: string]: any }

export interface FilterValueUi {
    equality?: string
    value?: FilterValueUiValue
}

export interface FilterMetaAttributesUi {
    createdAtFrom?: string
    createdAtTo?: string
    createdBy?: string[]
    lastAction?: string[]
    lastModifiedAtFrom?: string
    lastModifiedAtTo?: string
    lastModifiedBy?: string[]
    liableEntity?: string[]
    liableEntityByHierarchy?: boolean
    owner?: string[]
    state?: string[]
}

export interface FilterAttributesUi {
    filterValue?: FilterValueUi[]
    name?: string
}

export interface File {
    absolute?: boolean
    absoluteFile?: File
    absolutePath?: string
    canonicalFile?: File
    canonicalPath?: string
    directory?: boolean
    file?: boolean
    freeSpace?: number
    hidden?: boolean
    name?: string
    parent?: string
    parentFile?: File
    path?: string
    totalSpace?: number
    usableSpace?: number
}

export interface ExportFilter {
    ids?: string[]
}

export type ErrorMessageUiExtendedItemType = (typeof ErrorMessageUiExtendedItemType)[keyof typeof ErrorMessageUiExtendedItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiExtendedItemType = {
    RELATIONSHIP: 'RELATIONSHIP',
    CONFIGURATION_ITEM: 'CONFIGURATION_ITEM',
} as const

export type ErrorMessageUiExtendedErrorType = (typeof ErrorMessageUiExtendedErrorType)[keyof typeof ErrorMessageUiExtendedErrorType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiExtendedErrorType = {
    OWNER: 'OWNER',
    OWNER_CREATE_ROLE: 'OWNER_CREATE_ROLE',
    CREATE_CI: 'CREATE_CI',
    UPDATE_CI: 'UPDATE_CI',
    CREATE_REL: 'CREATE_REL',
    UPDATE_REL: 'UPDATE_REL',
    UPDATE_INVALIDATE_CI: 'UPDATE_INVALIDATE_CI',
    CHANGE_ATTRIBUTE: 'CHANGE_ATTRIBUTE',
    LIMIT: 'LIMIT',
    ENUM: 'ENUM',
    EXPRESION: 'EXPRESION',
    ATTRIBUTE: 'ATTRIBUTE',
    MANDATORY: 'MANDATORY',
    REGEX: 'REGEX',
    NUMBER_FORMAT: 'NUMBER_FORMAT',
    MAX_STRING_SIZE: 'MAX_STRING_SIZE',
    INVALID_TYPE: 'INVALID_TYPE',
    GROUP_RIGHT: 'GROUP_RIGHT',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    PROCESSING_ERROR: 'PROCESSING_ERROR',
} as const

export interface ErrorDetailUi {
    description?: string
    enumConstrain?: string
    invalidType?: string
    itemTechnicalTypeName?: string
    maxConstrain?: number
    maxStringSize?: number
    minConstrain?: number
    notAllowedExpression?: string
    notAuthorizedGid?: string
    notAuthorizedRole?: string
    notExistAttribute?: string
    notFilledAttribute?: string
    notNumber?: string
    regex?: string
}

export interface ErrorMessageUiExtended {
    attributeName?: string
    errorDetail?: ErrorDetailUi
    errorType?: ErrorMessageUiExtendedErrorType
    itemCode?: string
    itemId?: string
    itemName?: string
    itemType?: ErrorMessageUiExtendedItemType
}

export interface CiFilterUi {
    attributes?: FilterAttributesUi[]
    fullTextSearch?: string
    metaAttributes?: FilterMetaAttributesUi
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    poUuid?: string
    relTypeFilters?: RelTypeFilterUi[]
    searchFields?: string[]
    type?: string[]
    usageType?: string[]
    uuid?: string[]
}

export interface CiListFilterContainerUi {
    filter?: CiFilterUi
    getIncidentRelations?: boolean
    page?: number
    perpage?: number
    relFilter?: RelFilterUi
    sortBy?: string
    sortByEndCi?: boolean
    sortSource?: string
    sortType?: string
    usageTypeFilter?: UsageTypeFilterUi
}

export interface CMDBItem {
    code?: string
    uuid?: string
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary liveness
 */
export const useLivenessUsingGETHook = () => {
    const livenessUsingGET = useImpexpCmdbSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return livenessUsingGET({ url: `/endpoints/health/liveness`, method: 'get', signal })
    }
}

export const getLivenessUsingGETQueryKey = () => [`/endpoints/health/liveness`] as const

export const useLivenessUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getLivenessUsingGETQueryKey()

    const livenessUsingGET = useLivenessUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>> = ({ signal }) => livenessUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type LivenessUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>>
export type LivenessUsingGETQueryError = unknown

/**
 * @summary liveness
 */
export const useLivenessUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useLivenessUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readiness
 */
export const useReadinessUsingGETHook = () => {
    const readinessUsingGET = useImpexpCmdbSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return readinessUsingGET({ url: `/endpoints/health/readiness`, method: 'get', signal })
    }
}

export const getReadinessUsingGETQueryKey = () => [`/endpoints/health/readiness`] as const

export const useReadinessUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>,
    TError = unknown,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadinessUsingGETQueryKey()

    const readinessUsingGET = useReadinessUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>> = ({ signal }) => readinessUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadinessUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>>
export type ReadinessUsingGETQueryError = unknown

/**
 * @summary readiness
 */
export const useReadinessUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadinessUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingGETHook = () => {
    const exportCsvUsingGET = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportCsvUsingGETParams, signal?: AbortSignal) => {
        return exportCsvUsingGET({ url: `/export/csv`, method: 'get', headers: { 'Content-Type': 'application/json' }, params, signal })
    }
}

export const getExportCsvUsingGETQueryKey = (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportCsvUsingGETParams) =>
    [`/export/csv`, ...(params ? [params] : []), ciListFilterContainerUiBody] as const

export const useExportCsvUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportCsvUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportCsvUsingGETQueryKey(ciListFilterContainerUiBody, params)

    const exportCsvUsingGET = useExportCsvUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>> = ({ signal }) =>
        exportCsvUsingGET(ciListFilterContainerUiBody, params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportCsvUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>>
export type ExportCsvUsingGETQueryError = void

/**
 * @summary exportCsv
 */
export const useExportCsvUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportCsvUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportCsvUsingGETQueryOptions(ciListFilterContainerUiBody, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPUTHook = () => {
    const exportCsvUsingPUT = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportCsvUsingPUTParams) => {
        return exportCsvUsingPUT({
            url: `/export/csv`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useExportCsvUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportCsvUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ExportCsvUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsvUsingPUT = useExportCsvUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ExportCsvUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportCsvUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsvUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUTHook>>>>
export type ExportCsvUsingPUTMutationBody = CiListFilterContainerUiBody
export type ExportCsvUsingPUTMutationError = unknown

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportCsvUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useExportCsvUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingGETHook = () => {
    const exportExcelUsingGET = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportExcelUsingGETParams, signal?: AbortSignal) => {
        return exportExcelUsingGET({ url: `/export/excel`, method: 'get', headers: { 'Content-Type': 'application/json' }, params, signal })
    }
}

export const getExportExcelUsingGETQueryKey = (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportExcelUsingGETParams) =>
    [`/export/excel`, ...(params ? [params] : []), ciListFilterContainerUiBody] as const

export const useExportExcelUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportExcelUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportExcelUsingGETQueryKey(ciListFilterContainerUiBody, params)

    const exportExcelUsingGET = useExportExcelUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>> = ({ signal }) =>
        exportExcelUsingGET(ciListFilterContainerUiBody, params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportExcelUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>>
export type ExportExcelUsingGETQueryError = void

/**
 * @summary exportExcel
 */
export const useExportExcelUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportExcelUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportExcelUsingGETQueryOptions(ciListFilterContainerUiBody, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPUTHook = () => {
    const exportExcelUsingPUT = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportExcelUsingPUTParams) => {
        return exportExcelUsingPUT({
            url: `/export/excel`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useExportExcelUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportExcelUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ExportExcelUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcelUsingPUT = useExportExcelUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ExportExcelUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportExcelUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcelUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUTHook>>>>
export type ExportExcelUsingPUTMutationBody = CiListFilterContainerUiBody
export type ExportExcelUsingPUTMutationError = unknown

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportExcelUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useExportExcelUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPUT1Hook = () => {
    const exportCsvUsingPUT1 = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (exportFilterBody: ExportFilterBody, params: ExportCsvUsingPUT1Params) => {
        return exportCsvUsingPUT1({
            url: `/export/kris-to-be/csv`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilterBody,
            params,
        })
    }
}

export const useExportCsvUsingPUT1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT1Hook>>>,
        TError,
        { data: ExportFilterBody; params: ExportCsvUsingPUT1Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT1Hook>>>,
    TError,
    { data: ExportFilterBody; params: ExportCsvUsingPUT1Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsvUsingPUT1 = useExportCsvUsingPUT1Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT1Hook>>>,
        { data: ExportFilterBody; params: ExportCsvUsingPUT1Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportCsvUsingPUT1(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsvUsingPUT1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT1Hook>>>>
export type ExportCsvUsingPUT1MutationBody = ExportFilterBody
export type ExportCsvUsingPUT1MutationError = unknown

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPUT1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT1Hook>>>,
        TError,
        { data: ExportFilterBody; params: ExportCsvUsingPUT1Params },
        TContext
    >
}) => {
    const mutationOptions = useExportCsvUsingPUT1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPUT1Hook = () => {
    const exportExcelUsingPUT1 = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (exportFilterBody: ExportFilterBody, params: ExportExcelUsingPUT1Params) => {
        return exportExcelUsingPUT1({
            url: `/export/kris-to-be/xlsx`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilterBody,
            params,
        })
    }
}

export const useExportExcelUsingPUT1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT1Hook>>>,
        TError,
        { data: ExportFilterBody; params: ExportExcelUsingPUT1Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT1Hook>>>,
    TError,
    { data: ExportFilterBody; params: ExportExcelUsingPUT1Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcelUsingPUT1 = useExportExcelUsingPUT1Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT1Hook>>>,
        { data: ExportFilterBody; params: ExportExcelUsingPUT1Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportExcelUsingPUT1(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcelUsingPUT1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT1Hook>>>>
export type ExportExcelUsingPUT1MutationBody = ExportFilterBody
export type ExportExcelUsingPUT1MutationError = unknown

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPUT1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT1Hook>>>,
        TError,
        { data: ExportFilterBody; params: ExportExcelUsingPUT1Params },
        TContext
    >
}) => {
    const mutationOptions = useExportExcelUsingPUT1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingPUT1Hook = () => {
    const exportXmlUsingPUT1 = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (exportFilterBody: ExportFilterBody, params: ExportXmlUsingPUT1Params) => {
        return exportXmlUsingPUT1({
            url: `/export/kris-to-be/xml`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilterBody,
            params,
        })
    }
}

export const useExportXmlUsingPUT1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT1Hook>>>,
        TError,
        { data: ExportFilterBody; params: ExportXmlUsingPUT1Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT1Hook>>>,
    TError,
    { data: ExportFilterBody; params: ExportXmlUsingPUT1Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXmlUsingPUT1 = useExportXmlUsingPUT1Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT1Hook>>>,
        { data: ExportFilterBody; params: ExportXmlUsingPUT1Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportXmlUsingPUT1(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXmlUsingPUT1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT1Hook>>>>
export type ExportXmlUsingPUT1MutationBody = ExportFilterBody
export type ExportXmlUsingPUT1MutationError = unknown

/**
 * @summary exportXml
 */
export const useExportXmlUsingPUT1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT1Hook>>>,
        TError,
        { data: ExportFilterBody; params: ExportXmlUsingPUT1Params },
        TContext
    >
}) => {
    const mutationOptions = useExportXmlUsingPUT1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingGET1Hook = () => {
    const exportCsvUsingGET1 = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (params: ExportCsvUsingGET1Params, signal?: AbortSignal) => {
        return exportCsvUsingGET1({ url: `/export/monitoring/csv`, method: 'get', params, signal })
    }
}

export const getExportCsvUsingGET1QueryKey = (params: ExportCsvUsingGET1Params) => [`/export/monitoring/csv`, ...(params ? [params] : [])] as const

export const useExportCsvUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>, TError = void>(
    params: ExportCsvUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportCsvUsingGET1QueryKey(params)

    const exportCsvUsingGET1 = useExportCsvUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>> = ({ signal }) =>
        exportCsvUsingGET1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportCsvUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>>
export type ExportCsvUsingGET1QueryError = void

/**
 * @summary exportCsv
 */
export const useExportCsvUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>, TError = void>(
    params: ExportCsvUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportCsvUsingGET1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPUT2Hook = () => {
    const exportCsvUsingPUT2 = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (params: ExportCsvUsingPUT2Params) => {
        return exportCsvUsingPUT2({ url: `/export/monitoring/csv`, method: 'put', params })
    }
}

export const useExportCsvUsingPUT2MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT2Hook>>>,
        TError,
        { params: ExportCsvUsingPUT2Params },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT2Hook>>>, TError, { params: ExportCsvUsingPUT2Params }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsvUsingPUT2 = useExportCsvUsingPUT2Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT2Hook>>>, { params: ExportCsvUsingPUT2Params }> = (
        props,
    ) => {
        const { params } = props ?? {}

        return exportCsvUsingPUT2(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsvUsingPUT2MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT2Hook>>>>

export type ExportCsvUsingPUT2MutationError = unknown

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPUT2 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPUT2Hook>>>,
        TError,
        { params: ExportCsvUsingPUT2Params },
        TContext
    >
}) => {
    const mutationOptions = useExportCsvUsingPUT2MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingGET1Hook = () => {
    const exportExcelUsingGET1 = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (params: ExportExcelUsingGET1Params, signal?: AbortSignal) => {
        return exportExcelUsingGET1({ url: `/export/monitoring/excel`, method: 'get', params, signal })
    }
}

export const getExportExcelUsingGET1QueryKey = (params: ExportExcelUsingGET1Params) =>
    [`/export/monitoring/excel`, ...(params ? [params] : [])] as const

export const useExportExcelUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>, TError = void>(
    params: ExportExcelUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportExcelUsingGET1QueryKey(params)

    const exportExcelUsingGET1 = useExportExcelUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>> = ({ signal }) =>
        exportExcelUsingGET1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportExcelUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>>
export type ExportExcelUsingGET1QueryError = void

/**
 * @summary exportExcel
 */
export const useExportExcelUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>, TError = void>(
    params: ExportExcelUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportExcelUsingGET1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPUT2Hook = () => {
    const exportExcelUsingPUT2 = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (params: ExportExcelUsingPUT2Params) => {
        return exportExcelUsingPUT2({ url: `/export/monitoring/excel`, method: 'put', params })
    }
}

export const useExportExcelUsingPUT2MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT2Hook>>>,
        TError,
        { params: ExportExcelUsingPUT2Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT2Hook>>>,
    TError,
    { params: ExportExcelUsingPUT2Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcelUsingPUT2 = useExportExcelUsingPUT2Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT2Hook>>>,
        { params: ExportExcelUsingPUT2Params }
    > = (props) => {
        const { params } = props ?? {}

        return exportExcelUsingPUT2(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcelUsingPUT2MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT2Hook>>>>

export type ExportExcelUsingPUT2MutationError = unknown

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPUT2 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPUT2Hook>>>,
        TError,
        { params: ExportExcelUsingPUT2Params },
        TContext
    >
}) => {
    const mutationOptions = useExportExcelUsingPUT2MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingGET1Hook = () => {
    const exportXmlUsingGET1 = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (params: ExportXmlUsingGET1Params, signal?: AbortSignal) => {
        return exportXmlUsingGET1({ url: `/export/monitoring/xml`, method: 'get', params, signal })
    }
}

export const getExportXmlUsingGET1QueryKey = (params: ExportXmlUsingGET1Params) => [`/export/monitoring/xml`, ...(params ? [params] : [])] as const

export const useExportXmlUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>, TError = void>(
    params: ExportXmlUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportXmlUsingGET1QueryKey(params)

    const exportXmlUsingGET1 = useExportXmlUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>> = ({ signal }) =>
        exportXmlUsingGET1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportXmlUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>>
export type ExportXmlUsingGET1QueryError = void

/**
 * @summary exportXml
 */
export const useExportXmlUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>, TError = void>(
    params: ExportXmlUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportXmlUsingGET1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingPUT2Hook = () => {
    const exportXmlUsingPUT2 = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (params: ExportXmlUsingPUT2Params) => {
        return exportXmlUsingPUT2({ url: `/export/monitoring/xml`, method: 'put', params })
    }
}

export const useExportXmlUsingPUT2MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT2Hook>>>,
        TError,
        { params: ExportXmlUsingPUT2Params },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT2Hook>>>, TError, { params: ExportXmlUsingPUT2Params }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXmlUsingPUT2 = useExportXmlUsingPUT2Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT2Hook>>>, { params: ExportXmlUsingPUT2Params }> = (
        props,
    ) => {
        const { params } = props ?? {}

        return exportXmlUsingPUT2(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXmlUsingPUT2MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT2Hook>>>>

export type ExportXmlUsingPUT2MutationError = unknown

/**
 * @summary exportXml
 */
export const useExportXmlUsingPUT2 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUT2Hook>>>,
        TError,
        { params: ExportXmlUsingPUT2Params },
        TContext
    >
}) => {
    const mutationOptions = useExportXmlUsingPUT2MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportRelCsv
 */
export const useExportRelCsvUsingGETHook = () => {
    const exportRelCsvUsingGET = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelCsvUsingGETParams, signal?: AbortSignal) => {
        return exportRelCsvUsingGET({ url: `/export/rel/csv`, method: 'get', headers: { 'Content-Type': 'application/json' }, params, signal })
    }
}

export const getExportRelCsvUsingGETQueryKey = (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelCsvUsingGETParams) =>
    [`/export/rel/csv`, ...(params ? [params] : []), ciListFilterContainerUiBody] as const

export const useExportRelCsvUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportRelCsvUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportRelCsvUsingGETQueryKey(ciListFilterContainerUiBody, params)

    const exportRelCsvUsingGET = useExportRelCsvUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>> = ({ signal }) =>
        exportRelCsvUsingGET(ciListFilterContainerUiBody, params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportRelCsvUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>>
export type ExportRelCsvUsingGETQueryError = void

/**
 * @summary exportRelCsv
 */
export const useExportRelCsvUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportRelCsvUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportRelCsvUsingGETQueryOptions(ciListFilterContainerUiBody, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportRelCsv
 */
export const useExportRelCsvUsingPUTHook = () => {
    const exportRelCsvUsingPUT = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelCsvUsingPUTParams) => {
        return exportRelCsvUsingPUT({
            url: `/export/rel/csv`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useExportRelCsvUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportRelCsvUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingPUTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ExportRelCsvUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportRelCsvUsingPUT = useExportRelCsvUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingPUTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ExportRelCsvUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportRelCsvUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportRelCsvUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingPUTHook>>>>
export type ExportRelCsvUsingPUTMutationBody = CiListFilterContainerUiBody
export type ExportRelCsvUsingPUTMutationError = unknown

/**
 * @summary exportRelCsv
 */
export const useExportRelCsvUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportRelCsvUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportRelCsvUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useExportRelCsvUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportRelExcel
 */
export const useExportRelExcelUsingGETHook = () => {
    const exportRelExcelUsingGET = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelExcelUsingGETParams, signal?: AbortSignal) => {
        return exportRelExcelUsingGET({ url: `/export/rel/excel`, method: 'get', headers: { 'Content-Type': 'application/json' }, params, signal })
    }
}

export const getExportRelExcelUsingGETQueryKey = (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelExcelUsingGETParams) =>
    [`/export/rel/excel`, ...(params ? [params] : []), ciListFilterContainerUiBody] as const

export const useExportRelExcelUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportRelExcelUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportRelExcelUsingGETQueryKey(ciListFilterContainerUiBody, params)

    const exportRelExcelUsingGET = useExportRelExcelUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>> = ({ signal }) =>
        exportRelExcelUsingGET(ciListFilterContainerUiBody, params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportRelExcelUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>>
export type ExportRelExcelUsingGETQueryError = void

/**
 * @summary exportRelExcel
 */
export const useExportRelExcelUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportRelExcelUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportRelExcelUsingGETQueryOptions(ciListFilterContainerUiBody, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportRelExcel
 */
export const useExportRelExcelUsingPUTHook = () => {
    const exportRelExcelUsingPUT = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelExcelUsingPUTParams) => {
        return exportRelExcelUsingPUT({
            url: `/export/rel/excel`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useExportRelExcelUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportRelExcelUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingPUTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ExportRelExcelUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportRelExcelUsingPUT = useExportRelExcelUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingPUTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ExportRelExcelUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportRelExcelUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportRelExcelUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingPUTHook>>>>
export type ExportRelExcelUsingPUTMutationBody = CiListFilterContainerUiBody
export type ExportRelExcelUsingPUTMutationError = unknown

/**
 * @summary exportRelExcel
 */
export const useExportRelExcelUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportRelExcelUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportRelExcelUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useExportRelExcelUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportRelXml
 */
export const useExportRelXmlUsingGETHook = () => {
    const exportRelXmlUsingGET = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelXmlUsingGETParams, signal?: AbortSignal) => {
        return exportRelXmlUsingGET({ url: `/export/rel/xml`, method: 'get', headers: { 'Content-Type': 'application/json' }, params, signal })
    }
}

export const getExportRelXmlUsingGETQueryKey = (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelXmlUsingGETParams) =>
    [`/export/rel/xml`, ...(params ? [params] : []), ciListFilterContainerUiBody] as const

export const useExportRelXmlUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportRelXmlUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportRelXmlUsingGETQueryKey(ciListFilterContainerUiBody, params)

    const exportRelXmlUsingGET = useExportRelXmlUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>> = ({ signal }) =>
        exportRelXmlUsingGET(ciListFilterContainerUiBody, params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportRelXmlUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>>
export type ExportRelXmlUsingGETQueryError = void

/**
 * @summary exportRelXml
 */
export const useExportRelXmlUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportRelXmlUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportRelXmlUsingGETQueryOptions(ciListFilterContainerUiBody, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportRelXml
 */
export const useExportRelXmlUsingPUTHook = () => {
    const exportRelXmlUsingPUT = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportRelXmlUsingPUTParams) => {
        return exportRelXmlUsingPUT({
            url: `/export/rel/xml`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useExportRelXmlUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportRelXmlUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingPUTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ExportRelXmlUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportRelXmlUsingPUT = useExportRelXmlUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingPUTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ExportRelXmlUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportRelXmlUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportRelXmlUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingPUTHook>>>>
export type ExportRelXmlUsingPUTMutationBody = CiListFilterContainerUiBody
export type ExportRelXmlUsingPUTMutationError = unknown

/**
 * @summary exportRelXml
 */
export const useExportRelXmlUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportRelXmlUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportRelXmlUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useExportRelXmlUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingGET2Hook = () => {
    const exportCsvUsingGET2 = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (reportId: number, reportExecuteBody: ReportExecuteBody, signal?: AbortSignal) => {
        return exportCsvUsingGET2({ url: `/export/report/csv/${reportId}`, method: 'get', headers: { 'Content-Type': 'application/json' }, signal })
    }
}

export const getExportCsvUsingGET2QueryKey = (reportId: number, reportExecuteBody: ReportExecuteBody) =>
    [`/export/report/csv/${reportId}`, reportExecuteBody] as const

export const useExportCsvUsingGET2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>, TError = void>(
    reportId: number,
    reportExecuteBody: ReportExecuteBody,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportCsvUsingGET2QueryKey(reportId, reportExecuteBody)

    const exportCsvUsingGET2 = useExportCsvUsingGET2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>> = ({ signal }) =>
        exportCsvUsingGET2(reportId, reportExecuteBody, signal)

    return { queryKey, queryFn, enabled: !!reportId, ...queryOptions }
}

export type ExportCsvUsingGET2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>>
export type ExportCsvUsingGET2QueryError = void

/**
 * @summary exportCsv
 */
export const useExportCsvUsingGET2 = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>, TError = void>(
    reportId: number,
    reportExecuteBody: ReportExecuteBody,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingGET2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportCsvUsingGET2QueryOptions(reportId, reportExecuteBody, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPOSTHook = () => {
    const exportCsvUsingPOST = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (reportId: number, reportExecuteBody: ReportExecuteBody) => {
        return exportCsvUsingPOST({
            url: `/export/report/csv/${reportId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: reportExecuteBody,
        })
    }
}

export const useExportCsvUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPOSTHook>>>,
        TError,
        { reportId: number; data: ReportExecuteBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPOSTHook>>>,
    TError,
    { reportId: number; data: ReportExecuteBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsvUsingPOST = useExportCsvUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPOSTHook>>>,
        { reportId: number; data: ReportExecuteBody }
    > = (props) => {
        const { reportId, data } = props ?? {}

        return exportCsvUsingPOST(reportId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsvUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPOSTHook>>>>
export type ExportCsvUsingPOSTMutationBody = ReportExecuteBody
export type ExportCsvUsingPOSTMutationError = unknown

/**
 * @summary exportCsv
 */
export const useExportCsvUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsvUsingPOSTHook>>>,
        TError,
        { reportId: number; data: ReportExecuteBody },
        TContext
    >
}) => {
    const mutationOptions = useExportCsvUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingGET2Hook = () => {
    const exportExcelUsingGET2 = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (reportId: number, reportExecuteBody: ReportExecuteBody, signal?: AbortSignal) => {
        return exportExcelUsingGET2({
            url: `/export/report/excel/${reportId}`,
            method: 'get',
            headers: { 'Content-Type': 'application/json' },
            signal,
        })
    }
}

export const getExportExcelUsingGET2QueryKey = (reportId: number, reportExecuteBody: ReportExecuteBody) =>
    [`/export/report/excel/${reportId}`, reportExecuteBody] as const

export const useExportExcelUsingGET2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>, TError = void>(
    reportId: number,
    reportExecuteBody: ReportExecuteBody,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportExcelUsingGET2QueryKey(reportId, reportExecuteBody)

    const exportExcelUsingGET2 = useExportExcelUsingGET2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>> = ({ signal }) =>
        exportExcelUsingGET2(reportId, reportExecuteBody, signal)

    return { queryKey, queryFn, enabled: !!reportId, ...queryOptions }
}

export type ExportExcelUsingGET2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>>
export type ExportExcelUsingGET2QueryError = void

/**
 * @summary exportExcel
 */
export const useExportExcelUsingGET2 = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>, TError = void>(
    reportId: number,
    reportExecuteBody: ReportExecuteBody,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingGET2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportExcelUsingGET2QueryOptions(reportId, reportExecuteBody, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPOSTHook = () => {
    const exportExcelUsingPOST = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (reportId: number, reportExecuteBody: ReportExecuteBody) => {
        return exportExcelUsingPOST({
            url: `/export/report/excel/${reportId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: reportExecuteBody,
        })
    }
}

export const useExportExcelUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPOSTHook>>>,
        TError,
        { reportId: number; data: ReportExecuteBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPOSTHook>>>,
    TError,
    { reportId: number; data: ReportExecuteBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcelUsingPOST = useExportExcelUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPOSTHook>>>,
        { reportId: number; data: ReportExecuteBody }
    > = (props) => {
        const { reportId, data } = props ?? {}

        return exportExcelUsingPOST(reportId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcelUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPOSTHook>>>>
export type ExportExcelUsingPOSTMutationBody = ReportExecuteBody
export type ExportExcelUsingPOSTMutationError = unknown

/**
 * @summary exportExcel
 */
export const useExportExcelUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcelUsingPOSTHook>>>,
        TError,
        { reportId: number; data: ReportExecuteBody },
        TContext
    >
}) => {
    const mutationOptions = useExportExcelUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingGET2Hook = () => {
    const exportXmlUsingGET2 = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (reportId: number, reportExecuteBody: ReportExecuteBody, signal?: AbortSignal) => {
        return exportXmlUsingGET2({ url: `/export/report/xml/${reportId}`, method: 'get', headers: { 'Content-Type': 'application/json' }, signal })
    }
}

export const getExportXmlUsingGET2QueryKey = (reportId: number, reportExecuteBody: ReportExecuteBody) =>
    [`/export/report/xml/${reportId}`, reportExecuteBody] as const

export const useExportXmlUsingGET2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>, TError = void>(
    reportId: number,
    reportExecuteBody: ReportExecuteBody,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportXmlUsingGET2QueryKey(reportId, reportExecuteBody)

    const exportXmlUsingGET2 = useExportXmlUsingGET2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>> = ({ signal }) =>
        exportXmlUsingGET2(reportId, reportExecuteBody, signal)

    return { queryKey, queryFn, enabled: !!reportId, ...queryOptions }
}

export type ExportXmlUsingGET2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>>
export type ExportXmlUsingGET2QueryError = void

/**
 * @summary exportXml
 */
export const useExportXmlUsingGET2 = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>, TError = void>(
    reportId: number,
    reportExecuteBody: ReportExecuteBody,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGET2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportXmlUsingGET2QueryOptions(reportId, reportExecuteBody, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingPOSTHook = () => {
    const exportXmlUsingPOST = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (reportId: number, reportExecuteBody: ReportExecuteBody) => {
        return exportXmlUsingPOST({
            url: `/export/report/xml/${reportId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: reportExecuteBody,
        })
    }
}

export const useExportXmlUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPOSTHook>>>,
        TError,
        { reportId: number; data: ReportExecuteBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPOSTHook>>>,
    TError,
    { reportId: number; data: ReportExecuteBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXmlUsingPOST = useExportXmlUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPOSTHook>>>,
        { reportId: number; data: ReportExecuteBody }
    > = (props) => {
        const { reportId, data } = props ?? {}

        return exportXmlUsingPOST(reportId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXmlUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPOSTHook>>>>
export type ExportXmlUsingPOSTMutationBody = ReportExecuteBody
export type ExportXmlUsingPOSTMutationError = unknown

/**
 * @summary exportXml
 */
export const useExportXmlUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPOSTHook>>>,
        TError,
        { reportId: number; data: ReportExecuteBody },
        TContext
    >
}) => {
    const mutationOptions = useExportXmlUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingGETHook = () => {
    const exportXmlUsingGET = useImpexpCmdbSwaggerClient<InputStreamResource>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportXmlUsingGETParams, signal?: AbortSignal) => {
        return exportXmlUsingGET({ url: `/export/xml`, method: 'get', headers: { 'Content-Type': 'application/json' }, params, signal })
    }
}

export const getExportXmlUsingGETQueryKey = (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportXmlUsingGETParams) =>
    [`/export/xml`, ...(params ? [params] : []), ciListFilterContainerUiBody] as const

export const useExportXmlUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportXmlUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportXmlUsingGETQueryKey(ciListFilterContainerUiBody, params)

    const exportXmlUsingGET = useExportXmlUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>> = ({ signal }) =>
        exportXmlUsingGET(ciListFilterContainerUiBody, params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportXmlUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>>
export type ExportXmlUsingGETQueryError = void

/**
 * @summary exportXml
 */
export const useExportXmlUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>, TError = void>(
    ciListFilterContainerUiBody: CiListFilterContainerUiBody,
    params?: ExportXmlUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportXmlUsingGETQueryOptions(ciListFilterContainerUiBody, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportXml
 */
export const useExportXmlUsingPUTHook = () => {
    const exportXmlUsingPUT = useImpexpCmdbSwaggerClient<InputStreamResource | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ExportXmlUsingPUTParams) => {
        return exportXmlUsingPUT({
            url: `/export/xml`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useExportXmlUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportXmlUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ExportXmlUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXmlUsingPUT = useExportXmlUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ExportXmlUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportXmlUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXmlUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUTHook>>>>
export type ExportXmlUsingPUTMutationBody = CiListFilterContainerUiBody
export type ExportXmlUsingPUTMutationError = unknown

/**
 * @summary exportXml
 */
export const useExportXmlUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXmlUsingPUTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ExportXmlUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useExportXmlUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary updateContent
 */
export const useUpdateContentUsingPOSTHook = () => {
    const updateContentUsingPOST = useImpexpCmdbSwaggerClient<RequestIdUi | void>()

    return (updateContentUsingPOSTBody: UpdateContentUsingPOSTBody, params?: UpdateContentUsingPOSTParams) => {
        const formData = new FormData()
        formData.append('file', updateContentUsingPOSTBody.file)

        return updateContentUsingPOST({ url: `/import`, method: 'post', headers: { 'Content-Type': 'multipart/form-data' }, data: formData, params })
    }
}

export const useUpdateContentUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentUsingPOSTHook>>>,
        TError,
        { data: UpdateContentUsingPOSTBody; params?: UpdateContentUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateContentUsingPOSTHook>>>,
    TError,
    { data: UpdateContentUsingPOSTBody; params?: UpdateContentUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateContentUsingPOST = useUpdateContentUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentUsingPOSTHook>>>,
        { data: UpdateContentUsingPOSTBody; params?: UpdateContentUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return updateContentUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateContentUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateContentUsingPOSTHook>>>>
export type UpdateContentUsingPOSTMutationBody = UpdateContentUsingPOSTBody
export type UpdateContentUsingPOSTMutationError = unknown

/**
 * @summary updateContent
 */
export const useUpdateContentUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentUsingPOSTHook>>>,
        TError,
        { data: UpdateContentUsingPOSTBody; params?: UpdateContentUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useUpdateContentUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readProgress
 */
export const useReadProgressUsingGETHook = () => {
    const readProgressUsingGET = useImpexpCmdbSwaggerClient<ImportResult>()

    return (requestId: string, signal?: AbortSignal) => {
        return readProgressUsingGET({ url: `/import/progress/${requestId}`, method: 'get', signal })
    }
}

export const getReadProgressUsingGETQueryKey = (requestId: string) => [`/import/progress/${requestId}`] as const

export const useReadProgressUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>, TError = void>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadProgressUsingGETQueryKey(requestId)

    const readProgressUsingGET = useReadProgressUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>> = ({ signal }) =>
        readProgressUsingGET(requestId, signal)

    return { queryKey, queryFn, enabled: !!requestId, ...queryOptions }
}

export type ReadProgressUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>>
export type ReadProgressUsingGETQueryError = void

/**
 * @summary readProgress
 */
export const useReadProgressUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>, TError = void>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadProgressUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadProgressUsingGETQueryOptions(requestId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary validateContent
 */
export const useValidateContentUsingPOSTHook = () => {
    const validateContentUsingPOST = useImpexpCmdbSwaggerClient<RequestIdUi | void>()

    return (updateContentUsingPOSTBody: UpdateContentUsingPOSTBody, params: ValidateContentUsingPOSTParams) => {
        const formData = new FormData()
        formData.append('file', updateContentUsingPOSTBody.file)

        return validateContentUsingPOST({
            url: `/import/validate`,
            method: 'post',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
            params,
        })
    }
}

export const useValidateContentUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useValidateContentUsingPOSTHook>>>,
        TError,
        { data: UpdateContentUsingPOSTBody; params: ValidateContentUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useValidateContentUsingPOSTHook>>>,
    TError,
    { data: UpdateContentUsingPOSTBody; params: ValidateContentUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const validateContentUsingPOST = useValidateContentUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useValidateContentUsingPOSTHook>>>,
        { data: UpdateContentUsingPOSTBody; params: ValidateContentUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return validateContentUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ValidateContentUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValidateContentUsingPOSTHook>>>>
export type ValidateContentUsingPOSTMutationBody = UpdateContentUsingPOSTBody
export type ValidateContentUsingPOSTMutationError = unknown

/**
 * @summary validateContent
 */
export const useValidateContentUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useValidateContentUsingPOSTHook>>>,
        TError,
        { data: UpdateContentUsingPOSTBody; params: ValidateContentUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useValidateContentUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

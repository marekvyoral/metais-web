//@ts-nocheck
/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * MetaIS IAM
 * Api Documentation
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useIAmSwaggerClient } from '../hooks/useIAmSwaggerClient'
export type FindByNameWithParamsCountUsingGETParams = {
    /**
     * group
     */
    group?: string
    /**
     * name
     */
    name: string
    /**
     * system
     */
    system?: string
}

export type FindByNameWithParamsUsingGETParams = {
    /**
     * direction
     */
    direction?: string
    /**
     * group
     */
    group?: string
    /**
     * name
     */
    name: string
    /**
     * orderBy
     */
    orderBy?: string
    /**
     * system
     */
    system?: string
}

export type FindAllUsingGET14Params = {
    /**
     * direction
     */
    direction: string
    /**
     * orderBy
     */
    orderBy: string
}

export type FindByNameUsingGET1Params = {
    /**
     * name
     */
    name: string
}

export type GetOwnerRolesFromLoginUsingGETParams = {
    /**
     * gid
     */
    gid: string
    /**
     * login
     */
    login: string
}

export type RejectChangeUsingPUTParams = {
    name?: string
}

export type ApproveChangeUsingPUTParams = {
    name?: string
}

export type ReadChangesUsingGETParams = {
    /**
     * cmdbId
     */
    cmdbId?: string[]
    /**
     * from
     */
    from: number
    /**
     * state
     */
    state?: string
    /**
     * to
     */
    to: number
}

export type FindAllUsingGET11Params = {
    /**
     * direction
     */
    direction: string
    /**
     * orderBy
     */
    orderBy: string
}

export type FindRoleOrgRelationsUsingGETParams = {
    /**
     * readonly
     */
    readonly?: boolean
}

export type AddGroupOrgRoleIdentityRelationUsingPOSTBody = { [key: string]: string }

export type FindNotRelatedWithUsingGETParams = {
    /**
     * direction
     */
    direction?: string
    /**
     * expression
     */
    expression: string
    /**
     * groupUuid
     */
    groupUuid: string
    /**
     * orderBy
     */
    orderBy?: string
    /**
     * orgId
     */
    orgId?: string
    /**
     * relName
     */
    relName: string
    /**
     * roleUuid
     */
    roleUuid?: string
    /**
     * searchIn
     */
    searchIn?: string
    /**
     * state
     */
    state?: string
}

export type FindPagesByRolesUsingGETParams = {
    /**
     * expression
     */
    expression?: string
    /**
     * orgId
     */
    orgId?: string
    /**
     * roles
     */
    roles?: string
    /**
     * searchIn
     */
    searchIn?: string
    /**
     * state
     */
    state?: string
}

export type FindByRolesUsingGETParams = {
    /**
     * direction
     */
    direction?: string
    /**
     * expression
     */
    expression?: string
    /**
     * orderBy
     */
    orderBy?: string
    /**
     * orgId
     */
    orgId?: string
    /**
     * roles
     */
    roles?: string
    /**
     * searchIn
     */
    searchIn?: string
    /**
     * state
     */
    state?: string
}

export type FindPagesUsingGETParams = {
    /**
     * expression
     */
    expression: string
    /**
     * orgId
     */
    orgId?: string
    /**
     * roleUuid
     */
    roleUuid?: string
    /**
     * searchIn
     */
    searchIn?: string
    /**
     * state
     */
    state?: string
}

export type FindUsingGET3Params = {
    /**
     * direction
     */
    direction?: string
    /**
     * expression
     */
    expression: string
    /**
     * orderBy
     */
    orderBy?: string
    /**
     * orgId
     */
    orgId?: string
    /**
     * roleUuid
     */
    roleUuid?: string
    /**
     * searchIn
     */
    searchIn?: string
    /**
     * state
     */
    state?: string
}

export type CountByLoginLikeUsingGETParams = {
    /**
     * login
     */
    login: string
}

export type AvailableLoginUsingGETParams = {
    /**
     * login
     */
    login: string
}

export type FindRelatedIdentitiesUsingGETParams = {
    /**
     * expression
     */
    expression?: string
}

export type FindRelatedIdentitiesAndCountUsingGETParams = {
    /**
     * desc
     */
    desc?: boolean
    /**
     * expression
     */
    expression?: string
    /**
     * identityState
     */
    identityState?: string
    /**
     * memberUuid
     */
    memberUuid?: string
    /**
     * orderBy
     */
    orderBy?: string
    /**
     * page
     */
    page?: string
    /**
     * perPage
     */
    perPage?: string
    /**
     * poUuid
     */
    poUuid?: string
    /**
     * role
     */
    role?: string
    /**
     * substitutedBy
     */
    substitutedBy?: string
}

export type FindRelatedIdentitiesUsingGET1Params = {
    /**
     * desc
     */
    desc?: boolean
    /**
     * expression
     */
    expression?: string
    /**
     * memberUuid
     */
    memberUuid?: string
    /**
     * orderBy
     */
    orderBy?: string
    /**
     * page
     */
    page?: string
    /**
     * perPage
     */
    perPage?: string
    /**
     * poUuid
     */
    poUuid?: string
    /**
     * role
     */
    role?: string
    /**
     * substitutedBy
     */
    substitutedBy?: string
}

export type GetPagesUsingGET1Params = {
    /**
     * identity
     */
    identity?: string
    /**
     * organization
     */
    organization?: string
}

export type FindAllUsingGET3Params = {
    /**
     * direction
     */
    direction: string
    /**
     * orderBy
     */
    orderBy: string
}

export type GetStdHistoryUsingGETParams = {
    /**
     * createdAt
     */
    createdAt: string
    /**
     * groupShortName
     */
    groupShortName: string
}

export type FindByShortNameUsingGETParams = {
    /**
     * shortName
     */
    shortName: string
}

export type FindAllWithParamsUsingGETParams = {
    /**
     * search
     */
    search: string
}

/**
 * cmdbIds
 */
export type GetAllSubPOSetUsingPOSTCmdbidsBody = string[]

/**
 * gids
 */
export type FindUsingPOSTGidsBody = string[]

/**
 * uuids
 */
export type FindOrganizationsForListUsingPOSTUuidsBody = string[]

/**
 * identityOrganizationIn
 */
export type IdentityOrganizationInBody = IdentityOrganizationIn

export interface UserPermissionAssignData {
    createdByUuid?: string
    description?: string
    email?: string
    mobile?: string
    phone?: string
    po?: string
}

export type UrlContent = { [key: string]: any }

export interface Url {
    authority?: string
    content?: UrlContent
    defaultPort?: number
    file?: string
    host?: string
    path?: string
    port?: number
    protocol?: string
    query?: string
    ref?: string
    userInfo?: string
}

export interface Uri {
    absolute?: boolean
    authority?: string
    fragment?: string
    host?: string
    opaque?: boolean
    path?: string
    port?: number
    query?: string
    rawAuthority?: string
    rawFragment?: string
    rawPath?: string
    rawQuery?: string
    rawSchemeSpecificPart?: string
    rawUserInfo?: string
    scheme?: string
    schemeSpecificPart?: string
    userInfo?: string
}

export interface SubOrganizations {
    subOrganizations?: Organization[]
    uuid?: string
}

export interface SubOrganizationCmdbId {
    cmdbId?: string
    result?: string
    subOrganizations?: Organization[]
}

export interface StringList {
    requestUuid?: string
    strings?: string[]
}

export interface StdHistory {
    identity?: Person
    orgName?: string
    roleDesc?: string
    roleName?: string
    substitutedBy?: Person[]
}

export interface RoleOrgIdentity {
    gid?: string
    identityId?: string
    note?: string
    orgId?: string
    orgName?: string
    orgNumber?: string
    orgStreet?: string
    orgVillage?: string
    orgZIP?: string
    represents?: string
    roleDesc?: string
    roleId?: string
    roleName?: string
    showEmail?: boolean
}

export interface RoleOrgGroup {
    gid?: string
    note?: string
    orgId?: string
    orgName?: string
    orgNumber?: string
    orgStreet?: string
    orgVillage?: string
    orgZIP?: string
    represents?: string
    roleDesc?: string
    roleId?: string
    roleName?: string
    showEmail?: boolean
}

export interface RoleOrgGroupWithParams {
    gids?: RoleOrgGroup[]
    limit?: number
    page?: number
    total?: number
}

export type RoleType = (typeof RoleType)[keyof typeof RoleType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleType = {
    SYSTEM: 'SYSTEM',
    NON_SYSTEM: 'NON_SYSTEM',
} as const

export interface Role {
    assignedGroup?: string
    category?: string
    description?: string
    name?: string
    type?: RoleType
    uuid?: string
    weight?: number
}

export interface ResponseOfOwnership {
    failMessage?: string
    failure?: boolean
    payload?: Ownership
}

export type ResponseOfMapOfstringAndOwnershipPayload = { [key: string]: Ownership }

export interface ResponseOfMapOfstringAndOwnership {
    failMessage?: string
    failure?: boolean
    payload?: ResponseOfMapOfstringAndOwnershipPayload
}

export interface RelationshipUi {
    attributes?: AttributeUi[]
    endUuid?: string
    metaAttributes?: MetaAttributesUi
    owner?: string
    startUuid?: string
    type?: string
    uuid?: string
}

export type RelatedRoleType = (typeof RelatedRoleType)[keyof typeof RelatedRoleType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RelatedRoleType = {
    SYSTEM: 'SYSTEM',
    NON_SYSTEM: 'NON_SYSTEM',
} as const

export interface RelatedRole {
    assignedGroup?: string
    category?: string
    deletableRelation?: boolean
    description?: string
    name?: string
    type?: RelatedRoleType
    uuid?: string
    weight?: number
}

export type RelatedIdentityWithPoAttributes = { [key: string]: string }

export interface RelatedIdentityWithPo {
    attributes?: RelatedIdentityWithPoAttributes
    email?: string
    firstName?: string
    lastName?: string
    login?: string
    orgId?: string
    uuid?: string
}

export type RelatedIdentityType = (typeof RelatedIdentityType)[keyof typeof RelatedIdentityType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RelatedIdentityType = {
    PHYSICAL: 'PHYSICAL',
    TECH: 'TECH',
} as const

export type RelatedIdentityState = (typeof RelatedIdentityState)[keyof typeof RelatedIdentityState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RelatedIdentityState = {
    REGISTERED: 'REGISTERED',
    ACTIVATED: 'ACTIVATED',
    VERIFIED: 'VERIFIED',
    BLOCKED: 'BLOCKED',
    DEACTIVATED: 'DEACTIVATED',
} as const

export type RelatedIdentityAuthenticationResource = (typeof RelatedIdentityAuthenticationResource)[keyof typeof RelatedIdentityAuthenticationResource]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RelatedIdentityAuthenticationResource = {
    LOGIN_PASS: 'LOGIN_PASS',
    UPVS: 'UPVS',
    KERBEROS: 'KERBEROS',
    CLARITY: 'CLARITY',
} as const

export interface RelatedIdentity {
    activationToken?: boolean
    authResourceClar?: string
    authResourceEid?: string
    authResourceKrb?: string
    authResourceLP?: string
    authenticationResource?: RelatedIdentityAuthenticationResource
    changePassExpiration?: string
    deletableRelation?: boolean
    disabledNotifications?: boolean
    displayName?: string
    email?: string
    emailNotifPreferences?: string[]
    firstName?: string
    lastName?: string
    lastSuccessfulLogin?: number
    lastUnsuccessfulLogin?: string
    login?: string
    mobile?: string
    phone?: string
    position?: string
    state?: RelatedIdentityState
    type?: RelatedIdentityType
    uuid?: string
    webNotifPreferences?: string[]
    wrongLoginAttemptCount?: number
}

export interface PoRelationshipIntegrityConstraints {
    assignedInHierarchy?: boolean
    cmdbId?: string
    cycleInHierarchy?: boolean
    subCmdbId?: string
}

export interface PoRelationship {
    cmdbId?: string
    subCmdbId?: string
}

export interface Person {
    firstName?: string
    lastName?: string
}

export interface Password {
    value?: string
}

export interface Paging {
    pageNumber?: number
    recordsPerPage?: number
    recordsTotal?: number
}

export interface PaginationUi {
    page?: number
    perPage?: number
    totalPages?: number
    totaltems?: number
}

export interface Ownership {
    owner?: boolean
    ownerDelegate?: boolean
}

export interface OwnerByUserOut {
    isOwner?: IsOwner[]
}

export interface OwnerByUserIn {
    gids?: string[]
    identityUuid?: string
}

export interface OwnerByGidOutput {
    isOwner?: IsOwner[]
    login?: string
}

export interface OwnerByGidInput {
    gids?: string[]
    login?: string
}

export interface OwnerAndRoles {
    isOwner?: boolean
    ownerPO?: string
    ownerRole?: string
    roles?: string[]
}

export type OrganizationWithGidResult = (typeof OrganizationWithGidResult)[keyof typeof OrganizationWithGidResult]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationWithGidResult = {
    FOUND: 'FOUND',
    NOT_FOUND: 'NOT_FOUND',
    WRONG_INPUT: 'WRONG_INPUT',
} as const

export interface OrganizationWithGid {
    input?: string
    organization?: Organization
    result?: OrganizationWithGidResult
}

export interface OrganizationRoleHierarchyOut {
    gids?: RoleOrgGroup[]
    paging?: Paging
}

export interface OrganizationRoleHierarchyIn {
    cmdbId?: string
    level?: number
    paging?: Paging
    roleUuid?: string
}

export interface OrganizationHierarchyOut {
    hierarchy?: OrganizationHierarchy[]
    paging?: Paging
}

export interface OrganizationHierarchyInWithoutPagination {
    level?: number
    uuids?: string[]
}

export interface OrganizationHierarchyIn {
    level?: number
    paging?: Paging
    uuids?: string[]
}

export interface OrganizationHierarchy {
    organization?: Organization
    subOrganizations?: OrganizationHierarchy[]
}

export interface OrganizationBoolean {
    cmdbId?: string
    implicitMember?: boolean
}

export type OrganizationAttributes = { [key: string]: string }

export interface Organization {
    attributes?: OrganizationAttributes
    cmdbId?: string
    uuid?: string
}

export interface OperationResultGenericOfRole {
    entity?: Role
    message?: string
    type?: string
}

export interface OperationResultGenericOfIdentity {
    entity?: Identity
    message?: string
    type?: string
}

export interface OperationResult {
    message?: string
    type?: string
}

export interface MetaAttributesUi {
    createdAt?: string
    createdBy?: string
    lastModifiedAt?: string
    lastModifiedBy?: string
    owner?: string
    state?: string
}

export interface MessageGid {
    gid?: RoleOrgGroup
    message?: string
}

export interface MembershipData {
    groupName?: string
    groupUuid?: string
    represents?: string
    roleName?: string
    roleUuid?: string
    showEmail?: boolean
}

export interface MembershipDataOut {
    login?: string
    membershipData?: MembershipData[]
    roles?: string[]
}

export interface MapOfstringAndOwnership {
    [key: string]: Ownership
}

export interface LoginOrganizationIn {
    gids?: string[]
    login?: string
}

export interface LoginGid {
    gid?: string
    login?: string
}

export type ItemTypeItemClass = (typeof ItemTypeItemClass)[keyof typeof ItemTypeItemClass]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemTypeItemClass = {
    RELATIONSHIP: 'RELATIONSHIP',
    CONFIGURATION_ITEM: 'CONFIGURATION_ITEM',
} as const

export interface ItemType {
    itemClass?: ItemTypeItemClass
    itemTypeName?: string
}

export interface IsOwner {
    gid?: string
    owner?: boolean
}

export interface IsInPoByGidOutput {
    gids?: GidBoolean[]
}

export interface IsInPoByGidInput {
    gids?: string[]
    identityGids?: string[]
}

export interface InputStream {
    [key: string]: any
}

export interface InputStreamResource {
    description?: string
    file?: File
    filename?: string
    inputStream?: InputStream
    open?: boolean
    readable?: boolean
    uri?: Uri
    url?: Url
}

export type IdentityWithoutAuthResourceType = (typeof IdentityWithoutAuthResourceType)[keyof typeof IdentityWithoutAuthResourceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityWithoutAuthResourceType = {
    PHYSICAL: 'PHYSICAL',
    TECH: 'TECH',
} as const

export type IdentityWithoutAuthResourceState = (typeof IdentityWithoutAuthResourceState)[keyof typeof IdentityWithoutAuthResourceState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityWithoutAuthResourceState = {
    REGISTERED: 'REGISTERED',
    ACTIVATED: 'ACTIVATED',
    VERIFIED: 'VERIFIED',
    BLOCKED: 'BLOCKED',
    DEACTIVATED: 'DEACTIVATED',
} as const

export interface IdentityWithoutAuthResource {
    email?: string
    firstName?: string
    lastName?: string
    login?: string
    mobile?: string
    phone?: string
    position?: string
    state?: IdentityWithoutAuthResourceState
    type?: IdentityWithoutAuthResourceType
    uuid?: string
}

export interface IdentityWithResult {
    identity?: Identity
    input?: string
    result?: string
}

export interface IdentityWithOrganizationOut {
    cmdbId?: OrganizationBoolean[]
    identityUuid?: string
}

export interface IdentityWithOrganizationIn {
    cmdbId?: string[]
    identityUuid?: string
}

export interface IdentityWithOnePoAndRolesWithoutAuthResource {
    identity?: IdentityWithoutAuthResource
    orgId?: string
    roleIds?: string[]
}

export interface IdentityWithGidWithoutAuthResource {
    gids?: RoleOrgIdentity[]
    identity?: IdentityWithoutAuthResource
}

export interface IdentityUuidWithState {
    activate?: boolean
    uuid?: string
}

export interface IdentityUuidWithHighestOrganization {
    identityUuid?: string
    orgs?: HighestOrganization[]
    result?: string
}

export interface IdentityUuidWithGid {
    gids?: string[]
    identityUuid?: string
}

export interface IdentityTermsWithEntity {
    licenceTermsAccepted?: boolean
    uuid?: string
}

export interface IdentityTerms {
    licenceTermsAccepted?: boolean
}

export interface IdentityProfile {
    disabledNotifications?: boolean
    email?: string
    mobile?: string
    phone?: string
}

export interface IdentityOrganizationIn {
    cmdbId?: string
    identityUuid?: string
}

export interface IdentityNotifications {
    emailNotifPreferences?: string[]
    webNotifPreferences?: string[]
}

export interface IdentityInGroupData {
    gids?: RoleOrgIdentity[]
    identity?: Identity
    substitutedBy?: Identity[]
}

export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityType = {
    PHYSICAL: 'PHYSICAL',
    TECH: 'TECH',
} as const

export type IdentityState = (typeof IdentityState)[keyof typeof IdentityState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityState = {
    REGISTERED: 'REGISTERED',
    ACTIVATED: 'ACTIVATED',
    VERIFIED: 'VERIFIED',
    BLOCKED: 'BLOCKED',
    DEACTIVATED: 'DEACTIVATED',
} as const

export type IdentityAuthenticationResource = (typeof IdentityAuthenticationResource)[keyof typeof IdentityAuthenticationResource]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityAuthenticationResource = {
    LOGIN_PASS: 'LOGIN_PASS',
    UPVS: 'UPVS',
    KERBEROS: 'KERBEROS',
    CLARITY: 'CLARITY',
} as const

export interface Identity {
    activationToken?: boolean
    authResourceClar?: string
    authResourceEid?: string
    authResourceKrb?: string
    authResourceLP?: string
    authenticationResource?: IdentityAuthenticationResource
    changePassExpiration?: string
    disabledNotifications?: boolean
    displayName?: string
    email?: string
    emailNotifPreferences?: string[]
    firstName?: string
    lastName?: string
    lastSuccessfulLogin?: number
    lastUnsuccessfulLogin?: string
    login?: string
    mobile?: string
    phone?: string
    position?: string
    state?: IdentityState
    type?: IdentityType
    uuid?: string
    webNotifPreferences?: string[]
    wrongLoginAttemptCount?: number
}

export interface IdentitiesInGroupAndCount {
    count?: number
    list?: IdentityInGroupData[]
}

export interface HighestOrganization {
    gid?: string
    highestOrganization?: string
}

export interface Group {
    description?: string
    name?: string
    shortName?: string
    uuid?: string
}

export interface GroupWithIdentities {
    group?: Group
    identities?: IdentityInGroupData[]
}

export interface GidRoleData {
    gid?: string
    roleDescription?: string
    roleName?: string
    roleUuid?: string
    roleWeight?: number
}

export interface GidRoleDataHolder {
    gid?: string
    gidRoles?: GidRoleData[]
}

export interface GidData {
    orgId?: string
    roles?: GidRoleData[]
}

export interface GidBoolean {
    assigned?: boolean
    gid?: string
}

export interface GetOwnershipRequest {
    itemId?: string
    userLogin?: string
}

export interface GetAttributeOwnershipRequest {
    attributeNames?: string[]
    itemId?: string
    itemType?: ItemType
    userLogin?: string
}

export interface FindByLoginOut {
    identity?: Identity
    input?: string
}

export interface File {
    absolute?: boolean
    absoluteFile?: File
    absolutePath?: string
    canonicalFile?: File
    canonicalPath?: string
    directory?: boolean
    file?: boolean
    freeSpace?: number
    hidden?: boolean
    name?: string
    parent?: string
    parentFile?: File
    path?: string
    totalSpace?: number
    usableSpace?: number
}

export interface CsruOrganization {
    buildingNumber?: string
    city?: string
    district?: string
    familyName?: string
    fullName?: string
    givenName?: string
    ico?: string
    internetAddress?: string
    postalCode?: string
    referenceId?: string
    street?: string
    terminate?: boolean
    titlesAfterName?: string
    titlesBeforeName?: string
}

export interface CreateGidOperationResult {
    gid?: string
    message?: string
    type?: string
}

export interface ConfigurationItemUi {
    attributes?: AttributeUi[]
    metaAttributes?: MetaAttributesUi
    owner?: string
    type?: string
    uuid?: string
}

export interface ConfigurationItemSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    incidentRelationshipSet?: RelationshipUi[]
    pagination?: PaginationUi
}

export interface Configuration {
    issuerHostname?: string
    issuerPort?: string
    oauthAdminUiClientId?: string
    oauthAdminUiRedirectHostname?: string
    oauthAdminUiRedirectPort?: string
    oauthAdminUiRedirectUri?: string
    oauthAdminUiScope?: string
    portalAddress?: string
}

export type AttributeUiValue = { [key: string]: any }

export interface AttributeUi {
    name?: string
    value?: AttributeUiValue
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary getAttributeOwnership
 */
export const useGetAttributeOwnershipUsingPOSTHook = () => {
    const getAttributeOwnershipUsingPOST = useIAmSwaggerClient<ResponseOfMapOfstringAndOwnership[] | void>()

    return (getAttributeOwnershipRequest: GetAttributeOwnershipRequest[]) => {
        return getAttributeOwnershipUsingPOST({
            url: `/access_rights/attribute_ownership`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: getAttributeOwnershipRequest,
        })
    }
}

export const useGetAttributeOwnershipUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetAttributeOwnershipUsingPOSTHook>>>,
        TError,
        { data: GetAttributeOwnershipRequest[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetAttributeOwnershipUsingPOSTHook>>>,
    TError,
    { data: GetAttributeOwnershipRequest[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getAttributeOwnershipUsingPOST = useGetAttributeOwnershipUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetAttributeOwnershipUsingPOSTHook>>>,
        { data: GetAttributeOwnershipRequest[] }
    > = (props) => {
        const { data } = props ?? {}

        return getAttributeOwnershipUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetAttributeOwnershipUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAttributeOwnershipUsingPOSTHook>>>>
export type GetAttributeOwnershipUsingPOSTMutationBody = GetAttributeOwnershipRequest[]
export type GetAttributeOwnershipUsingPOSTMutationError = unknown

/**
 * @summary getAttributeOwnership
 */
export const useGetAttributeOwnershipUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetAttributeOwnershipUsingPOSTHook>>>,
        TError,
        { data: GetAttributeOwnershipRequest[] },
        TContext
    >
}) => {
    const mutationOptions = useGetAttributeOwnershipUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getOwnership
 */
export const useGetOwnershipUsingPOSTHook = () => {
    const getOwnershipUsingPOST = useIAmSwaggerClient<ResponseOfOwnership[] | void>()

    return (getOwnershipRequest: GetOwnershipRequest[]) => {
        return getOwnershipUsingPOST({
            url: `/access_rights/ownership`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: getOwnershipRequest,
        })
    }
}

export const useGetOwnershipUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetOwnershipUsingPOSTHook>>>,
        TError,
        { data: GetOwnershipRequest[] },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetOwnershipUsingPOSTHook>>>, TError, { data: GetOwnershipRequest[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getOwnershipUsingPOST = useGetOwnershipUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetOwnershipUsingPOSTHook>>>, { data: GetOwnershipRequest[] }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return getOwnershipUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetOwnershipUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetOwnershipUsingPOSTHook>>>>
export type GetOwnershipUsingPOSTMutationBody = GetOwnershipRequest[]
export type GetOwnershipUsingPOSTMutationError = unknown

/**
 * @summary getOwnership
 */
export const useGetOwnershipUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetOwnershipUsingPOSTHook>>>,
        TError,
        { data: GetOwnershipRequest[] },
        TContext
    >
}) => {
    const mutationOptions = useGetOwnershipUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary requestPermissions
 */
export const useRequestPermissionsUsingPOSTHook = () => {
    const requestPermissionsUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (userPermissionAssignData: UserPermissionAssignData) => {
        return requestPermissionsUsingPOST({
            url: `/access_rights/requestPermissions`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: userPermissionAssignData,
        })
    }
}

export const useRequestPermissionsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRequestPermissionsUsingPOSTHook>>>,
        TError,
        { data: UserPermissionAssignData },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRequestPermissionsUsingPOSTHook>>>,
    TError,
    { data: UserPermissionAssignData },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const requestPermissionsUsingPOST = useRequestPermissionsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRequestPermissionsUsingPOSTHook>>>,
        { data: UserPermissionAssignData }
    > = (props) => {
        const { data } = props ?? {}

        return requestPermissionsUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type RequestPermissionsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRequestPermissionsUsingPOSTHook>>>>
export type RequestPermissionsUsingPOSTMutationBody = UserPermissionAssignData
export type RequestPermissionsUsingPOSTMutationError = unknown

/**
 * @summary requestPermissions
 */
export const useRequestPermissionsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRequestPermissionsUsingPOSTHook>>>,
        TError,
        { data: UserPermissionAssignData },
        TContext
    >
}) => {
    const mutationOptions = useRequestPermissionsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isActive
 */
export const useIsActiveUsingGETHook = () => {
    const isActiveUsingGET = useIAmSwaggerClient<boolean>()

    return (signal?: AbortSignal) => {
        return isActiveUsingGET({ url: `/active_user`, method: 'get', signal })
    }
}

export const getIsActiveUsingGETQueryKey = () => [`/active_user`] as const

export const useIsActiveUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIsActiveUsingGETQueryKey()

    const isActiveUsingGET = useIsActiveUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>> = ({ signal }) => isActiveUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type IsActiveUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>>
export type IsActiveUsingGETQueryError = void

/**
 * @summary isActive
 */
export const useIsActiveUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsActiveUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIsActiveUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary isAlive
 */
export const useIsAliveUsingGETHook = () => {
    const isAliveUsingGET = useIAmSwaggerClient<boolean>()

    return (signal?: AbortSignal) => {
        return isAliveUsingGET({ url: `/alive`, method: 'get', signal })
    }
}

export const getIsAliveUsingGETQueryKey = () => [`/alive`] as const

export const useIsAliveUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIsAliveUsingGETQueryKey()

    const isAliveUsingGET = useIsAliveUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>> = ({ signal }) => isAliveUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type IsAliveUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>>
export type IsAliveUsingGETQueryError = void

/**
 * @summary isAlive
 */
export const useIsAliveUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsAliveUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIsAliveUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary find
 */
export const useFindUsingGETHook = () => {
    const findUsingGET = useIAmSwaggerClient<Configuration>()

    return (signal?: AbortSignal) => {
        return findUsingGET({ url: `/configuration`, method: 'get', signal })
    }
}

export const getFindUsingGETQueryKey = () => [`/configuration`] as const

export const useFindUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindUsingGETQueryKey()

    const findUsingGET = useFindUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>> = ({ signal }) => findUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>>
export type FindUsingGETQueryError = void

/**
 * @summary find
 */
export const useFindUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary generateUuids
 */
export const useGenerateUuidsUsingGETHook = () => {
    const generateUuidsUsingGET = useIAmSwaggerClient<string[]>()

    return (count: number, signal?: AbortSignal) => {
        return generateUuidsUsingGET({ url: `/configuration/generateUuids/${count}`, method: 'get', signal })
    }
}

export const getGenerateUuidsUsingGETQueryKey = (count: number) => [`/configuration/generateUuids/${count}`] as const

export const useGenerateUuidsUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>, TError = void>(
    count: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGenerateUuidsUsingGETQueryKey(count)

    const generateUuidsUsingGET = useGenerateUuidsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>> = ({ signal }) =>
        generateUuidsUsingGET(count, signal)

    return { queryKey, queryFn, enabled: !!count, ...queryOptions }
}

export type GenerateUuidsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>>
export type GenerateUuidsUsingGETQueryError = void

/**
 * @summary generateUuids
 */
export const useGenerateUuidsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>, TError = void>(
    count: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGenerateUuidsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGenerateUuidsUsingGETQueryOptions(count, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary dataChange
 */
export const useDataChangeUsingPOSTHook = () => {
    const dataChangeUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (dataChangeUsingPOSTBody: string) => {
        return dataChangeUsingPOST({
            url: `/data_synchronization`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: dataChangeUsingPOSTBody,
        })
    }
}

export const useDataChangeUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDataChangeUsingPOSTHook>>>, TError, { data: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDataChangeUsingPOSTHook>>>, TError, { data: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const dataChangeUsingPOST = useDataChangeUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDataChangeUsingPOSTHook>>>, { data: string }> = (props) => {
        const { data } = props ?? {}

        return dataChangeUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type DataChangeUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDataChangeUsingPOSTHook>>>>
export type DataChangeUsingPOSTMutationBody = string
export type DataChangeUsingPOSTMutationError = unknown

/**
 * @summary dataChange
 */
export const useDataChangeUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDataChangeUsingPOSTHook>>>, TError, { data: string }, TContext>
}) => {
    const mutationOptions = useDataChangeUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary liveness
 */
export const useLivenessUsingGETHook = () => {
    const livenessUsingGET = useIAmSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return livenessUsingGET({ url: `/endpoints/health/liveness`, method: 'get', signal })
    }
}

export const getLivenessUsingGETQueryKey = () => [`/endpoints/health/liveness`] as const

export const useLivenessUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getLivenessUsingGETQueryKey()

    const livenessUsingGET = useLivenessUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>> = ({ signal }) => livenessUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type LivenessUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>>
export type LivenessUsingGETQueryError = unknown

/**
 * @summary liveness
 */
export const useLivenessUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useLivenessUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readiness
 */
export const useReadinessUsingGETHook = () => {
    const readinessUsingGET = useIAmSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return readinessUsingGET({ url: `/endpoints/health/readiness`, method: 'get', signal })
    }
}

export const getReadinessUsingGETQueryKey = () => [`/endpoints/health/readiness`] as const

export const useReadinessUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>,
    TError = unknown,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadinessUsingGETQueryKey()

    const readinessUsingGET = useReadinessUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>> = ({ signal }) => readinessUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadinessUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>>
export type ReadinessUsingGETQueryError = unknown

/**
 * @summary readiness
 */
export const useReadinessUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadinessUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET1Hook = () => {
    const findAllUsingGET1 = useIAmSwaggerClient<RoleOrgGroup[]>()

    return (signal?: AbortSignal) => {
        return findAllUsingGET1({ url: `/gids`, method: 'get', signal })
    }
}

export const getFindAllUsingGET1QueryKey = () => [`/gids`] as const

export const useFindAllUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET1QueryKey()

    const findAllUsingGET1 = useFindAllUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>> = ({ signal }) => findAllUsingGET1(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindAllUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>>
export type FindAllUsingGET1QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET1Hook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET1QueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAkvsAdmin
 */
export const useFindAkvsAdminUsingGETHook = () => {
    const findAkvsAdminUsingGET = useIAmSwaggerClient<RoleOrgGroup>()

    return (signal?: AbortSignal) => {
        return findAkvsAdminUsingGET({ url: `/gids/akvs_admin`, method: 'get', signal })
    }
}

export const getFindAkvsAdminUsingGETQueryKey = () => [`/gids/akvs_admin`] as const

export const useFindAkvsAdminUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAkvsAdminUsingGETQueryKey()

    const findAkvsAdminUsingGET = useFindAkvsAdminUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>> = ({ signal }) => findAkvsAdminUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindAkvsAdminUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>>
export type FindAkvsAdminUsingGETQueryError = void

/**
 * @summary findAkvsAdmin
 */
export const useFindAkvsAdminUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAkvsAdminUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAkvsAdminUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findEaGarpoAdmin
 */
export const useFindEaGarpoAdminUsingGETHook = () => {
    const findEaGarpoAdminUsingGET = useIAmSwaggerClient<RoleOrgGroup>()

    return (signal?: AbortSignal) => {
        return findEaGarpoAdminUsingGET({ url: `/gids/ea_garpo_admin`, method: 'get', signal })
    }
}

export const getFindEaGarpoAdminUsingGETQueryKey = () => [`/gids/ea_garpo_admin`] as const

export const useFindEaGarpoAdminUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindEaGarpoAdminUsingGETQueryKey()

    const findEaGarpoAdminUsingGET = useFindEaGarpoAdminUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>> = ({ signal }) =>
        findEaGarpoAdminUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindEaGarpoAdminUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>>
export type FindEaGarpoAdminUsingGETQueryError = void

/**
 * @summary findEaGarpoAdmin
 */
export const useFindEaGarpoAdminUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindEaGarpoAdminUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindEaGarpoAdminUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAllWithParams
 */
export const useFindAllWithParamsUsingGETHook = () => {
    const findAllWithParamsUsingGET = useIAmSwaggerClient<RoleOrgGroupWithParams>()

    return (page: number, limit: number, params: FindAllWithParamsUsingGETParams, signal?: AbortSignal) => {
        return findAllWithParamsUsingGET({ url: `/gids/findAllWithParams/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindAllWithParamsUsingGETQueryKey = (page: number, limit: number, params: FindAllWithParamsUsingGETParams) =>
    [`/gids/findAllWithParams/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindAllWithParamsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>,
    TError = void,
>(
    page: number,
    limit: number,
    params: FindAllWithParamsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllWithParamsUsingGETQueryKey(page, limit, params)

    const findAllWithParamsUsingGET = useFindAllWithParamsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>> = ({ signal }) =>
        findAllWithParamsUsingGET(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindAllWithParamsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>>
export type FindAllWithParamsUsingGETQueryError = void

/**
 * @summary findAllWithParams
 */
export const useFindAllWithParamsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindAllWithParamsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllWithParamsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllWithParamsUsingGETQueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary addOrGetGroup
 */
export const useAddOrGetGroupUsingGETHook = () => {
    const addOrGetGroupUsingGET = useIAmSwaggerClient<RoleOrgGroup>()

    return (roleUuid: string, orgId: string, signal?: AbortSignal) => {
        return addOrGetGroupUsingGET({ url: `/gids/getGroup/${roleUuid}/${orgId}`, method: 'get', signal })
    }
}

export const getAddOrGetGroupUsingGETQueryKey = (roleUuid: string, orgId: string) => [`/gids/getGroup/${roleUuid}/${orgId}`] as const

export const useAddOrGetGroupUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>, TError = void>(
    roleUuid: string,
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getAddOrGetGroupUsingGETQueryKey(roleUuid, orgId)

    const addOrGetGroupUsingGET = useAddOrGetGroupUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>> = ({ signal }) =>
        addOrGetGroupUsingGET(roleUuid, orgId, signal)

    return { queryKey, queryFn, enabled: !!(roleUuid && orgId), ...queryOptions }
}

export type AddOrGetGroupUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>>
export type AddOrGetGroupUsingGETQueryError = void

/**
 * @summary addOrGetGroup
 */
export const useAddOrGetGroupUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>, TError = void>(
    roleUuid: string,
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAddOrGetGroupUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useAddOrGetGroupUsingGETQueryOptions(roleUuid, orgId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary find
 */
export const useFindUsingPOSTHook = () => {
    const findUsingPOST = useIAmSwaggerClient<MessageGid[] | void>()

    return (findUsingPOSTGidsBody: FindUsingPOSTGidsBody) => {
        return findUsingPOST({ url: `/gids/gidList`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: findUsingPOSTGidsBody })
    }
}

export const useFindUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingPOSTHook>>>, TError, { data: FindUsingPOSTGidsBody }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingPOSTHook>>>, TError, { data: FindUsingPOSTGidsBody }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const findUsingPOST = useFindUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFindUsingPOSTHook>>>, { data: FindUsingPOSTGidsBody }> = (props) => {
        const { data } = props ?? {}

        return findUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type FindUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindUsingPOSTHook>>>>
export type FindUsingPOSTMutationBody = FindUsingPOSTGidsBody
export type FindUsingPOSTMutationError = unknown

/**
 * @summary find
 */
export const useFindUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingPOSTHook>>>, TError, { data: FindUsingPOSTGidsBody }, TContext>
}) => {
    const mutationOptions = useFindUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isInPoByGid
 */
export const useIsInPoByGidUsingPOSTHook = () => {
    const isInPoByGidUsingPOST = useIAmSwaggerClient<IsInPoByGidOutput | void>()

    return (isInPoByGidInput: IsInPoByGidInput) => {
        return isInPoByGidUsingPOST({
            url: `/gids/isInPoByGid`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: isInPoByGidInput,
        })
    }
}

export const useIsInPoByGidUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOSTHook>>>, TError, { data: IsInPoByGidInput }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOSTHook>>>, TError, { data: IsInPoByGidInput }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const isInPoByGidUsingPOST = useIsInPoByGidUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOSTHook>>>, { data: IsInPoByGidInput }> = (props) => {
        const { data } = props ?? {}

        return isInPoByGidUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsInPoByGidUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOSTHook>>>>
export type IsInPoByGidUsingPOSTMutationBody = IsInPoByGidInput
export type IsInPoByGidUsingPOSTMutationError = unknown

/**
 * @summary isInPoByGid
 */
export const useIsInPoByGidUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOSTHook>>>, TError, { data: IsInPoByGidInput }, TContext>
}) => {
    const mutationOptions = useIsInPoByGidUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findNeidentAdmin
 */
export const useFindNeidentAdminUsingGETHook = () => {
    const findNeidentAdminUsingGET = useIAmSwaggerClient<RoleOrgGroup>()

    return (signal?: AbortSignal) => {
        return findNeidentAdminUsingGET({ url: `/gids/neident_admin`, method: 'get', signal })
    }
}

export const getFindNeidentAdminUsingGETQueryKey = () => [`/gids/neident_admin`] as const

export const useFindNeidentAdminUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindNeidentAdminUsingGETQueryKey()

    const findNeidentAdminUsingGET = useFindNeidentAdminUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>> = ({ signal }) =>
        findNeidentAdminUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindNeidentAdminUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>>
export type FindNeidentAdminUsingGETQueryError = void

/**
 * @summary findNeidentAdmin
 */
export const useFindNeidentAdminUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindNeidentAdminUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindNeidentAdminUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAll
 */
export const useFindAllUsingGETHook = () => {
    const findAllUsingGET = useIAmSwaggerClient<RoleOrgGroup[]>()

    return (page: number, limit: number, signal?: AbortSignal) => {
        return findAllUsingGET({ url: `/gids/page/${page}/${limit}`, method: 'get', signal })
    }
}

export const getFindAllUsingGETQueryKey = (page: number, limit: number) => [`/gids/page/${page}/${limit}`] as const

export const useFindAllUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGETQueryKey(page, limit)

    const findAllUsingGET = useFindAllUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>> = ({ signal }) =>
        findAllUsingGET(page, limit, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindAllUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>>
export type FindAllUsingGETQueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGETQueryOptions(page, limit, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getPages
 */
export const useGetPagesUsingGETHook = () => {
    const getPagesUsingGET = useIAmSwaggerClient<number>()

    return (signal?: AbortSignal) => {
        return getPagesUsingGET({ url: `/gids/pages`, method: 'get', signal })
    }
}

export const getGetPagesUsingGETQueryKey = () => [`/gids/pages`] as const

export const useGetPagesUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPagesUsingGETQueryKey()

    const getPagesUsingGET = useGetPagesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>> = ({ signal }) => getPagesUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPagesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>>
export type GetPagesUsingGETQueryError = void

/**
 * @summary getPages
 */
export const useGetPagesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPagesUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary find
 */
export const useFindUsingGET1Hook = () => {
    const findUsingGET1 = useIAmSwaggerClient<RoleOrgGroup>()

    return (gid: string, signal?: AbortSignal) => {
        return findUsingGET1({ url: `/gids/${gid}`, method: 'get', signal })
    }
}

export const getFindUsingGET1QueryKey = (gid: string) => [`/gids/${gid}`] as const

export const useFindUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>, TError = void>(
    gid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindUsingGET1QueryKey(gid)

    const findUsingGET1 = useFindUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>> = ({ signal }) => findUsingGET1(gid, signal)

    return { queryKey, queryFn, enabled: !!gid, ...queryOptions }
}

export type FindUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>>
export type FindUsingGET1QueryError = void

/**
 * @summary find
 */
export const useFindUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>, TError = void>(
    gid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindUsingGET1QueryOptions(gid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedIdentites
 */
export const useFindRelatedIdentitesUsingGETHook = () => {
    const findRelatedIdentitesUsingGET = useIAmSwaggerClient<Identity[]>()

    return (gid: string, signal?: AbortSignal) => {
        return findRelatedIdentitesUsingGET({ url: `/gids/${gid}/identities`, method: 'get', signal })
    }
}

export const getFindRelatedIdentitesUsingGETQueryKey = (gid: string) => [`/gids/${gid}/identities`] as const

export const useFindRelatedIdentitesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>,
    TError = void,
>(
    gid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitesUsingGETQueryKey(gid)

    const findRelatedIdentitesUsingGET = useFindRelatedIdentitesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>> = ({ signal }) =>
        findRelatedIdentitesUsingGET(gid, signal)

    return { queryKey, queryFn, enabled: !!gid, ...queryOptions }
}

export type FindRelatedIdentitesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>>
export type FindRelatedIdentitesUsingGETQueryError = void

/**
 * @summary findRelatedIdentites
 */
export const useFindRelatedIdentitesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>, TError = void>(
    gid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitesUsingGETQueryOptions(gid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findByShortName
 */
export const useFindByShortNameUsingGETHook = () => {
    const findByShortNameUsingGET = useIAmSwaggerClient<Group>()

    return (params: FindByShortNameUsingGETParams, signal?: AbortSignal) => {
        return findByShortNameUsingGET({ url: `/groups`, method: 'get', params, signal })
    }
}

export const getFindByShortNameUsingGETQueryKey = (params: FindByShortNameUsingGETParams) => [`/groups`, ...(params ? [params] : [])] as const

export const useFindByShortNameUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>, TError = void>(
    params: FindByShortNameUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByShortNameUsingGETQueryKey(params)

    const findByShortNameUsingGET = useFindByShortNameUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>> = ({ signal }) =>
        findByShortNameUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindByShortNameUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>>
export type FindByShortNameUsingGETQueryError = void

/**
 * @summary findByShortName
 */
export const useFindByShortNameUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>, TError = void>(
    params: FindByShortNameUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByShortNameUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByShortNameUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary updateOrCreate
 */
export const useUpdateOrCreateUsingPOSTHook = () => {
    const updateOrCreateUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (group: Group) => {
        return updateOrCreateUsingPOST({ url: `/groups`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: group })
    }
}

export const useUpdateOrCreateUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOSTHook>>>, TError, { data: Group }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOSTHook>>>, TError, { data: Group }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateOrCreateUsingPOST = useUpdateOrCreateUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOSTHook>>>, { data: Group }> = (props) => {
        const { data } = props ?? {}

        return updateOrCreateUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateOrCreateUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOSTHook>>>>
export type UpdateOrCreateUsingPOSTMutationBody = Group
export type UpdateOrCreateUsingPOSTMutationError = unknown

/**
 * @summary updateOrCreate
 */
export const useUpdateOrCreateUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOSTHook>>>, TError, { data: Group }, TContext>
}) => {
    const mutationOptions = useUpdateOrCreateUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getStdHistory
 */
export const useGetStdHistoryUsingGETHook = () => {
    const getStdHistoryUsingGET = useIAmSwaggerClient<StdHistory[]>()

    return (params: GetStdHistoryUsingGETParams, signal?: AbortSignal) => {
        return getStdHistoryUsingGET({ url: `/groups/getHistory/`, method: 'get', params, signal })
    }
}

export const getGetStdHistoryUsingGETQueryKey = (params: GetStdHistoryUsingGETParams) => [`/groups/getHistory/`, ...(params ? [params] : [])] as const

export const useGetStdHistoryUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>, TError = void>(
    params: GetStdHistoryUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetStdHistoryUsingGETQueryKey(params)

    const getStdHistoryUsingGET = useGetStdHistoryUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>> = ({ signal }) =>
        getStdHistoryUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetStdHistoryUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>>
export type GetStdHistoryUsingGETQueryError = void

/**
 * @summary getStdHistory
 */
export const useGetStdHistoryUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>, TError = void>(
    params: GetStdHistoryUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetStdHistoryUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetStdHistoryUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAllWithIdentities
 */
export const useFindAllWithIdentitiesUsingGETHook = () => {
    const findAllWithIdentitiesUsingGET = useIAmSwaggerClient<GroupWithIdentities[]>()

    return (signal?: AbortSignal) => {
        return findAllWithIdentitiesUsingGET({ url: `/groups/identities`, method: 'get', signal })
    }
}

export const getFindAllWithIdentitiesUsingGETQueryKey = () => [`/groups/identities`] as const

export const useFindAllWithIdentitiesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllWithIdentitiesUsingGETQueryKey()

    const findAllWithIdentitiesUsingGET = useFindAllWithIdentitiesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>> = ({ signal }) =>
        findAllWithIdentitiesUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindAllWithIdentitiesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>>
export type FindAllWithIdentitiesUsingGETQueryError = void

/**
 * @summary findAllWithIdentities
 */
export const useFindAllWithIdentitiesUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllWithIdentitiesUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllWithIdentitiesUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET3Hook = () => {
    const findAllUsingGET3 = useIAmSwaggerClient<Group[]>()

    return (page: number, limit: number, params: FindAllUsingGET3Params, signal?: AbortSignal) => {
        return findAllUsingGET3({ url: `/groups/page/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindAllUsingGET3QueryKey = (page: number, limit: number, params: FindAllUsingGET3Params) =>
    [`/groups/page/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindAllUsingGET3QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindAllUsingGET3Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET3QueryKey(page, limit, params)

    const findAllUsingGET3 = useFindAllUsingGET3Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>> = ({ signal }) =>
        findAllUsingGET3(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindAllUsingGET3QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>>
export type FindAllUsingGET3QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET3 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindAllUsingGET3Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET3Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET3QueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getPages
 */
export const useGetPagesUsingGET1Hook = () => {
    const getPagesUsingGET1 = useIAmSwaggerClient<number>()

    return (params?: GetPagesUsingGET1Params, signal?: AbortSignal) => {
        return getPagesUsingGET1({ url: `/groups/pages`, method: 'get', params, signal })
    }
}

export const getGetPagesUsingGET1QueryKey = (params?: GetPagesUsingGET1Params) => [`/groups/pages`, ...(params ? [params] : [])] as const

export const useGetPagesUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>, TError = void>(
    params?: GetPagesUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPagesUsingGET1QueryKey(params)

    const getPagesUsingGET1 = useGetPagesUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>> = ({ signal }) => getPagesUsingGET1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPagesUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>>
export type GetPagesUsingGET1QueryError = void

/**
 * @summary getPages
 */
export const useGetPagesUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>, TError = void>(
    params?: GetPagesUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPagesUsingGET1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary addSubGroup
 */
export const useAddSubGroupUsingPUTHook = () => {
    const addSubGroupUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (groupUuid: string, subGroupUuid: string) => {
        return addSubGroupUsingPUT({ url: `/groups/${groupUuid}/groups/${subGroupUuid}`, method: 'put' })
    }
}

export const useAddSubGroupUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddSubGroupUsingPUTHook>>>,
        TError,
        { groupUuid: string; subGroupUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddSubGroupUsingPUTHook>>>,
    TError,
    { groupUuid: string; subGroupUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addSubGroupUsingPUT = useAddSubGroupUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddSubGroupUsingPUTHook>>>,
        { groupUuid: string; subGroupUuid: string }
    > = (props) => {
        const { groupUuid, subGroupUuid } = props ?? {}

        return addSubGroupUsingPUT(groupUuid, subGroupUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddSubGroupUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddSubGroupUsingPUTHook>>>>

export type AddSubGroupUsingPUTMutationError = unknown

/**
 * @summary addSubGroup
 */
export const useAddSubGroupUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddSubGroupUsingPUTHook>>>,
        TError,
        { groupUuid: string; subGroupUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useAddSubGroupUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGETHook = () => {
    const findByUuidUsingGET = useIAmSwaggerClient<Group>()

    return (uuid: string, signal?: AbortSignal) => {
        return findByUuidUsingGET({ url: `/groups/${uuid}`, method: 'get', signal })
    }
}

export const getFindByUuidUsingGETQueryKey = (uuid: string) => [`/groups/${uuid}`] as const

export const useFindByUuidUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByUuidUsingGETQueryKey(uuid)

    const findByUuidUsingGET = useFindByUuidUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>> = ({ signal }) => findByUuidUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindByUuidUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>>
export type FindByUuidUsingGETQueryError = void

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByUuidUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary delete
 */
export const useDeleteUsingDELETEHook = () => {
    const deleteUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string) => {
        return deleteUsingDELETE({ url: `/groups/${uuid}`, method: 'delete' })
    }
}

export const useDeleteUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETEHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETEHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteUsingDELETE = useDeleteUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETEHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return deleteUsingDELETE(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETEHook>>>>

export type DeleteUsingDELETEMutationError = unknown

/**
 * @summary delete
 */
export const useDeleteUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETEHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useDeleteUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findSubGroups
 */
export const useFindSubGroupsUsingGETHook = () => {
    const findSubGroupsUsingGET = useIAmSwaggerClient<Group[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findSubGroupsUsingGET({ url: `/groups/${uuid}/groups`, method: 'get', signal })
    }
}

export const getFindSubGroupsUsingGETQueryKey = (uuid: string) => [`/groups/${uuid}/groups`] as const

export const useFindSubGroupsUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubGroupsUsingGETQueryKey(uuid)

    const findSubGroupsUsingGET = useFindSubGroupsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>> = ({ signal }) =>
        findSubGroupsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindSubGroupsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>>
export type FindSubGroupsUsingGETQueryError = void

/**
 * @summary findSubGroups
 */
export const useFindSubGroupsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubGroupsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubGroupsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary deleteSubGroup
 */
export const useDeleteSubGroupUsingDELETEHook = () => {
    const deleteSubGroupUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, subGroupUuid: string) => {
        return deleteSubGroupUsingDELETE({ url: `/groups/${uuid}/groups/${subGroupUuid}`, method: 'delete' })
    }
}

export const useDeleteSubGroupUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteSubGroupUsingDELETEHook>>>,
        TError,
        { uuid: string; subGroupUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteSubGroupUsingDELETEHook>>>,
    TError,
    { uuid: string; subGroupUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteSubGroupUsingDELETE = useDeleteSubGroupUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteSubGroupUsingDELETEHook>>>,
        { uuid: string; subGroupUuid: string }
    > = (props) => {
        const { uuid, subGroupUuid } = props ?? {}

        return deleteSubGroupUsingDELETE(uuid, subGroupUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteSubGroupUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteSubGroupUsingDELETEHook>>>>

export type DeleteSubGroupUsingDELETEMutationError = unknown

/**
 * @summary deleteSubGroup
 */
export const useDeleteSubGroupUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteSubGroupUsingDELETEHook>>>,
        TError,
        { uuid: string; subGroupUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteSubGroupUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET1Hook = () => {
    const findRelatedIdentitiesUsingGET1 = useIAmSwaggerClient<IdentityInGroupData[]>()

    return (uuid: string, params?: FindRelatedIdentitiesUsingGET1Params, signal?: AbortSignal) => {
        return findRelatedIdentitiesUsingGET1({ url: `/groups/${uuid}/identities`, method: 'get', params, signal })
    }
}

export const getFindRelatedIdentitiesUsingGET1QueryKey = (uuid: string, params?: FindRelatedIdentitiesUsingGET1Params) =>
    [`/groups/${uuid}/identities`, ...(params ? [params] : [])] as const

export const useFindRelatedIdentitiesUsingGET1QueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>,
    TError = void,
>(
    uuid: string,
    params?: FindRelatedIdentitiesUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesUsingGET1QueryKey(uuid, params)

    const findRelatedIdentitiesUsingGET1 = useFindRelatedIdentitiesUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>> = ({ signal }) =>
        findRelatedIdentitiesUsingGET1(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>>
export type FindRelatedIdentitiesUsingGET1QueryError = void

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET1 = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>,
    TError = void,
>(
    uuid: string,
    params?: FindRelatedIdentitiesUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesUsingGET1QueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getRelatedIdentitiesEmails
 */
export const useGetRelatedIdentitiesEmailsUsingGETHook = () => {
    const getRelatedIdentitiesEmailsUsingGET = useIAmSwaggerClient<string>()

    return (uuid: string, signal?: AbortSignal) => {
        return getRelatedIdentitiesEmailsUsingGET({ url: `/groups/${uuid}/identities/emails`, method: 'get', signal })
    }
}

export const getGetRelatedIdentitiesEmailsUsingGETQueryKey = (uuid: string) => [`/groups/${uuid}/identities/emails`] as const

export const useGetRelatedIdentitiesEmailsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRelatedIdentitiesEmailsUsingGETQueryKey(uuid)

    const getRelatedIdentitiesEmailsUsingGET = useGetRelatedIdentitiesEmailsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>> = ({ signal }) =>
        getRelatedIdentitiesEmailsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetRelatedIdentitiesEmailsUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>
>
export type GetRelatedIdentitiesEmailsUsingGETQueryError = void

/**
 * @summary getRelatedIdentitiesEmails
 */
export const useGetRelatedIdentitiesEmailsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRelatedIdentitiesEmailsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRelatedIdentitiesEmailsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedIdentitiesAndCount
 */
export const useFindRelatedIdentitiesAndCountUsingGETHook = () => {
    const findRelatedIdentitiesAndCountUsingGET = useIAmSwaggerClient<IdentitiesInGroupAndCount>()

    return (uuid: string, params?: FindRelatedIdentitiesAndCountUsingGETParams, signal?: AbortSignal) => {
        return findRelatedIdentitiesAndCountUsingGET({ url: `/groups/${uuid}/identitiesAndCount`, method: 'get', params, signal })
    }
}

export const getFindRelatedIdentitiesAndCountUsingGETQueryKey = (uuid: string, params?: FindRelatedIdentitiesAndCountUsingGETParams) =>
    [`/groups/${uuid}/identitiesAndCount`, ...(params ? [params] : [])] as const

export const useFindRelatedIdentitiesAndCountUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: FindRelatedIdentitiesAndCountUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesAndCountUsingGETQueryKey(uuid, params)

    const findRelatedIdentitiesAndCountUsingGET = useFindRelatedIdentitiesAndCountUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>> = ({ signal }) =>
        findRelatedIdentitiesAndCountUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesAndCountUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>
>
export type FindRelatedIdentitiesAndCountUsingGETQueryError = void

/**
 * @summary findRelatedIdentitiesAndCount
 */
export const useFindRelatedIdentitiesAndCountUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: FindRelatedIdentitiesAndCountUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesAndCountUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesAndCountUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGETHook = () => {
    const findRelatedIdentitiesUsingGET = useIAmSwaggerClient<number>()

    return (uuid: string, params?: FindRelatedIdentitiesUsingGETParams, signal?: AbortSignal) => {
        return findRelatedIdentitiesUsingGET({ url: `/groups/${uuid}/identitiesCount`, method: 'get', params, signal })
    }
}

export const getFindRelatedIdentitiesUsingGETQueryKey = (uuid: string, params?: FindRelatedIdentitiesUsingGETParams) =>
    [`/groups/${uuid}/identitiesCount`, ...(params ? [params] : [])] as const

export const useFindRelatedIdentitiesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: FindRelatedIdentitiesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesUsingGETQueryKey(uuid, params)

    const findRelatedIdentitiesUsingGET = useFindRelatedIdentitiesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>> = ({ signal }) =>
        findRelatedIdentitiesUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>>
export type FindRelatedIdentitiesUsingGETQueryError = void

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: FindRelatedIdentitiesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findIdentityInRole
 */
export const useFindIdentityInRoleUsingGETHook = () => {
    const findIdentityInRoleUsingGET = useIAmSwaggerClient<Identity>()

    return (uuid: string, roleUuid: string, identityUuid: string, signal?: AbortSignal) => {
        return findIdentityInRoleUsingGET({ url: `/groups/${uuid}/roles/${roleUuid}/identities/${identityUuid}`, method: 'get', signal })
    }
}

export const getFindIdentityInRoleUsingGETQueryKey = (uuid: string, roleUuid: string, identityUuid: string) =>
    [`/groups/${uuid}/roles/${roleUuid}/identities/${identityUuid}`] as const

export const useFindIdentityInRoleUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    roleUuid: string,
    identityUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindIdentityInRoleUsingGETQueryKey(uuid, roleUuid, identityUuid)

    const findIdentityInRoleUsingGET = useFindIdentityInRoleUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>> = ({ signal }) =>
        findIdentityInRoleUsingGET(uuid, roleUuid, identityUuid, signal)

    return { queryKey, queryFn, enabled: !!(uuid && roleUuid && identityUuid), ...queryOptions }
}

export type FindIdentityInRoleUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>>
export type FindIdentityInRoleUsingGETQueryError = void

/**
 * @summary findIdentityInRole
 */
export const useFindIdentityInRoleUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>, TError = void>(
    uuid: string,
    roleUuid: string,
    identityUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindIdentityInRoleUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindIdentityInRoleUsingGETQueryOptions(uuid, roleUuid, identityUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET7Hook = () => {
    const findAllUsingGET7 = useIAmSwaggerClient<Identity[]>()

    return (signal?: AbortSignal) => {
        return findAllUsingGET7({ url: `/identities`, method: 'get', signal })
    }
}

export const getFindAllUsingGET7QueryKey = () => [`/identities`] as const

export const useFindAllUsingGET7QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET7QueryKey()

    const findAllUsingGET7 = useFindAllUsingGET7Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>> = ({ signal }) => findAllUsingGET7(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindAllUsingGET7QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>>
export type FindAllUsingGET7QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET7 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET7Hook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET7QueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary updateOrCreate
 */
export const useUpdateOrCreateUsingPOST1Hook = () => {
    const updateOrCreateUsingPOST1 = useIAmSwaggerClient<OperationResult | void>()

    return (identityWithoutAuthResource: IdentityWithoutAuthResource) => {
        return updateOrCreateUsingPOST1({
            url: `/identities`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityWithoutAuthResource,
        })
    }
}

export const useUpdateOrCreateUsingPOST1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST1Hook>>>,
        TError,
        { data: IdentityWithoutAuthResource },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST1Hook>>>,
    TError,
    { data: IdentityWithoutAuthResource },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateOrCreateUsingPOST1 = useUpdateOrCreateUsingPOST1Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST1Hook>>>,
        { data: IdentityWithoutAuthResource }
    > = (props) => {
        const { data } = props ?? {}

        return updateOrCreateUsingPOST1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateOrCreateUsingPOST1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST1Hook>>>>
export type UpdateOrCreateUsingPOST1MutationBody = IdentityWithoutAuthResource
export type UpdateOrCreateUsingPOST1MutationError = unknown

/**
 * @summary updateOrCreate
 */
export const useUpdateOrCreateUsingPOST1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST1Hook>>>,
        TError,
        { data: IdentityWithoutAuthResource },
        TContext
    >
}) => {
    const mutationOptions = useUpdateOrCreateUsingPOST1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary stripAccents
 */
export const useStripAccentsUsingGETHook = () => {
    const stripAccentsUsingGET = useIAmSwaggerClient<string>()

    return (input: string, signal?: AbortSignal) => {
        return stripAccentsUsingGET({ url: `/identities/accents/${input}`, method: 'get', signal })
    }
}

export const getStripAccentsUsingGETQueryKey = (input: string) => [`/identities/accents/${input}`] as const

export const useStripAccentsUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>, TError = void>(
    input: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getStripAccentsUsingGETQueryKey(input)

    const stripAccentsUsingGET = useStripAccentsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>> = ({ signal }) =>
        stripAccentsUsingGET(input, signal)

    return { queryKey, queryFn, enabled: !!input, ...queryOptions }
}

export type StripAccentsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>>
export type StripAccentsUsingGETQueryError = void

/**
 * @summary stripAccents
 */
export const useStripAccentsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>, TError = void>(
    input: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useStripAccentsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useStripAccentsUsingGETQueryOptions(input, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary availableLogin
 */
export const useAvailableLoginUsingGETHook = () => {
    const availableLoginUsingGET = useIAmSwaggerClient<string>()

    return (params: AvailableLoginUsingGETParams, signal?: AbortSignal) => {
        return availableLoginUsingGET({ url: `/identities/availableLogin`, method: 'get', params, signal })
    }
}

export const getAvailableLoginUsingGETQueryKey = (params: AvailableLoginUsingGETParams) =>
    [`/identities/availableLogin`, ...(params ? [params] : [])] as const

export const useAvailableLoginUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>, TError = void>(
    params: AvailableLoginUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getAvailableLoginUsingGETQueryKey(params)

    const availableLoginUsingGET = useAvailableLoginUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>> = ({ signal }) =>
        availableLoginUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type AvailableLoginUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>>
export type AvailableLoginUsingGETQueryError = void

/**
 * @summary availableLogin
 */
export const useAvailableLoginUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>, TError = void>(
    params: AvailableLoginUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useAvailableLoginUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useAvailableLoginUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary changeIdentityNotifications
 */
export const useChangeIdentityNotificationsUsingPOSTHook = () => {
    const changeIdentityNotificationsUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (identityNotifications: IdentityNotifications) => {
        return changeIdentityNotificationsUsingPOST({
            url: `/identities/changeIdentityNotification`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityNotifications,
        })
    }
}

export const useChangeIdentityNotificationsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityNotificationsUsingPOSTHook>>>,
        TError,
        { data: IdentityNotifications },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangeIdentityNotificationsUsingPOSTHook>>>,
    TError,
    { data: IdentityNotifications },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeIdentityNotificationsUsingPOST = useChangeIdentityNotificationsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityNotificationsUsingPOSTHook>>>,
        { data: IdentityNotifications }
    > = (props) => {
        const { data } = props ?? {}

        return changeIdentityNotificationsUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeIdentityNotificationsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useChangeIdentityNotificationsUsingPOSTHook>>>
>
export type ChangeIdentityNotificationsUsingPOSTMutationBody = IdentityNotifications
export type ChangeIdentityNotificationsUsingPOSTMutationError = unknown

/**
 * @summary changeIdentityNotifications
 */
export const useChangeIdentityNotificationsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityNotificationsUsingPOSTHook>>>,
        TError,
        { data: IdentityNotifications },
        TContext
    >
}) => {
    const mutationOptions = useChangeIdentityNotificationsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary changeIdentityProfile
 */
export const useChangeIdentityProfileUsingPOSTHook = () => {
    const changeIdentityProfileUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (identityProfile: IdentityProfile) => {
        return changeIdentityProfileUsingPOST({
            url: `/identities/changeIdentityProfile`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityProfile,
        })
    }
}

export const useChangeIdentityProfileUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityProfileUsingPOSTHook>>>,
        TError,
        { data: IdentityProfile },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangeIdentityProfileUsingPOSTHook>>>,
    TError,
    { data: IdentityProfile },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeIdentityProfileUsingPOST = useChangeIdentityProfileUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useChangeIdentityProfileUsingPOSTHook>>>, { data: IdentityProfile }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return changeIdentityProfileUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeIdentityProfileUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeIdentityProfileUsingPOSTHook>>>>
export type ChangeIdentityProfileUsingPOSTMutationBody = IdentityProfile
export type ChangeIdentityProfileUsingPOSTMutationError = unknown

/**
 * @summary changeIdentityProfile
 */
export const useChangeIdentityProfileUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityProfileUsingPOSTHook>>>,
        TError,
        { data: IdentityProfile },
        TContext
    >
}) => {
    const mutationOptions = useChangeIdentityProfileUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary changeIdentityTerms
 */
export const useChangeIdentityTermsUsingPOSTHook = () => {
    const changeIdentityTermsUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (identityTerms: IdentityTerms) => {
        return changeIdentityTermsUsingPOST({
            url: `/identities/changeIdentityTerms`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityTerms,
        })
    }
}

export const useChangeIdentityTermsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityTermsUsingPOSTHook>>>,
        TError,
        { data: IdentityTerms },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useChangeIdentityTermsUsingPOSTHook>>>, TError, { data: IdentityTerms }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeIdentityTermsUsingPOST = useChangeIdentityTermsUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useChangeIdentityTermsUsingPOSTHook>>>, { data: IdentityTerms }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return changeIdentityTermsUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeIdentityTermsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeIdentityTermsUsingPOSTHook>>>>
export type ChangeIdentityTermsUsingPOSTMutationBody = IdentityTerms
export type ChangeIdentityTermsUsingPOSTMutationError = unknown

/**
 * @summary changeIdentityTerms
 */
export const useChangeIdentityTermsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIdentityTermsUsingPOSTHook>>>,
        TError,
        { data: IdentityTerms },
        TContext
    >
}) => {
    const mutationOptions = useChangeIdentityTermsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary countByLoginLike
 */
export const useCountByLoginLikeUsingGETHook = () => {
    const countByLoginLikeUsingGET = useIAmSwaggerClient<number>()

    return (params: CountByLoginLikeUsingGETParams, signal?: AbortSignal) => {
        return countByLoginLikeUsingGET({ url: `/identities/countByLoginLike`, method: 'get', params, signal })
    }
}

export const getCountByLoginLikeUsingGETQueryKey = (params: CountByLoginLikeUsingGETParams) =>
    [`/identities/countByLoginLike`, ...(params ? [params] : [])] as const

export const useCountByLoginLikeUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>,
    TError = void,
>(
    params: CountByLoginLikeUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getCountByLoginLikeUsingGETQueryKey(params)

    const countByLoginLikeUsingGET = useCountByLoginLikeUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>> = ({ signal }) =>
        countByLoginLikeUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type CountByLoginLikeUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>>
export type CountByLoginLikeUsingGETQueryError = void

/**
 * @summary countByLoginLike
 */
export const useCountByLoginLikeUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>, TError = void>(
    params: CountByLoginLikeUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCountByLoginLikeUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useCountByLoginLikeUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary exportIdentities
 */
export const useExportIdentitiesUsingGETHook = () => {
    const exportIdentitiesUsingGET = useIAmSwaggerClient<InputStreamResource>()

    return (signal?: AbortSignal) => {
        return exportIdentitiesUsingGET({ url: `/identities/export`, method: 'get', signal })
    }
}

export const getExportIdentitiesUsingGETQueryKey = () => [`/identities/export`] as const

export const useExportIdentitiesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportIdentitiesUsingGETQueryKey()

    const exportIdentitiesUsingGET = useExportIdentitiesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>> = ({ signal }) =>
        exportIdentitiesUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportIdentitiesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>>
export type ExportIdentitiesUsingGETQueryError = void

/**
 * @summary exportIdentities
 */
export const useExportIdentitiesUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportIdentitiesUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportIdentitiesUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary find
 */
export const useFindUsingGET3Hook = () => {
    const findUsingGET3 = useIAmSwaggerClient<Identity[]>()

    return (page: number, limit: number, params: FindUsingGET3Params, signal?: AbortSignal) => {
        return findUsingGET3({ url: `/identities/find/page/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindUsingGET3QueryKey = (page: number, limit: number, params: FindUsingGET3Params) =>
    [`/identities/find/page/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindUsingGET3QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindUsingGET3Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindUsingGET3QueryKey(page, limit, params)

    const findUsingGET3 = useFindUsingGET3Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>> = ({ signal }) =>
        findUsingGET3(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindUsingGET3QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>>
export type FindUsingGET3QueryError = void

/**
 * @summary find
 */
export const useFindUsingGET3 = <TData = Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindUsingGET3Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindUsingGET3Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindUsingGET3QueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findPages
 */
export const useFindPagesUsingGETHook = () => {
    const findPagesUsingGET = useIAmSwaggerClient<number>()

    return (params: FindPagesUsingGETParams, signal?: AbortSignal) => {
        return findPagesUsingGET({ url: `/identities/find/pages`, method: 'get', params, signal })
    }
}

export const getFindPagesUsingGETQueryKey = (params: FindPagesUsingGETParams) => [`/identities/find/pages`, ...(params ? [params] : [])] as const

export const useFindPagesUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>, TError = void>(
    params: FindPagesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindPagesUsingGETQueryKey(params)

    const findPagesUsingGET = useFindPagesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>> = ({ signal }) => findPagesUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindPagesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>>
export type FindPagesUsingGETQueryError = void

/**
 * @summary findPages
 */
export const useFindPagesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>, TError = void>(
    params: FindPagesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindPagesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindPagesUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findByRoles
 */
export const useFindByRolesUsingGETHook = () => {
    const findByRolesUsingGET = useIAmSwaggerClient<Identity[]>()

    return (page: number, limit: number, params?: FindByRolesUsingGETParams, signal?: AbortSignal) => {
        return findByRolesUsingGET({ url: `/identities/findByRoles/page/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindByRolesUsingGETQueryKey = (page: number, limit: number, params?: FindByRolesUsingGETParams) =>
    [`/identities/findByRoles/page/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindByRolesUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    params?: FindByRolesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByRolesUsingGETQueryKey(page, limit, params)

    const findByRolesUsingGET = useFindByRolesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>> = ({ signal }) =>
        findByRolesUsingGET(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindByRolesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>>
export type FindByRolesUsingGETQueryError = void

/**
 * @summary findByRoles
 */
export const useFindByRolesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    params?: FindByRolesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByRolesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByRolesUsingGETQueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findPagesByRoles
 */
export const useFindPagesByRolesUsingGETHook = () => {
    const findPagesByRolesUsingGET = useIAmSwaggerClient<number>()

    return (params?: FindPagesByRolesUsingGETParams, signal?: AbortSignal) => {
        return findPagesByRolesUsingGET({ url: `/identities/findByRoles/pages`, method: 'get', params, signal })
    }
}

export const getFindPagesByRolesUsingGETQueryKey = (params?: FindPagesByRolesUsingGETParams) =>
    [`/identities/findByRoles/pages`, ...(params ? [params] : [])] as const

export const useFindPagesByRolesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>,
    TError = void,
>(
    params?: FindPagesByRolesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindPagesByRolesUsingGETQueryKey(params)

    const findPagesByRolesUsingGET = useFindPagesByRolesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>> = ({ signal }) =>
        findPagesByRolesUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindPagesByRolesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>>
export type FindPagesByRolesUsingGETQueryError = void

/**
 * @summary findPagesByRoles
 */
export const useFindPagesByRolesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>, TError = void>(
    params?: FindPagesByRolesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindPagesByRolesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindPagesByRolesUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findNotRelatedWith
 */
export const useFindNotRelatedWithUsingGETHook = () => {
    const findNotRelatedWithUsingGET = useIAmSwaggerClient<Identity[]>()

    return (page: number, limit: number, params: FindNotRelatedWithUsingGETParams, signal?: AbortSignal) => {
        return findNotRelatedWithUsingGET({ url: `/identities/findNotRelatedWith/page/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindNotRelatedWithUsingGETQueryKey = (page: number, limit: number, params: FindNotRelatedWithUsingGETParams) =>
    [`/identities/findNotRelatedWith/page/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindNotRelatedWithUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>,
    TError = void,
>(
    page: number,
    limit: number,
    params: FindNotRelatedWithUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindNotRelatedWithUsingGETQueryKey(page, limit, params)

    const findNotRelatedWithUsingGET = useFindNotRelatedWithUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>> = ({ signal }) =>
        findNotRelatedWithUsingGET(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindNotRelatedWithUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>>
export type FindNotRelatedWithUsingGETQueryError = void

/**
 * @summary findNotRelatedWith
 */
export const useFindNotRelatedWithUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindNotRelatedWithUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindNotRelatedWithUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindNotRelatedWithUsingGETQueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findOrganizationsForList
 */
export const useFindOrganizationsForListUsingPOSTHook = () => {
    const findOrganizationsForListUsingPOST = useIAmSwaggerClient<StringList[] | void>()

    return (findOrganizationsForListUsingPOSTUuidsBody: FindOrganizationsForListUsingPOSTUuidsBody) => {
        return findOrganizationsForListUsingPOST({
            url: `/identities/findOrganizationsForList`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: findOrganizationsForListUsingPOSTUuidsBody,
        })
    }
}

export const useFindOrganizationsForListUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindOrganizationsForListUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFindOrganizationsForListUsingPOSTHook>>>,
    TError,
    { data: FindOrganizationsForListUsingPOSTUuidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const findOrganizationsForListUsingPOST = useFindOrganizationsForListUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useFindOrganizationsForListUsingPOSTHook>>>,
        { data: FindOrganizationsForListUsingPOSTUuidsBody }
    > = (props) => {
        const { data } = props ?? {}

        return findOrganizationsForListUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type FindOrganizationsForListUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindOrganizationsForListUsingPOSTHook>>>
>
export type FindOrganizationsForListUsingPOSTMutationBody = FindOrganizationsForListUsingPOSTUuidsBody
export type FindOrganizationsForListUsingPOSTMutationError = unknown

/**
 * @summary findOrganizationsForList
 */
export const useFindOrganizationsForListUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindOrganizationsForListUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}) => {
    const mutationOptions = useFindOrganizationsForListUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getByUuidBulk
 */
export const useGetByUuidBulkUsingPOSTHook = () => {
    const getByUuidBulkUsingPOST = useIAmSwaggerClient<IdentityWithResult[] | void>()

    return (findOrganizationsForListUsingPOSTUuidsBody: FindOrganizationsForListUsingPOSTUuidsBody) => {
        return getByUuidBulkUsingPOST({
            url: `/identities/getByUuidBulk`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: findOrganizationsForListUsingPOSTUuidsBody,
        })
    }
}

export const useGetByUuidBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetByUuidBulkUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetByUuidBulkUsingPOSTHook>>>,
    TError,
    { data: FindOrganizationsForListUsingPOSTUuidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getByUuidBulkUsingPOST = useGetByUuidBulkUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetByUuidBulkUsingPOSTHook>>>,
        { data: FindOrganizationsForListUsingPOSTUuidsBody }
    > = (props) => {
        const { data } = props ?? {}

        return getByUuidBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetByUuidBulkUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetByUuidBulkUsingPOSTHook>>>>
export type GetByUuidBulkUsingPOSTMutationBody = FindOrganizationsForListUsingPOSTUuidsBody
export type GetByUuidBulkUsingPOSTMutationError = unknown

/**
 * @summary getByUuidBulk
 */
export const useGetByUuidBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetByUuidBulkUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}) => {
    const mutationOptions = useGetByUuidBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getHkoRolesBlacklist
 */
export const useGetHkoRolesBlacklistUsingGETHook = () => {
    const getHkoRolesBlacklistUsingGET = useIAmSwaggerClient<string[]>()

    return (signal?: AbortSignal) => {
        return getHkoRolesBlacklistUsingGET({ url: `/identities/getHkoRolesBlacklist`, method: 'get', signal })
    }
}

export const getGetHkoRolesBlacklistUsingGETQueryKey = () => [`/identities/getHkoRolesBlacklist`] as const

export const useGetHkoRolesBlacklistUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetHkoRolesBlacklistUsingGETQueryKey()

    const getHkoRolesBlacklistUsingGET = useGetHkoRolesBlacklistUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>> = ({ signal }) =>
        getHkoRolesBlacklistUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetHkoRolesBlacklistUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>>
export type GetHkoRolesBlacklistUsingGETQueryError = void

/**
 * @summary getHkoRolesBlacklist
 */
export const useGetHkoRolesBlacklistUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHkoRolesBlacklistUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetHkoRolesBlacklistUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getIdentitiesByLoginsBulk
 */
export const useGetIdentitiesByLoginsBulkUsingPOSTHook = () => {
    const getIdentitiesByLoginsBulkUsingPOST = useIAmSwaggerClient<FindByLoginOut[] | void>()

    return (getIdentitiesByLoginsBulkUsingPOSTBody: string[]) => {
        return getIdentitiesByLoginsBulkUsingPOST({
            url: `/identities/getIdentitiesByLoginsBulk/`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: getIdentitiesByLoginsBulkUsingPOSTBody,
        })
    }
}

export const useGetIdentitiesByLoginsBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetIdentitiesByLoginsBulkUsingPOSTHook>>>,
        TError,
        { data: string[] },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetIdentitiesByLoginsBulkUsingPOSTHook>>>, TError, { data: string[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getIdentitiesByLoginsBulkUsingPOST = useGetIdentitiesByLoginsBulkUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetIdentitiesByLoginsBulkUsingPOSTHook>>>, { data: string[] }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return getIdentitiesByLoginsBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetIdentitiesByLoginsBulkUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetIdentitiesByLoginsBulkUsingPOSTHook>>>
>
export type GetIdentitiesByLoginsBulkUsingPOSTMutationBody = string[]
export type GetIdentitiesByLoginsBulkUsingPOSTMutationError = unknown

/**
 * @summary getIdentitiesByLoginsBulk
 */
export const useGetIdentitiesByLoginsBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetIdentitiesByLoginsBulkUsingPOSTHook>>>,
        TError,
        { data: string[] },
        TContext
    >
}) => {
    const mutationOptions = useGetIdentitiesByLoginsBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getIdentityTerms
 */
export const useGetIdentityTermsUsingGETHook = () => {
    const getIdentityTermsUsingGET = useIAmSwaggerClient<IdentityTermsWithEntity>()

    return (signal?: AbortSignal) => {
        return getIdentityTermsUsingGET({ url: `/identities/getIdentityTerms`, method: 'get', signal })
    }
}

export const getGetIdentityTermsUsingGETQueryKey = () => [`/identities/getIdentityTerms`] as const

export const useGetIdentityTermsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetIdentityTermsUsingGETQueryKey()

    const getIdentityTermsUsingGET = useGetIdentityTermsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>> = ({ signal }) =>
        getIdentityTermsUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetIdentityTermsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>>
export type GetIdentityTermsUsingGETQueryError = void

/**
 * @summary getIdentityTerms
 */
export const useGetIdentityTermsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetIdentityTermsUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetIdentityTermsUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getLicenseRolesList
 */
export const useGetLicenseRolesListUsingGETHook = () => {
    const getLicenseRolesListUsingGET = useIAmSwaggerClient<string[]>()

    return (signal?: AbortSignal) => {
        return getLicenseRolesListUsingGET({ url: `/identities/getLicenseRolesList`, method: 'get', signal })
    }
}

export const getGetLicenseRolesListUsingGETQueryKey = () => [`/identities/getLicenseRolesList`] as const

export const useGetLicenseRolesListUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetLicenseRolesListUsingGETQueryKey()

    const getLicenseRolesListUsingGET = useGetLicenseRolesListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>> = ({ signal }) =>
        getLicenseRolesListUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetLicenseRolesListUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>>
export type GetLicenseRolesListUsingGETQueryError = void

/**
 * @summary getLicenseRolesList
 */
export const useGetLicenseRolesListUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetLicenseRolesListUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetLicenseRolesListUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getRolesByidentityAndOrgannization
 */
export const useGetRolesByidentityAndOrgannizationUsingGETHook = () => {
    const getRolesByidentityAndOrgannizationUsingGET = useIAmSwaggerClient<Role[]>()

    return (uuid: string, cmdbId: string, signal?: AbortSignal) => {
        return getRolesByidentityAndOrgannizationUsingGET({
            url: `/identities/getRolesByidentityAndOrgannization/${uuid}/${cmdbId}`,
            method: 'get',
            signal,
        })
    }
}

export const getGetRolesByidentityAndOrgannizationUsingGETQueryKey = (uuid: string, cmdbId: string) =>
    [`/identities/getRolesByidentityAndOrgannization/${uuid}/${cmdbId}`] as const

export const useGetRolesByidentityAndOrgannizationUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    cmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRolesByidentityAndOrgannizationUsingGETQueryKey(uuid, cmdbId)

    const getRolesByidentityAndOrgannizationUsingGET = useGetRolesByidentityAndOrgannizationUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>> = ({ signal }) =>
        getRolesByidentityAndOrgannizationUsingGET(uuid, cmdbId, signal)

    return { queryKey, queryFn, enabled: !!(uuid && cmdbId), ...queryOptions }
}

export type GetRolesByidentityAndOrgannizationUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>
>
export type GetRolesByidentityAndOrgannizationUsingGETQueryError = void

/**
 * @summary getRolesByidentityAndOrgannization
 */
export const useGetRolesByidentityAndOrgannizationUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    cmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRolesByidentityAndOrgannizationUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRolesByidentityAndOrgannizationUsingGETQueryOptions(uuid, cmdbId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getStdRolesList
 */
export const useGetStdRolesListUsingGETHook = () => {
    const getStdRolesListUsingGET = useIAmSwaggerClient<string[]>()

    return (signal?: AbortSignal) => {
        return getStdRolesListUsingGET({ url: `/identities/getStdRolesList`, method: 'get', signal })
    }
}

export const getGetStdRolesListUsingGETQueryKey = () => [`/identities/getStdRolesList`] as const

export const useGetStdRolesListUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetStdRolesListUsingGETQueryKey()

    const getStdRolesListUsingGET = useGetStdRolesListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>> = ({ signal }) =>
        getStdRolesListUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetStdRolesListUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>>
export type GetStdRolesListUsingGETQueryError = void

/**
 * @summary getStdRolesList
 */
export const useGetStdRolesListUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetStdRolesListUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetStdRolesListUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary initAuthResources
 */
export const useInitAuthResourcesUsingGETHook = () => {
    const initAuthResourcesUsingGET = useIAmSwaggerClient<OperationResult[]>()

    return (signal?: AbortSignal) => {
        return initAuthResourcesUsingGET({ url: `/identities/initAuthResource`, method: 'get', signal })
    }
}

export const getInitAuthResourcesUsingGETQueryKey = () => [`/identities/initAuthResource`] as const

export const useInitAuthResourcesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getInitAuthResourcesUsingGETQueryKey()

    const initAuthResourcesUsingGET = useInitAuthResourcesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>> = ({ signal }) =>
        initAuthResourcesUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type InitAuthResourcesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>>
export type InitAuthResourcesUsingGETQueryError = void

/**
 * @summary initAuthResources
 */
export const useInitAuthResourcesUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useInitAuthResourcesUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useInitAuthResourcesUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary isAdminBulk
 */
export const useIsAdminBulkUsingPOSTHook = () => {
    const isAdminBulkUsingPOST = useIAmSwaggerClient<IdentityUuidWithState[] | void>()

    return (findOrganizationsForListUsingPOSTUuidsBody: FindOrganizationsForListUsingPOSTUuidsBody) => {
        return isAdminBulkUsingPOST({
            url: `/identities/isAdminBulk`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: findOrganizationsForListUsingPOSTUuidsBody,
        })
    }
}

export const useIsAdminBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useIsAdminBulkUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useIsAdminBulkUsingPOSTHook>>>,
    TError,
    { data: FindOrganizationsForListUsingPOSTUuidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const isAdminBulkUsingPOST = useIsAdminBulkUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useIsAdminBulkUsingPOSTHook>>>,
        { data: FindOrganizationsForListUsingPOSTUuidsBody }
    > = (props) => {
        const { data } = props ?? {}

        return isAdminBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsAdminBulkUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsAdminBulkUsingPOSTHook>>>>
export type IsAdminBulkUsingPOSTMutationBody = FindOrganizationsForListUsingPOSTUuidsBody
export type IsAdminBulkUsingPOSTMutationError = unknown

/**
 * @summary isAdminBulk
 */
export const useIsAdminBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useIsAdminBulkUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}) => {
    const mutationOptions = useIsAdminBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary linkClarityUser
 */
export const useLinkClarityUserUsingPOSTHook = () => {
    const linkClarityUserUsingPOST = useIAmSwaggerClient<OperationResultGenericOfIdentity | void>()

    return (identity: Identity) => {
        return linkClarityUserUsingPOST({
            url: `/identities/linkClarityUser`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identity,
        })
    }
}

export const useLinkClarityUserUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useLinkClarityUserUsingPOSTHook>>>, TError, { data: Identity }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useLinkClarityUserUsingPOSTHook>>>, TError, { data: Identity }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const linkClarityUserUsingPOST = useLinkClarityUserUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useLinkClarityUserUsingPOSTHook>>>, { data: Identity }> = (props) => {
        const { data } = props ?? {}

        return linkClarityUserUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type LinkClarityUserUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useLinkClarityUserUsingPOSTHook>>>>
export type LinkClarityUserUsingPOSTMutationBody = Identity
export type LinkClarityUserUsingPOSTMutationError = unknown

/**
 * @summary linkClarityUser
 */
export const useLinkClarityUserUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useLinkClarityUserUsingPOSTHook>>>, TError, { data: Identity }, TContext>
}) => {
    const mutationOptions = useLinkClarityUserUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findGidDataByLogin
 */
export const useFindGidDataByLoginUsingGETHook = () => {
    const findGidDataByLoginUsingGET = useIAmSwaggerClient<GidData[]>()

    return (login: string, signal?: AbortSignal) => {
        return findGidDataByLoginUsingGET({ url: `/identities/login/${login}/gid_data`, method: 'get', signal })
    }
}

export const getFindGidDataByLoginUsingGETQueryKey = (login: string) => [`/identities/login/${login}/gid_data`] as const

export const useFindGidDataByLoginUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>,
    TError = void,
>(
    login: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindGidDataByLoginUsingGETQueryKey(login)

    const findGidDataByLoginUsingGET = useFindGidDataByLoginUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>> = ({ signal }) =>
        findGidDataByLoginUsingGET(login, signal)

    return { queryKey, queryFn, enabled: !!login, ...queryOptions }
}

export type FindGidDataByLoginUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>>
export type FindGidDataByLoginUsingGETQueryError = void

/**
 * @summary findGidDataByLogin
 */
export const useFindGidDataByLoginUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>, TError = void>(
    login: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidDataByLoginUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindGidDataByLoginUsingGETQueryOptions(login, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findSubstitutedIdentitiesLogin
 */
export const useFindSubstitutedIdentitiesLoginUsingGETHook = () => {
    const findSubstitutedIdentitiesLoginUsingGET = useIAmSwaggerClient<Identity[]>()

    return (login: string, groupUuid: string, signal?: AbortSignal) => {
        return findSubstitutedIdentitiesLoginUsingGET({ url: `/identities/login/${login}/substituted/groups/${groupUuid}`, method: 'get', signal })
    }
}

export const getFindSubstitutedIdentitiesLoginUsingGETQueryKey = (login: string, groupUuid: string) =>
    [`/identities/login/${login}/substituted/groups/${groupUuid}`] as const

export const useFindSubstitutedIdentitiesLoginUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>,
    TError = void,
>(
    login: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubstitutedIdentitiesLoginUsingGETQueryKey(login, groupUuid)

    const findSubstitutedIdentitiesLoginUsingGET = useFindSubstitutedIdentitiesLoginUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>> = ({ signal }) =>
        findSubstitutedIdentitiesLoginUsingGET(login, groupUuid, signal)

    return { queryKey, queryFn, enabled: !!(login && groupUuid), ...queryOptions }
}

export type FindSubstitutedIdentitiesLoginUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>
>
export type FindSubstitutedIdentitiesLoginUsingGETQueryError = void

/**
 * @summary findSubstitutedIdentitiesLogin
 */
export const useFindSubstitutedIdentitiesLoginUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>,
    TError = void,
>(
    login: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesLoginUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubstitutedIdentitiesLoginUsingGETQueryOptions(login, groupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findSubstitutedByLogin
 */
export const useFindSubstitutedByLoginUsingGETHook = () => {
    const findSubstitutedByLoginUsingGET = useIAmSwaggerClient<Identity[]>()

    return (login: string, groupUuid: string, signal?: AbortSignal) => {
        return findSubstitutedByLoginUsingGET({ url: `/identities/login/${login}/substitutedBy/groups/${groupUuid}`, method: 'get', signal })
    }
}

export const getFindSubstitutedByLoginUsingGETQueryKey = (login: string, groupUuid: string) =>
    [`/identities/login/${login}/substitutedBy/groups/${groupUuid}`] as const

export const useFindSubstitutedByLoginUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>,
    TError = void,
>(
    login: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubstitutedByLoginUsingGETQueryKey(login, groupUuid)

    const findSubstitutedByLoginUsingGET = useFindSubstitutedByLoginUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>> = ({ signal }) =>
        findSubstitutedByLoginUsingGET(login, groupUuid, signal)

    return { queryKey, queryFn, enabled: !!(login && groupUuid), ...queryOptions }
}

export type FindSubstitutedByLoginUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>>
export type FindSubstitutedByLoginUsingGETQueryError = void

/**
 * @summary findSubstitutedByLogin
 */
export const useFindSubstitutedByLoginUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>,
    TError = void,
>(
    login: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByLoginUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubstitutedByLoginUsingGETQueryOptions(login, groupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary changeIdentitySubstitute
 */
export const useChangeIdentitySubstituteUsingGETHook = () => {
    const changeIdentitySubstituteUsingGET = useIAmSwaggerClient<OperationResult>()

    return (oldUuid: string, newUuid: string, substitutesUuid: string, groupUuid: string, signal?: AbortSignal) => {
        return changeIdentitySubstituteUsingGET({
            url: `/identities/old/${oldUuid}/new/${newUuid}/substitutes/${substitutesUuid}/groups/${groupUuid}`,
            method: 'get',
            signal,
        })
    }
}

export const getChangeIdentitySubstituteUsingGETQueryKey = (oldUuid: string, newUuid: string, substitutesUuid: string, groupUuid: string) =>
    [`/identities/old/${oldUuid}/new/${newUuid}/substitutes/${substitutesUuid}/groups/${groupUuid}`] as const

export const useChangeIdentitySubstituteUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>,
    TError = void,
>(
    oldUuid: string,
    newUuid: string,
    substitutesUuid: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getChangeIdentitySubstituteUsingGETQueryKey(oldUuid, newUuid, substitutesUuid, groupUuid)

    const changeIdentitySubstituteUsingGET = useChangeIdentitySubstituteUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>> = ({ signal }) =>
        changeIdentitySubstituteUsingGET(oldUuid, newUuid, substitutesUuid, groupUuid, signal)

    return { queryKey, queryFn, enabled: !!(oldUuid && newUuid && substitutesUuid && groupUuid), ...queryOptions }
}

export type ChangeIdentitySubstituteUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>>
export type ChangeIdentitySubstituteUsingGETQueryError = void

/**
 * @summary changeIdentitySubstitute
 */
export const useChangeIdentitySubstituteUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>,
    TError = void,
>(
    oldUuid: string,
    newUuid: string,
    substitutesUuid: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useChangeIdentitySubstituteUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useChangeIdentitySubstituteUsingGETQueryOptions(oldUuid, newUuid, substitutesUuid, groupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET5Hook = () => {
    const findAllUsingGET5 = useIAmSwaggerClient<Identity[]>()

    return (page: number, limit: number, signal?: AbortSignal) => {
        return findAllUsingGET5({ url: `/identities/page/${page}/${limit}`, method: 'get', signal })
    }
}

export const getFindAllUsingGET5QueryKey = (page: number, limit: number) => [`/identities/page/${page}/${limit}`] as const

export const useFindAllUsingGET5QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>, TError = void>(
    page: number,
    limit: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET5QueryKey(page, limit)

    const findAllUsingGET5 = useFindAllUsingGET5Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>> = ({ signal }) =>
        findAllUsingGET5(page, limit, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindAllUsingGET5QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>>
export type FindAllUsingGET5QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET5 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>, TError = void>(
    page: number,
    limit: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET5Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET5QueryOptions(page, limit, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getPages
 */
export const useGetPagesUsingGET2Hook = () => {
    const getPagesUsingGET2 = useIAmSwaggerClient<number>()

    return (signal?: AbortSignal) => {
        return getPagesUsingGET2({ url: `/identities/pages`, method: 'get', signal })
    }
}

export const getGetPagesUsingGET2QueryKey = () => [`/identities/pages`] as const

export const useGetPagesUsingGET2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPagesUsingGET2QueryKey()

    const getPagesUsingGET2 = useGetPagesUsingGET2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>> = ({ signal }) => getPagesUsingGET2(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPagesUsingGET2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>>
export type GetPagesUsingGET2QueryError = void

/**
 * @summary getPages
 */
export const useGetPagesUsingGET2 = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET2Hook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPagesUsingGET2QueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary updateIdentityState
 */
export const useUpdateIdentityStateUsingPOSTHook = () => {
    const updateIdentityStateUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (identityUuidWithState: IdentityUuidWithState) => {
        return updateIdentityStateUsingPOST({
            url: `/identities/updateIdentityState`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityUuidWithState,
        })
    }
}

export const useUpdateIdentityStateUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIdentityStateUsingPOSTHook>>>,
        TError,
        { data: IdentityUuidWithState },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateIdentityStateUsingPOSTHook>>>,
    TError,
    { data: IdentityUuidWithState },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateIdentityStateUsingPOST = useUpdateIdentityStateUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateIdentityStateUsingPOSTHook>>>,
        { data: IdentityUuidWithState }
    > = (props) => {
        const { data } = props ?? {}

        return updateIdentityStateUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateIdentityStateUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateIdentityStateUsingPOSTHook>>>>
export type UpdateIdentityStateUsingPOSTMutationBody = IdentityUuidWithState
export type UpdateIdentityStateUsingPOSTMutationError = unknown

/**
 * @summary updateIdentityState
 */
export const useUpdateIdentityStateUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIdentityStateUsingPOSTHook>>>,
        TError,
        { data: IdentityUuidWithState },
        TContext
    >
}) => {
    const mutationOptions = useUpdateIdentityStateUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary updateOrCreateWithGid
 */
export const useUpdateOrCreateWithGidUsingPOSTHook = () => {
    const updateOrCreateWithGidUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (identityWithGidWithoutAuthResource: IdentityWithGidWithoutAuthResource) => {
        return updateOrCreateWithGidUsingPOST({
            url: `/identities/withGid`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityWithGidWithoutAuthResource,
        })
    }
}

export const useUpdateOrCreateWithGidUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateWithGidUsingPOSTHook>>>,
        TError,
        { data: IdentityWithGidWithoutAuthResource },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateWithGidUsingPOSTHook>>>,
    TError,
    { data: IdentityWithGidWithoutAuthResource },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateOrCreateWithGidUsingPOST = useUpdateOrCreateWithGidUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateWithGidUsingPOSTHook>>>,
        { data: IdentityWithGidWithoutAuthResource }
    > = (props) => {
        const { data } = props ?? {}

        return updateOrCreateWithGidUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateOrCreateWithGidUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateWithGidUsingPOSTHook>>>>
export type UpdateOrCreateWithGidUsingPOSTMutationBody = IdentityWithGidWithoutAuthResource
export type UpdateOrCreateWithGidUsingPOSTMutationError = unknown

/**
 * @summary updateOrCreateWithGid
 */
export const useUpdateOrCreateWithGidUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateWithGidUsingPOSTHook>>>,
        TError,
        { data: IdentityWithGidWithoutAuthResource },
        TContext
    >
}) => {
    const mutationOptions = useUpdateOrCreateWithGidUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary updateWithOnePoAndRoles
 */
export const useUpdateWithOnePoAndRolesUsingPOSTHook = () => {
    const updateWithOnePoAndRolesUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (identityWithOnePoAndRolesWithoutAuthResource: IdentityWithOnePoAndRolesWithoutAuthResource) => {
        return updateWithOnePoAndRolesUsingPOST({
            url: `/identities/withOnePoAndRoles`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityWithOnePoAndRolesWithoutAuthResource,
        })
    }
}

export const useUpdateWithOnePoAndRolesUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateWithOnePoAndRolesUsingPOSTHook>>>,
        TError,
        { data: IdentityWithOnePoAndRolesWithoutAuthResource },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateWithOnePoAndRolesUsingPOSTHook>>>,
    TError,
    { data: IdentityWithOnePoAndRolesWithoutAuthResource },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateWithOnePoAndRolesUsingPOST = useUpdateWithOnePoAndRolesUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateWithOnePoAndRolesUsingPOSTHook>>>,
        { data: IdentityWithOnePoAndRolesWithoutAuthResource }
    > = (props) => {
        const { data } = props ?? {}

        return updateWithOnePoAndRolesUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateWithOnePoAndRolesUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useUpdateWithOnePoAndRolesUsingPOSTHook>>>
>
export type UpdateWithOnePoAndRolesUsingPOSTMutationBody = IdentityWithOnePoAndRolesWithoutAuthResource
export type UpdateWithOnePoAndRolesUsingPOSTMutationError = unknown

/**
 * @summary updateWithOnePoAndRoles
 */
export const useUpdateWithOnePoAndRolesUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateWithOnePoAndRolesUsingPOSTHook>>>,
        TError,
        { data: IdentityWithOnePoAndRolesWithoutAuthResource },
        TContext
    >
}) => {
    const mutationOptions = useUpdateWithOnePoAndRolesUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary removeAuthResource
 */
export const useRemoveAuthResourceUsingDELETEHook = () => {
    const removeAuthResourceUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (identityUuid: string, authResourceUuid: string) => {
        return removeAuthResourceUsingDELETE({ url: `/identities/${identityUuid}/authResource/${authResourceUuid}`, method: 'delete' })
    }
}

export const useRemoveAuthResourceUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveAuthResourceUsingDELETEHook>>>,
        TError,
        { identityUuid: string; authResourceUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRemoveAuthResourceUsingDELETEHook>>>,
    TError,
    { identityUuid: string; authResourceUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeAuthResourceUsingDELETE = useRemoveAuthResourceUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRemoveAuthResourceUsingDELETEHook>>>,
        { identityUuid: string; authResourceUuid: string }
    > = (props) => {
        const { identityUuid, authResourceUuid } = props ?? {}

        return removeAuthResourceUsingDELETE(identityUuid, authResourceUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveAuthResourceUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRemoveAuthResourceUsingDELETEHook>>>>

export type RemoveAuthResourceUsingDELETEMutationError = unknown

/**
 * @summary removeAuthResource
 */
export const useRemoveAuthResourceUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveAuthResourceUsingDELETEHook>>>,
        TError,
        { identityUuid: string; authResourceUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useRemoveAuthResourceUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET1Hook = () => {
    const findByUuidUsingGET1 = useIAmSwaggerClient<Identity>()

    return (uuid: string, signal?: AbortSignal) => {
        return findByUuidUsingGET1({ url: `/identities/${uuid}`, method: 'get', signal })
    }
}

export const getFindByUuidUsingGET1QueryKey = (uuid: string) => [`/identities/${uuid}`] as const

export const useFindByUuidUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByUuidUsingGET1QueryKey(uuid)

    const findByUuidUsingGET1 = useFindByUuidUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>> = ({ signal }) =>
        findByUuidUsingGET1(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindByUuidUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>>
export type FindByUuidUsingGET1QueryError = void

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByUuidUsingGET1QueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary delete
 */
export const useDeleteUsingDELETE1Hook = () => {
    const deleteUsingDELETE1 = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string) => {
        return deleteUsingDELETE1({ url: `/identities/${uuid}`, method: 'delete' })
    }
}

export const useDeleteUsingDELETE1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE1Hook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE1Hook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteUsingDELETE1 = useDeleteUsingDELETE1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE1Hook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return deleteUsingDELETE1(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteUsingDELETE1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE1Hook>>>>

export type DeleteUsingDELETE1MutationError = unknown

/**
 * @summary delete
 */
export const useDeleteUsingDELETE1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE1Hook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useDeleteUsingDELETE1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary changePassword
 */
export const useChangePasswordUsingPUTHook = () => {
    const changePasswordUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, password: Password) => {
        return changePasswordUsingPUT({
            url: `/identities/${uuid}/change_pass`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: password,
        })
    }
}

export const useChangePasswordUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangePasswordUsingPUTHook>>>,
        TError,
        { uuid: string; data: Password },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useChangePasswordUsingPUTHook>>>, TError, { uuid: string; data: Password }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const changePasswordUsingPUT = useChangePasswordUsingPUTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useChangePasswordUsingPUTHook>>>, { uuid: string; data: Password }> = (
        props,
    ) => {
        const { uuid, data } = props ?? {}

        return changePasswordUsingPUT(uuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangePasswordUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangePasswordUsingPUTHook>>>>
export type ChangePasswordUsingPUTMutationBody = Password
export type ChangePasswordUsingPUTMutationError = unknown

/**
 * @summary changePassword
 */
export const useChangePasswordUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangePasswordUsingPUTHook>>>,
        TError,
        { uuid: string; data: Password },
        TContext
    >
}) => {
    const mutationOptions = useChangePasswordUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary detachDelete
 */
export const useDetachDeleteUsingDELETEHook = () => {
    const detachDeleteUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string) => {
        return detachDeleteUsingDELETE({ url: `/identities/${uuid}/detachDelete`, method: 'delete' })
    }
}

export const useDetachDeleteUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDetachDeleteUsingDELETEHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDetachDeleteUsingDELETEHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const detachDeleteUsingDELETE = useDetachDeleteUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDetachDeleteUsingDELETEHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return detachDeleteUsingDELETE(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DetachDeleteUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDetachDeleteUsingDELETEHook>>>>

export type DetachDeleteUsingDELETEMutationError = unknown

/**
 * @summary detachDelete
 */
export const useDetachDeleteUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDetachDeleteUsingDELETEHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useDetachDeleteUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findGidData
 */
export const useFindGidDataUsingGETHook = () => {
    const findGidDataUsingGET = useIAmSwaggerClient<GidData[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findGidDataUsingGET({ url: `/identities/${uuid}/gid_data`, method: 'get', signal })
    }
}

export const getFindGidDataUsingGETQueryKey = (uuid: string) => [`/identities/${uuid}/gid_data`] as const

export const useFindGidDataUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindGidDataUsingGETQueryKey(uuid)

    const findGidDataUsingGET = useFindGidDataUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>> = ({ signal }) =>
        findGidDataUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindGidDataUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>>
export type FindGidDataUsingGETQueryError = void

/**
 * @summary findGidData
 */
export const useFindGidDataUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidDataUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindGidDataUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedGroups
 */
export const useFindRelatedGroupsUsingGETHook = () => {
    const findRelatedGroupsUsingGET = useIAmSwaggerClient<Group[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedGroupsUsingGET({ url: `/identities/${uuid}/groups`, method: 'get', signal })
    }
}

export const getFindRelatedGroupsUsingGETQueryKey = (uuid: string) => [`/identities/${uuid}/groups`] as const

export const useFindRelatedGroupsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedGroupsUsingGETQueryKey(uuid)

    const findRelatedGroupsUsingGET = useFindRelatedGroupsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>> = ({ signal }) =>
        findRelatedGroupsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedGroupsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>>
export type FindRelatedGroupsUsingGETQueryError = void

/**
 * @summary findRelatedGroups
 */
export const useFindRelatedGroupsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedGroupsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedGroupsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary deleteGroupRelation
 */
export const useDeleteGroupRelationUsingDELETEHook = () => {
    const deleteGroupRelationUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, groupUuid: string) => {
        return deleteGroupRelationUsingDELETE({ url: `/identities/${uuid}/groups/${groupUuid}`, method: 'delete' })
    }
}

export const useDeleteGroupRelationUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteGroupRelationUsingDELETEHook>>>,
        TError,
        { uuid: string; groupUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteGroupRelationUsingDELETEHook>>>,
    TError,
    { uuid: string; groupUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteGroupRelationUsingDELETE = useDeleteGroupRelationUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteGroupRelationUsingDELETEHook>>>,
        { uuid: string; groupUuid: string }
    > = (props) => {
        const { uuid, groupUuid } = props ?? {}

        return deleteGroupRelationUsingDELETE(uuid, groupUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteGroupRelationUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteGroupRelationUsingDELETEHook>>>>

export type DeleteGroupRelationUsingDELETEMutationError = unknown

/**
 * @summary deleteGroupRelation
 */
export const useDeleteGroupRelationUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteGroupRelationUsingDELETEHook>>>,
        TError,
        { uuid: string; groupUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteGroupRelationUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary updateRoleOnGroupOrgForIdentity
 */
export const useUpdateRoleOnGroupOrgForIdentityUsingPUTHook = () => {
    const updateRoleOnGroupOrgForIdentityUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, groupUuid: string, oldRoleUuid: string, newRoleUuid: string, orgId: string) => {
        return updateRoleOnGroupOrgForIdentityUsingPUT({
            url: `/identities/${uuid}/groups/${groupUuid}/oldRole/${oldRoleUuid}/newRole/${newRoleUuid}/organizations/${orgId}`,
            method: 'put',
        })
    }
}

export const useUpdateRoleOnGroupOrgForIdentityUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateRoleOnGroupOrgForIdentityUsingPUTHook>>>,
        TError,
        { uuid: string; groupUuid: string; oldRoleUuid: string; newRoleUuid: string; orgId: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateRoleOnGroupOrgForIdentityUsingPUTHook>>>,
    TError,
    { uuid: string; groupUuid: string; oldRoleUuid: string; newRoleUuid: string; orgId: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateRoleOnGroupOrgForIdentityUsingPUT = useUpdateRoleOnGroupOrgForIdentityUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateRoleOnGroupOrgForIdentityUsingPUTHook>>>,
        { uuid: string; groupUuid: string; oldRoleUuid: string; newRoleUuid: string; orgId: string }
    > = (props) => {
        const { uuid, groupUuid, oldRoleUuid, newRoleUuid, orgId } = props ?? {}

        return updateRoleOnGroupOrgForIdentityUsingPUT(uuid, groupUuid, oldRoleUuid, newRoleUuid, orgId)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateRoleOnGroupOrgForIdentityUsingPUTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useUpdateRoleOnGroupOrgForIdentityUsingPUTHook>>>
>

export type UpdateRoleOnGroupOrgForIdentityUsingPUTMutationError = unknown

/**
 * @summary updateRoleOnGroupOrgForIdentity
 */
export const useUpdateRoleOnGroupOrgForIdentityUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateRoleOnGroupOrgForIdentityUsingPUTHook>>>,
        TError,
        { uuid: string; groupUuid: string; oldRoleUuid: string; newRoleUuid: string; orgId: string },
        TContext
    >
}) => {
    const mutationOptions = useUpdateRoleOnGroupOrgForIdentityUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary addGroupOrgRoleIdentityRelation
 */
export const useAddGroupOrgRoleIdentityRelationUsingPOSTHook = () => {
    const addGroupOrgRoleIdentityRelationUsingPOST = useIAmSwaggerClient<OperationResult | void>()

    return (
        uuid: string,
        groupUuid: string,
        roleUuid: string,
        orgId: string,
        addGroupOrgRoleIdentityRelationUsingPOSTBody: AddGroupOrgRoleIdentityRelationUsingPOSTBody,
    ) => {
        return addGroupOrgRoleIdentityRelationUsingPOST({
            url: `/identities/${uuid}/groups/${groupUuid}/roles/${roleUuid}/organizations/${orgId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: addGroupOrgRoleIdentityRelationUsingPOSTBody,
        })
    }
}

export const useAddGroupOrgRoleIdentityRelationUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddGroupOrgRoleIdentityRelationUsingPOSTHook>>>,
        TError,
        { uuid: string; groupUuid: string; roleUuid: string; orgId: string; data: AddGroupOrgRoleIdentityRelationUsingPOSTBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddGroupOrgRoleIdentityRelationUsingPOSTHook>>>,
    TError,
    { uuid: string; groupUuid: string; roleUuid: string; orgId: string; data: AddGroupOrgRoleIdentityRelationUsingPOSTBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addGroupOrgRoleIdentityRelationUsingPOST = useAddGroupOrgRoleIdentityRelationUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddGroupOrgRoleIdentityRelationUsingPOSTHook>>>,
        { uuid: string; groupUuid: string; roleUuid: string; orgId: string; data: AddGroupOrgRoleIdentityRelationUsingPOSTBody }
    > = (props) => {
        const { uuid, groupUuid, roleUuid, orgId, data } = props ?? {}

        return addGroupOrgRoleIdentityRelationUsingPOST(uuid, groupUuid, roleUuid, orgId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddGroupOrgRoleIdentityRelationUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useAddGroupOrgRoleIdentityRelationUsingPOSTHook>>>
>
export type AddGroupOrgRoleIdentityRelationUsingPOSTMutationBody = AddGroupOrgRoleIdentityRelationUsingPOSTBody
export type AddGroupOrgRoleIdentityRelationUsingPOSTMutationError = unknown

/**
 * @summary addGroupOrgRoleIdentityRelation
 */
export const useAddGroupOrgRoleIdentityRelationUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddGroupOrgRoleIdentityRelationUsingPOSTHook>>>,
        TError,
        { uuid: string; groupUuid: string; roleUuid: string; orgId: string; data: AddGroupOrgRoleIdentityRelationUsingPOSTBody },
        TContext
    >
}) => {
    const mutationOptions = useAddGroupOrgRoleIdentityRelationUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findMembershipData
 */
export const useFindMembershipDataUsingGETHook = () => {
    const findMembershipDataUsingGET = useIAmSwaggerClient<MembershipDataOut>()

    return (uuid: string, signal?: AbortSignal) => {
        return findMembershipDataUsingGET({ url: `/identities/${uuid}/membership_data`, method: 'get', signal })
    }
}

export const getFindMembershipDataUsingGETQueryKey = (uuid: string) => [`/identities/${uuid}/membership_data`] as const

export const useFindMembershipDataUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindMembershipDataUsingGETQueryKey(uuid)

    const findMembershipDataUsingGET = useFindMembershipDataUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>> = ({ signal }) =>
        findMembershipDataUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindMembershipDataUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>>
export type FindMembershipDataUsingGETQueryError = void

/**
 * @summary findMembershipData
 */
export const useFindMembershipDataUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindMembershipDataUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindMembershipDataUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedOrganizations
 */
export const useFindRelatedOrganizationsUsingGETHook = () => {
    const findRelatedOrganizationsUsingGET = useIAmSwaggerClient<Organization[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedOrganizationsUsingGET({ url: `/identities/${uuid}/organizationObjects`, method: 'get', signal })
    }
}

export const getFindRelatedOrganizationsUsingGETQueryKey = (uuid: string) => [`/identities/${uuid}/organizationObjects`] as const

export const useFindRelatedOrganizationsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedOrganizationsUsingGETQueryKey(uuid)

    const findRelatedOrganizationsUsingGET = useFindRelatedOrganizationsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>> = ({ signal }) =>
        findRelatedOrganizationsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedOrganizationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>>
export type FindRelatedOrganizationsUsingGETQueryError = void

/**
 * @summary findRelatedOrganizations
 */
export const useFindRelatedOrganizationsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedOrganizationsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findOrganizations
 */
export const useFindOrganizationsUsingGETHook = () => {
    const findOrganizationsUsingGET = useIAmSwaggerClient<string[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findOrganizationsUsingGET({ url: `/identities/${uuid}/organizations`, method: 'get', signal })
    }
}

export const getFindOrganizationsUsingGETQueryKey = (uuid: string) => [`/identities/${uuid}/organizations`] as const

export const useFindOrganizationsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindOrganizationsUsingGETQueryKey(uuid)

    const findOrganizationsUsingGET = useFindOrganizationsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>> = ({ signal }) =>
        findOrganizationsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindOrganizationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>>
export type FindOrganizationsUsingGETQueryError = void

/**
 * @summary findOrganizations
 */
export const useFindOrganizationsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindOrganizationsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedRoles
 */
export const useFindRelatedRolesUsingGETHook = () => {
    const findRelatedRolesUsingGET = useIAmSwaggerClient<RelatedRole[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedRolesUsingGET({ url: `/identities/${uuid}/roles`, method: 'get', signal })
    }
}

export const getFindRelatedRolesUsingGETQueryKey = (uuid: string) => [`/identities/${uuid}/roles`] as const

export const useFindRelatedRolesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedRolesUsingGETQueryKey(uuid)

    const findRelatedRolesUsingGET = useFindRelatedRolesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>> = ({ signal }) =>
        findRelatedRolesUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedRolesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>>
export type FindRelatedRolesUsingGETQueryError = void

/**
 * @summary findRelatedRoles
 */
export const useFindRelatedRolesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedRolesUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRoleOrgRelations
 */
export const useFindRoleOrgRelationsUsingGETHook = () => {
    const findRoleOrgRelationsUsingGET = useIAmSwaggerClient<RoleOrgIdentity[]>()

    return (uuid: string, params?: FindRoleOrgRelationsUsingGETParams, signal?: AbortSignal) => {
        return findRoleOrgRelationsUsingGET({ url: `/identities/${uuid}/roles/organizations`, method: 'get', params, signal })
    }
}

export const getFindRoleOrgRelationsUsingGETQueryKey = (uuid: string, params?: FindRoleOrgRelationsUsingGETParams) =>
    [`/identities/${uuid}/roles/organizations`, ...(params ? [params] : [])] as const

export const useFindRoleOrgRelationsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: FindRoleOrgRelationsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRoleOrgRelationsUsingGETQueryKey(uuid, params)

    const findRoleOrgRelationsUsingGET = useFindRoleOrgRelationsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>> = ({ signal }) =>
        findRoleOrgRelationsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRoleOrgRelationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>>
export type FindRoleOrgRelationsUsingGETQueryError = void

/**
 * @summary findRoleOrgRelations
 */
export const useFindRoleOrgRelationsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: FindRoleOrgRelationsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRoleOrgRelationsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRoleOrgRelation
 */
export const useFindRoleOrgRelationUsingGETHook = () => {
    const findRoleOrgRelationUsingGET = useIAmSwaggerClient<RoleOrgIdentity>()

    return (uuid: string, roleUuid: string, orgId: string, signal?: AbortSignal) => {
        return findRoleOrgRelationUsingGET({ url: `/identities/${uuid}/roles/${roleUuid}/organizations/${orgId}`, method: 'get', signal })
    }
}

export const getFindRoleOrgRelationUsingGETQueryKey = (uuid: string, roleUuid: string, orgId: string) =>
    [`/identities/${uuid}/roles/${roleUuid}/organizations/${orgId}`] as const

export const useFindRoleOrgRelationUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    roleUuid: string,
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRoleOrgRelationUsingGETQueryKey(uuid, roleUuid, orgId)

    const findRoleOrgRelationUsingGET = useFindRoleOrgRelationUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>> = ({ signal }) =>
        findRoleOrgRelationUsingGET(uuid, roleUuid, orgId, signal)

    return { queryKey, queryFn, enabled: !!(uuid && roleUuid && orgId), ...queryOptions }
}

export type FindRoleOrgRelationUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>>
export type FindRoleOrgRelationUsingGETQueryError = void

/**
 * @summary findRoleOrgRelation
 */
export const useFindRoleOrgRelationUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>, TError = void>(
    uuid: string,
    roleUuid: string,
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgRelationUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRoleOrgRelationUsingGETQueryOptions(uuid, roleUuid, orgId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary addRoleOrgRelation
 */
export const useAddRoleOrgRelationUsingPUTHook = () => {
    const addRoleOrgRelationUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, roleUuid: string, orgId: string) => {
        return addRoleOrgRelationUsingPUT({ url: `/identities/${uuid}/roles/${roleUuid}/organizations/${orgId}`, method: 'put' })
    }
}

export const useAddRoleOrgRelationUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddRoleOrgRelationUsingPUTHook>>>,
        TError,
        { uuid: string; roleUuid: string; orgId: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddRoleOrgRelationUsingPUTHook>>>,
    TError,
    { uuid: string; roleUuid: string; orgId: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addRoleOrgRelationUsingPUT = useAddRoleOrgRelationUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddRoleOrgRelationUsingPUTHook>>>,
        { uuid: string; roleUuid: string; orgId: string }
    > = (props) => {
        const { uuid, roleUuid, orgId } = props ?? {}

        return addRoleOrgRelationUsingPUT(uuid, roleUuid, orgId)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddRoleOrgRelationUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddRoleOrgRelationUsingPUTHook>>>>

export type AddRoleOrgRelationUsingPUTMutationError = unknown

/**
 * @summary addRoleOrgRelation
 */
export const useAddRoleOrgRelationUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddRoleOrgRelationUsingPUTHook>>>,
        TError,
        { uuid: string; roleUuid: string; orgId: string },
        TContext
    >
}) => {
    const mutationOptions = useAddRoleOrgRelationUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteRoleOrgRelation
 */
export const useDeleteRoleOrgRelationUsingDELETEHook = () => {
    const deleteRoleOrgRelationUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, roleUuid: string, orgId: string) => {
        return deleteRoleOrgRelationUsingDELETE({ url: `/identities/${uuid}/roles/${roleUuid}/organizations/${orgId}`, method: 'delete' })
    }
}

export const useDeleteRoleOrgRelationUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRoleOrgRelationUsingDELETEHook>>>,
        TError,
        { uuid: string; roleUuid: string; orgId: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteRoleOrgRelationUsingDELETEHook>>>,
    TError,
    { uuid: string; roleUuid: string; orgId: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteRoleOrgRelationUsingDELETE = useDeleteRoleOrgRelationUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteRoleOrgRelationUsingDELETEHook>>>,
        { uuid: string; roleUuid: string; orgId: string }
    > = (props) => {
        const { uuid, roleUuid, orgId } = props ?? {}

        return deleteRoleOrgRelationUsingDELETE(uuid, roleUuid, orgId)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteRoleOrgRelationUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteRoleOrgRelationUsingDELETEHook>>>
>

export type DeleteRoleOrgRelationUsingDELETEMutationError = unknown

/**
 * @summary deleteRoleOrgRelation
 */
export const useDeleteRoleOrgRelationUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRoleOrgRelationUsingDELETEHook>>>,
        TError,
        { uuid: string; roleUuid: string; orgId: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteRoleOrgRelationUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findSubstitutedIdentities
 */
export const useFindSubstitutedIdentitiesUsingGETHook = () => {
    const findSubstitutedIdentitiesUsingGET = useIAmSwaggerClient<Identity[]>()

    return (uuid: string, groupUuid: string, signal?: AbortSignal) => {
        return findSubstitutedIdentitiesUsingGET({ url: `/identities/${uuid}/substituted/groups/${groupUuid}`, method: 'get', signal })
    }
}

export const getFindSubstitutedIdentitiesUsingGETQueryKey = (uuid: string, groupUuid: string) =>
    [`/identities/${uuid}/substituted/groups/${groupUuid}`] as const

export const useFindSubstitutedIdentitiesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubstitutedIdentitiesUsingGETQueryKey(uuid, groupUuid)

    const findSubstitutedIdentitiesUsingGET = useFindSubstitutedIdentitiesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>> = ({ signal }) =>
        findSubstitutedIdentitiesUsingGET(uuid, groupUuid, signal)

    return { queryKey, queryFn, enabled: !!(uuid && groupUuid), ...queryOptions }
}

export type FindSubstitutedIdentitiesUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>
>
export type FindSubstitutedIdentitiesUsingGETQueryError = void

/**
 * @summary findSubstitutedIdentities
 */
export const useFindSubstitutedIdentitiesUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedIdentitiesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubstitutedIdentitiesUsingGETQueryOptions(uuid, groupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findSubstitutedBy
 */
export const useFindSubstitutedByUsingGETHook = () => {
    const findSubstitutedByUsingGET = useIAmSwaggerClient<Identity[]>()

    return (uuid: string, groupUuid: string, signal?: AbortSignal) => {
        return findSubstitutedByUsingGET({ url: `/identities/${uuid}/substitutedBy/groups/${groupUuid}`, method: 'get', signal })
    }
}

export const getFindSubstitutedByUsingGETQueryKey = (uuid: string, groupUuid: string) =>
    [`/identities/${uuid}/substitutedBy/groups/${groupUuid}`] as const

export const useFindSubstitutedByUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubstitutedByUsingGETQueryKey(uuid, groupUuid)

    const findSubstitutedByUsingGET = useFindSubstitutedByUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>> = ({ signal }) =>
        findSubstitutedByUsingGET(uuid, groupUuid, signal)

    return { queryKey, queryFn, enabled: !!(uuid && groupUuid), ...queryOptions }
}

export type FindSubstitutedByUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>>
export type FindSubstitutedByUsingGETQueryError = void

/**
 * @summary findSubstitutedBy
 */
export const useFindSubstitutedByUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>, TError = void>(
    uuid: string,
    groupUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubstitutedByUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubstitutedByUsingGETQueryOptions(uuid, groupUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary addIdentitySubstitute
 */
export const useAddIdentitySubstituteUsingPUTHook = () => {
    const addIdentitySubstituteUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, substitutesUuid: string, groupUuid: string) => {
        return addIdentitySubstituteUsingPUT({ url: `/identities/${uuid}/substitutes/${substitutesUuid}/groups/${groupUuid}`, method: 'put' })
    }
}

export const useAddIdentitySubstituteUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddIdentitySubstituteUsingPUTHook>>>,
        TError,
        { uuid: string; substitutesUuid: string; groupUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddIdentitySubstituteUsingPUTHook>>>,
    TError,
    { uuid: string; substitutesUuid: string; groupUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addIdentitySubstituteUsingPUT = useAddIdentitySubstituteUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddIdentitySubstituteUsingPUTHook>>>,
        { uuid: string; substitutesUuid: string; groupUuid: string }
    > = (props) => {
        const { uuid, substitutesUuid, groupUuid } = props ?? {}

        return addIdentitySubstituteUsingPUT(uuid, substitutesUuid, groupUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddIdentitySubstituteUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddIdentitySubstituteUsingPUTHook>>>>

export type AddIdentitySubstituteUsingPUTMutationError = unknown

/**
 * @summary addIdentitySubstitute
 */
export const useAddIdentitySubstituteUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddIdentitySubstituteUsingPUTHook>>>,
        TError,
        { uuid: string; substitutesUuid: string; groupUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useAddIdentitySubstituteUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteIdentitySubstitute
 */
export const useDeleteIdentitySubstituteUsingDELETEHook = () => {
    const deleteIdentitySubstituteUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, substitutesUuid: string, groupUuid: string) => {
        return deleteIdentitySubstituteUsingDELETE({
            url: `/identities/${uuid}/substitutes/${substitutesUuid}/groups/${groupUuid}`,
            method: 'delete',
        })
    }
}

export const useDeleteIdentitySubstituteUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteIdentitySubstituteUsingDELETEHook>>>,
        TError,
        { uuid: string; substitutesUuid: string; groupUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteIdentitySubstituteUsingDELETEHook>>>,
    TError,
    { uuid: string; substitutesUuid: string; groupUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteIdentitySubstituteUsingDELETE = useDeleteIdentitySubstituteUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteIdentitySubstituteUsingDELETEHook>>>,
        { uuid: string; substitutesUuid: string; groupUuid: string }
    > = (props) => {
        const { uuid, substitutesUuid, groupUuid } = props ?? {}

        return deleteIdentitySubstituteUsingDELETE(uuid, substitutesUuid, groupUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteIdentitySubstituteUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteIdentitySubstituteUsingDELETEHook>>>
>

export type DeleteIdentitySubstituteUsingDELETEMutationError = unknown

/**
 * @summary deleteIdentitySubstitute
 */
export const useDeleteIdentitySubstituteUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteIdentitySubstituteUsingDELETEHook>>>,
        TError,
        { uuid: string; substitutesUuid: string; groupUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteIdentitySubstituteUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET11Hook = () => {
    const findAllUsingGET11 = useIAmSwaggerClient<Organization[]>()

    return (params: FindAllUsingGET11Params, signal?: AbortSignal) => {
        return findAllUsingGET11({ url: `/organizations`, method: 'get', params, signal })
    }
}

export const getFindAllUsingGET11QueryKey = (params: FindAllUsingGET11Params) => [`/organizations`, ...(params ? [params] : [])] as const

export const useFindAllUsingGET11QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>, TError = void>(
    params: FindAllUsingGET11Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET11QueryKey(params)

    const findAllUsingGET11 = useFindAllUsingGET11Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>> = ({ signal }) => findAllUsingGET11(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindAllUsingGET11QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>>
export type FindAllUsingGET11QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET11 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>, TError = void>(
    params: FindAllUsingGET11Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET11Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET11QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getAllSubPOSet
 */
export const useGetAllSubPOSetUsingPOSTHook = () => {
    const getAllSubPOSetUsingPOST = useIAmSwaggerClient<Organization[] | void>()

    return (getAllSubPOSetUsingPOSTCmdbidsBody: GetAllSubPOSetUsingPOSTCmdbidsBody) => {
        return getAllSubPOSetUsingPOST({
            url: `/organizations/allSubPOSet`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: getAllSubPOSetUsingPOSTCmdbidsBody,
        })
    }
}

export const useGetAllSubPOSetUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetAllSubPOSetUsingPOSTHook>>>,
        TError,
        { data: GetAllSubPOSetUsingPOSTCmdbidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetAllSubPOSetUsingPOSTHook>>>,
    TError,
    { data: GetAllSubPOSetUsingPOSTCmdbidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getAllSubPOSetUsingPOST = useGetAllSubPOSetUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetAllSubPOSetUsingPOSTHook>>>,
        { data: GetAllSubPOSetUsingPOSTCmdbidsBody }
    > = (props) => {
        const { data } = props ?? {}

        return getAllSubPOSetUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetAllSubPOSetUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAllSubPOSetUsingPOSTHook>>>>
export type GetAllSubPOSetUsingPOSTMutationBody = GetAllSubPOSetUsingPOSTCmdbidsBody
export type GetAllSubPOSetUsingPOSTMutationError = unknown

/**
 * @summary getAllSubPOSet
 */
export const useGetAllSubPOSetUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetAllSubPOSetUsingPOSTHook>>>,
        TError,
        { data: GetAllSubPOSetUsingPOSTCmdbidsBody },
        TContext
    >
}) => {
    const mutationOptions = useGetAllSubPOSetUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readChanges
 */
export const useReadChangesUsingGETHook = () => {
    const readChangesUsingGET = useIAmSwaggerClient<ConfigurationItemSetUi>()

    return (params: ReadChangesUsingGETParams, signal?: AbortSignal) => {
        return readChangesUsingGET({ url: `/organizations/csru/changes`, method: 'get', params, signal })
    }
}

export const getReadChangesUsingGETQueryKey = (params: ReadChangesUsingGETParams) =>
    [`/organizations/csru/changes`, ...(params ? [params] : [])] as const

export const useReadChangesUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>, TError = void>(
    params: ReadChangesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadChangesUsingGETQueryKey(params)

    const readChangesUsingGET = useReadChangesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>> = ({ signal }) =>
        readChangesUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadChangesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>>
export type ReadChangesUsingGETQueryError = void

/**
 * @summary readChanges
 */
export const useReadChangesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>, TError = void>(
    params: ReadChangesUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadChangesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadChangesUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary approveChanges
 */
export const useApproveChangesUsingPOSTHook = () => {
    const approveChangesUsingPOST = useIAmSwaggerClient<void>()

    return () => {
        return approveChangesUsingPOST({ url: `/organizations/csru/changes/approve`, method: 'post' })
    }
}

export const useApproveChangesUsingPOSTMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useApproveChangesUsingPOSTHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useApproveChangesUsingPOSTHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const approveChangesUsingPOST = useApproveChangesUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useApproveChangesUsingPOSTHook>>>, TVariables> = () => {
        return approveChangesUsingPOST()
    }

    return { mutationFn, ...mutationOptions }
}

export type ApproveChangesUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useApproveChangesUsingPOSTHook>>>>

export type ApproveChangesUsingPOSTMutationError = unknown

/**
 * @summary approveChanges
 */
export const useApproveChangesUsingPOST = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useApproveChangesUsingPOSTHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useApproveChangesUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary generateNotificationForCsru
 */
export const useGenerateNotificationForCsruUsingPOSTHook = () => {
    const generateNotificationForCsruUsingPOST = useIAmSwaggerClient<void>()

    return (time: string) => {
        return generateNotificationForCsruUsingPOST({ url: `/organizations/csru/changes/notication/${time}`, method: 'post' })
    }
}

export const useGenerateNotificationForCsruUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGenerateNotificationForCsruUsingPOSTHook>>>,
        TError,
        { time: string },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGenerateNotificationForCsruUsingPOSTHook>>>, TError, { time: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const generateNotificationForCsruUsingPOST = useGenerateNotificationForCsruUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGenerateNotificationForCsruUsingPOSTHook>>>, { time: string }> = (
        props,
    ) => {
        const { time } = props ?? {}

        return generateNotificationForCsruUsingPOST(time)
    }

    return { mutationFn, ...mutationOptions }
}

export type GenerateNotificationForCsruUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGenerateNotificationForCsruUsingPOSTHook>>>
>

export type GenerateNotificationForCsruUsingPOSTMutationError = unknown

/**
 * @summary generateNotificationForCsru
 */
export const useGenerateNotificationForCsruUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGenerateNotificationForCsruUsingPOSTHook>>>,
        TError,
        { time: string },
        TContext
    >
}) => {
    const mutationOptions = useGenerateNotificationForCsruUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary approveChange
 */
export const useApproveChangeUsingPUTHook = () => {
    const approveChangeUsingPUT = useIAmSwaggerClient<void>()

    return (uuid: string, params?: ApproveChangeUsingPUTParams) => {
        return approveChangeUsingPUT({ url: `/organizations/csru/changes/${uuid}/approve`, method: 'put', params })
    }
}

export const useApproveChangeUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useApproveChangeUsingPUTHook>>>,
        TError,
        { uuid: string; params?: ApproveChangeUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useApproveChangeUsingPUTHook>>>,
    TError,
    { uuid: string; params?: ApproveChangeUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const approveChangeUsingPUT = useApproveChangeUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useApproveChangeUsingPUTHook>>>,
        { uuid: string; params?: ApproveChangeUsingPUTParams }
    > = (props) => {
        const { uuid, params } = props ?? {}

        return approveChangeUsingPUT(uuid, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ApproveChangeUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useApproveChangeUsingPUTHook>>>>

export type ApproveChangeUsingPUTMutationError = unknown

/**
 * @summary approveChange
 */
export const useApproveChangeUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useApproveChangeUsingPUTHook>>>,
        TError,
        { uuid: string; params?: ApproveChangeUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useApproveChangeUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary rejectChange
 */
export const useRejectChangeUsingPUTHook = () => {
    const rejectChangeUsingPUT = useIAmSwaggerClient<void>()

    return (uuid: string, params?: RejectChangeUsingPUTParams) => {
        return rejectChangeUsingPUT({ url: `/organizations/csru/changes/${uuid}/reject`, method: 'put', params })
    }
}

export const useRejectChangeUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRejectChangeUsingPUTHook>>>,
        TError,
        { uuid: string; params?: RejectChangeUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRejectChangeUsingPUTHook>>>,
    TError,
    { uuid: string; params?: RejectChangeUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const rejectChangeUsingPUT = useRejectChangeUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRejectChangeUsingPUTHook>>>,
        { uuid: string; params?: RejectChangeUsingPUTParams }
    > = (props) => {
        const { uuid, params } = props ?? {}

        return rejectChangeUsingPUT(uuid, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RejectChangeUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRejectChangeUsingPUTHook>>>>

export type RejectChangeUsingPUTMutationError = unknown

/**
 * @summary rejectChange
 */
export const useRejectChangeUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRejectChangeUsingPUTHook>>>,
        TError,
        { uuid: string; params?: RejectChangeUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useRejectChangeUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getOrganizationFromCsru
 */
export const useGetOrganizationFromCsruUsingGETHook = () => {
    const getOrganizationFromCsruUsingGET = useIAmSwaggerClient<CsruOrganization>()

    return (ico: string, signal?: AbortSignal) => {
        return getOrganizationFromCsruUsingGET({ url: `/organizations/csru/${ico}`, method: 'get', signal })
    }
}

export const getGetOrganizationFromCsruUsingGETQueryKey = (ico: string) => [`/organizations/csru/${ico}`] as const

export const useGetOrganizationFromCsruUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>,
    TError = void,
>(
    ico: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetOrganizationFromCsruUsingGETQueryKey(ico)

    const getOrganizationFromCsruUsingGET = useGetOrganizationFromCsruUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>> = ({ signal }) =>
        getOrganizationFromCsruUsingGET(ico, signal)

    return { queryKey, queryFn, enabled: !!ico, ...queryOptions }
}

export type GetOrganizationFromCsruUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>>
export type GetOrganizationFromCsruUsingGETQueryError = void

/**
 * @summary getOrganizationFromCsru
 */
export const useGetOrganizationFromCsruUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>,
    TError = void,
>(
    ico: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOrganizationFromCsruUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetOrganizationFromCsruUsingGETQueryOptions(ico, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findOrgByGidBulk
 */
export const useFindOrgByGidBulkUsingPOSTHook = () => {
    const findOrgByGidBulkUsingPOST = useIAmSwaggerClient<OrganizationWithGid[] | void>()

    return (findUsingPOSTGidsBody: FindUsingPOSTGidsBody) => {
        return findOrgByGidBulkUsingPOST({
            url: `/organizations/findOrgByGidBulk`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: findUsingPOSTGidsBody,
        })
    }
}

export const useFindOrgByGidBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindOrgByGidBulkUsingPOSTHook>>>,
        TError,
        { data: FindUsingPOSTGidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFindOrgByGidBulkUsingPOSTHook>>>,
    TError,
    { data: FindUsingPOSTGidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const findOrgByGidBulkUsingPOST = useFindOrgByGidBulkUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useFindOrgByGidBulkUsingPOSTHook>>>, { data: FindUsingPOSTGidsBody }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return findOrgByGidBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type FindOrgByGidBulkUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindOrgByGidBulkUsingPOSTHook>>>>
export type FindOrgByGidBulkUsingPOSTMutationBody = FindUsingPOSTGidsBody
export type FindOrgByGidBulkUsingPOSTMutationError = unknown

/**
 * @summary findOrgByGidBulk
 */
export const useFindOrgByGidBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindOrgByGidBulkUsingPOSTHook>>>,
        TError,
        { data: FindUsingPOSTGidsBody },
        TContext
    >
}) => {
    const mutationOptions = useFindOrgByGidBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getHighestOrganization
 */
export const useGetHighestOrganizationUsingPOSTHook = () => {
    const getHighestOrganizationUsingPOST = useIAmSwaggerClient<IdentityUuidWithHighestOrganization[] | void>()

    return (identityUuidWithGid: IdentityUuidWithGid[]) => {
        return getHighestOrganizationUsingPOST({
            url: `/organizations/getHighestOrganization`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityUuidWithGid,
        })
    }
}

export const useGetHighestOrganizationUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHighestOrganizationUsingPOSTHook>>>,
        TError,
        { data: IdentityUuidWithGid[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHighestOrganizationUsingPOSTHook>>>,
    TError,
    { data: IdentityUuidWithGid[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getHighestOrganizationUsingPOST = useGetHighestOrganizationUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetHighestOrganizationUsingPOSTHook>>>,
        { data: IdentityUuidWithGid[] }
    > = (props) => {
        const { data } = props ?? {}

        return getHighestOrganizationUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetHighestOrganizationUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetHighestOrganizationUsingPOSTHook>>>
>
export type GetHighestOrganizationUsingPOSTMutationBody = IdentityUuidWithGid[]
export type GetHighestOrganizationUsingPOSTMutationError = unknown

/**
 * @summary getHighestOrganization
 */
export const useGetHighestOrganizationUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHighestOrganizationUsingPOSTHook>>>,
        TError,
        { data: IdentityUuidWithGid[] },
        TContext
    >
}) => {
    const mutationOptions = useGetHighestOrganizationUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getOrganizationsForHko
 */
export const useGetOrganizationsForHkoUsingGETHook = () => {
    const getOrganizationsForHkoUsingGET = useIAmSwaggerClient<string[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return getOrganizationsForHkoUsingGET({ url: `/organizations/getOrganizationsForHko/${uuid}`, method: 'get', signal })
    }
}

export const getGetOrganizationsForHkoUsingGETQueryKey = (uuid: string) => [`/organizations/getOrganizationsForHko/${uuid}`] as const

export const useGetOrganizationsForHkoUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetOrganizationsForHkoUsingGETQueryKey(uuid)

    const getOrganizationsForHkoUsingGET = useGetOrganizationsForHkoUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>> = ({ signal }) =>
        getOrganizationsForHkoUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetOrganizationsForHkoUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>>
export type GetOrganizationsForHkoUsingGETQueryError = void

/**
 * @summary getOrganizationsForHko
 */
export const useGetOrganizationsForHkoUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOrganizationsForHkoUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetOrganizationsForHkoUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getOwnerRolesFromLogin
 */
export const useGetOwnerRolesFromLoginUsingGETHook = () => {
    const getOwnerRolesFromLoginUsingGET = useIAmSwaggerClient<OwnerAndRoles>()

    return (params: GetOwnerRolesFromLoginUsingGETParams, signal?: AbortSignal) => {
        return getOwnerRolesFromLoginUsingGET({ url: `/organizations/getOwnerRolesFromLogin`, method: 'get', params, signal })
    }
}

export const getGetOwnerRolesFromLoginUsingGETQueryKey = (params: GetOwnerRolesFromLoginUsingGETParams) =>
    [`/organizations/getOwnerRolesFromLogin`, ...(params ? [params] : [])] as const

export const useGetOwnerRolesFromLoginUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>,
    TError = void,
>(
    params: GetOwnerRolesFromLoginUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetOwnerRolesFromLoginUsingGETQueryKey(params)

    const getOwnerRolesFromLoginUsingGET = useGetOwnerRolesFromLoginUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>> = ({ signal }) =>
        getOwnerRolesFromLoginUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetOwnerRolesFromLoginUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>>
export type GetOwnerRolesFromLoginUsingGETQueryError = void

/**
 * @summary getOwnerRolesFromLogin
 */
export const useGetOwnerRolesFromLoginUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>,
    TError = void,
>(
    params: GetOwnerRolesFromLoginUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetOwnerRolesFromLoginUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetOwnerRolesFromLoginUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getRightsForPO
 */
export const useGetRightsForPOUsingPOSTHook = () => {
    const getRightsForPOUsingPOST = useIAmSwaggerClient<GidRoleData[] | void>()

    return (identityOrganizationInBody: IdentityOrganizationInBody) => {
        return getRightsForPOUsingPOST({
            url: `/organizations/getRightsForPO`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityOrganizationInBody,
        })
    }
}

export const useGetRightsForPOUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetRightsForPOUsingPOSTHook>>>,
        TError,
        { data: IdentityOrganizationInBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetRightsForPOUsingPOSTHook>>>,
    TError,
    { data: IdentityOrganizationInBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getRightsForPOUsingPOST = useGetRightsForPOUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetRightsForPOUsingPOSTHook>>>,
        { data: IdentityOrganizationInBody }
    > = (props) => {
        const { data } = props ?? {}

        return getRightsForPOUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetRightsForPOUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRightsForPOUsingPOSTHook>>>>
export type GetRightsForPOUsingPOSTMutationBody = IdentityOrganizationInBody
export type GetRightsForPOUsingPOSTMutationError = unknown

/**
 * @summary getRightsForPO
 */
export const useGetRightsForPOUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetRightsForPOUsingPOSTHook>>>,
        TError,
        { data: IdentityOrganizationInBody },
        TContext
    >
}) => {
    const mutationOptions = useGetRightsForPOUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getRightsForPOBulk
 */
export const useGetRightsForPOBulkUsingPOSTHook = () => {
    const getRightsForPOBulkUsingPOST = useIAmSwaggerClient<GidRoleDataHolder[] | void>()

    return (loginOrganizationIn: LoginOrganizationIn) => {
        return getRightsForPOBulkUsingPOST({
            url: `/organizations/getRightsForPOBulk`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: loginOrganizationIn,
        })
    }
}

export const useGetRightsForPOBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetRightsForPOBulkUsingPOSTHook>>>,
        TError,
        { data: LoginOrganizationIn },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetRightsForPOBulkUsingPOSTHook>>>,
    TError,
    { data: LoginOrganizationIn },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getRightsForPOBulkUsingPOST = useGetRightsForPOBulkUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetRightsForPOBulkUsingPOSTHook>>>, { data: LoginOrganizationIn }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return getRightsForPOBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetRightsForPOBulkUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRightsForPOBulkUsingPOSTHook>>>>
export type GetRightsForPOBulkUsingPOSTMutationBody = LoginOrganizationIn
export type GetRightsForPOBulkUsingPOSTMutationError = unknown

/**
 * @summary getRightsForPOBulk
 */
export const useGetRightsForPOBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetRightsForPOBulkUsingPOSTHook>>>,
        TError,
        { data: LoginOrganizationIn },
        TContext
    >
}) => {
    const mutationOptions = useGetRightsForPOBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getHierarchy
 */
export const useGetHierarchyUsingPOSTHook = () => {
    const getHierarchyUsingPOST = useIAmSwaggerClient<OrganizationHierarchyOut | void>()

    return (organizationHierarchyIn: OrganizationHierarchyIn) => {
        return getHierarchyUsingPOST({
            url: `/organizations/hierarchy`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: organizationHierarchyIn,
        })
    }
}

export const useGetHierarchyUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingPOSTHook>>>,
        TError,
        { data: OrganizationHierarchyIn },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingPOSTHook>>>, TError, { data: OrganizationHierarchyIn }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getHierarchyUsingPOST = useGetHierarchyUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingPOSTHook>>>, { data: OrganizationHierarchyIn }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return getHierarchyUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetHierarchyUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingPOSTHook>>>>
export type GetHierarchyUsingPOSTMutationBody = OrganizationHierarchyIn
export type GetHierarchyUsingPOSTMutationError = unknown

/**
 * @summary getHierarchy
 */
export const useGetHierarchyUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingPOSTHook>>>,
        TError,
        { data: OrganizationHierarchyIn },
        TContext
    >
}) => {
    const mutationOptions = useGetHierarchyUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getHierarchyFromCache
 */
export const useGetHierarchyFromCacheUsingPOSTHook = () => {
    const getHierarchyFromCacheUsingPOST = useIAmSwaggerClient<OrganizationHierarchyOut | void>()

    return (organizationHierarchyInWithoutPagination: OrganizationHierarchyInWithoutPagination) => {
        return getHierarchyFromCacheUsingPOST({
            url: `/organizations/hierarchyFromCache`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: organizationHierarchyInWithoutPagination,
        })
    }
}

export const useGetHierarchyFromCacheUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyFromCacheUsingPOSTHook>>>,
        TError,
        { data: OrganizationHierarchyInWithoutPagination },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHierarchyFromCacheUsingPOSTHook>>>,
    TError,
    { data: OrganizationHierarchyInWithoutPagination },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getHierarchyFromCacheUsingPOST = useGetHierarchyFromCacheUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyFromCacheUsingPOSTHook>>>,
        { data: OrganizationHierarchyInWithoutPagination }
    > = (props) => {
        const { data } = props ?? {}

        return getHierarchyFromCacheUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetHierarchyFromCacheUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetHierarchyFromCacheUsingPOSTHook>>>>
export type GetHierarchyFromCacheUsingPOSTMutationBody = OrganizationHierarchyInWithoutPagination
export type GetHierarchyFromCacheUsingPOSTMutationError = unknown

/**
 * @summary getHierarchyFromCache
 */
export const useGetHierarchyFromCacheUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyFromCacheUsingPOSTHook>>>,
        TError,
        { data: OrganizationHierarchyInWithoutPagination },
        TContext
    >
}) => {
    const mutationOptions = useGetHierarchyFromCacheUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isAssignedInHierarchy
 */
export const useIsAssignedInHierarchyUsingGETHook = () => {
    const isAssignedInHierarchyUsingGET = useIAmSwaggerClient<boolean>()

    return (cmdbId: string, signal?: AbortSignal) => {
        return isAssignedInHierarchyUsingGET({ url: `/organizations/isAssignedInHierarchy/${cmdbId}`, method: 'get', signal })
    }
}

export const getIsAssignedInHierarchyUsingGETQueryKey = (cmdbId: string) => [`/organizations/isAssignedInHierarchy/${cmdbId}`] as const

export const useIsAssignedInHierarchyUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>,
    TError = void,
>(
    cmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIsAssignedInHierarchyUsingGETQueryKey(cmdbId)

    const isAssignedInHierarchyUsingGET = useIsAssignedInHierarchyUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>> = ({ signal }) =>
        isAssignedInHierarchyUsingGET(cmdbId, signal)

    return { queryKey, queryFn, enabled: !!cmdbId, ...queryOptions }
}

export type IsAssignedInHierarchyUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>>
export type IsAssignedInHierarchyUsingGETQueryError = void

/**
 * @summary isAssignedInHierarchy
 */
export const useIsAssignedInHierarchyUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>, TError = void>(
    cmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsAssignedInHierarchyUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIsAssignedInHierarchyUsingGETQueryOptions(cmdbId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary isCycleInHierarchy
 */
export const useIsCycleInHierarchyUsingGETHook = () => {
    const isCycleInHierarchyUsingGET = useIAmSwaggerClient<boolean>()

    return (cmdbId: string, subCmdbId: string, signal?: AbortSignal) => {
        return isCycleInHierarchyUsingGET({ url: `/organizations/isCycleInHierarchy/${cmdbId}/sub/${subCmdbId}`, method: 'get', signal })
    }
}

export const getIsCycleInHierarchyUsingGETQueryKey = (cmdbId: string, subCmdbId: string) =>
    [`/organizations/isCycleInHierarchy/${cmdbId}/sub/${subCmdbId}`] as const

export const useIsCycleInHierarchyUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>,
    TError = void,
>(
    cmdbId: string,
    subCmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIsCycleInHierarchyUsingGETQueryKey(cmdbId, subCmdbId)

    const isCycleInHierarchyUsingGET = useIsCycleInHierarchyUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>> = ({ signal }) =>
        isCycleInHierarchyUsingGET(cmdbId, subCmdbId, signal)

    return { queryKey, queryFn, enabled: !!(cmdbId && subCmdbId), ...queryOptions }
}

export type IsCycleInHierarchyUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>>
export type IsCycleInHierarchyUsingGETQueryError = void

/**
 * @summary isCycleInHierarchy
 */
export const useIsCycleInHierarchyUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>, TError = void>(
    cmdbId: string,
    subCmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsCycleInHierarchyUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIsCycleInHierarchyUsingGETQueryOptions(cmdbId, subCmdbId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary isIdentityAssignedToPO
 */
export const useIsIdentityAssignedToPOUsingGETHook = () => {
    const isIdentityAssignedToPOUsingGET = useIAmSwaggerClient<boolean>()

    return (cmdbId: string, signal?: AbortSignal) => {
        return isIdentityAssignedToPOUsingGET({ url: `/organizations/isIdentityAssignedToPO/${cmdbId}`, method: 'get', signal })
    }
}

export const getIsIdentityAssignedToPOUsingGETQueryKey = (cmdbId: string) => [`/organizations/isIdentityAssignedToPO/${cmdbId}`] as const

export const useIsIdentityAssignedToPOUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>,
    TError = void,
>(
    cmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIsIdentityAssignedToPOUsingGETQueryKey(cmdbId)

    const isIdentityAssignedToPOUsingGET = useIsIdentityAssignedToPOUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>> = ({ signal }) =>
        isIdentityAssignedToPOUsingGET(cmdbId, signal)

    return { queryKey, queryFn, enabled: !!cmdbId, ...queryOptions }
}

export type IsIdentityAssignedToPOUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>>
export type IsIdentityAssignedToPOUsingGETQueryError = void

/**
 * @summary isIdentityAssignedToPO
 */
export const useIsIdentityAssignedToPOUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>,
    TError = void,
>(
    cmdbId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIsIdentityAssignedToPOUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIsIdentityAssignedToPOUsingGETQueryOptions(cmdbId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary isInPoByGid
 */
export const useIsInPoByGidUsingPOST1Hook = () => {
    const isInPoByGidUsingPOST1 = useIAmSwaggerClient<boolean | void>()

    return (identityOrganizationInBody: IdentityOrganizationInBody) => {
        return isInPoByGidUsingPOST1({
            url: `/organizations/isInPoByGid`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityOrganizationInBody,
        })
    }
}

export const useIsInPoByGidUsingPOST1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOST1Hook>>>,
        TError,
        { data: IdentityOrganizationInBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOST1Hook>>>,
    TError,
    { data: IdentityOrganizationInBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const isInPoByGidUsingPOST1 = useIsInPoByGidUsingPOST1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOST1Hook>>>, { data: IdentityOrganizationInBody }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return isInPoByGidUsingPOST1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsInPoByGidUsingPOST1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOST1Hook>>>>
export type IsInPoByGidUsingPOST1MutationBody = IdentityOrganizationInBody
export type IsInPoByGidUsingPOST1MutationError = unknown

/**
 * @summary isInPoByGid
 */
export const useIsInPoByGidUsingPOST1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useIsInPoByGidUsingPOST1Hook>>>,
        TError,
        { data: IdentityOrganizationInBody },
        TContext
    >
}) => {
    const mutationOptions = useIsInPoByGidUsingPOST1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isInPoByPo
 */
export const useIsInPoByPoUsingPOSTHook = () => {
    const isInPoByPoUsingPOST = useIAmSwaggerClient<IdentityWithOrganizationOut | void>()

    return (identityWithOrganizationIn: IdentityWithOrganizationIn) => {
        return isInPoByPoUsingPOST({
            url: `/organizations/isInPoByPo`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: identityWithOrganizationIn,
        })
    }
}

export const useIsInPoByPoUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useIsInPoByPoUsingPOSTHook>>>,
        TError,
        { data: IdentityWithOrganizationIn },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useIsInPoByPoUsingPOSTHook>>>,
    TError,
    { data: IdentityWithOrganizationIn },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const isInPoByPoUsingPOST = useIsInPoByPoUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoUsingPOSTHook>>>, { data: IdentityWithOrganizationIn }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return isInPoByPoUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsInPoByPoUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoUsingPOSTHook>>>>
export type IsInPoByPoUsingPOSTMutationBody = IdentityWithOrganizationIn
export type IsInPoByPoUsingPOSTMutationError = unknown

/**
 * @summary isInPoByPo
 */
export const useIsInPoByPoUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useIsInPoByPoUsingPOSTHook>>>,
        TError,
        { data: IdentityWithOrganizationIn },
        TContext
    >
}) => {
    const mutationOptions = useIsInPoByPoUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isInPoByPoAndEaGarpo
 */
export const useIsInPoByPoAndEaGarpoUsingPOSTHook = () => {
    const isInPoByPoAndEaGarpoUsingPOST = useIAmSwaggerClient<boolean | void>()

    return (loginGid: LoginGid) => {
        return isInPoByPoAndEaGarpoUsingPOST({
            url: `/organizations/isInPoByPoAndEaGarpo`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: loginGid,
        })
    }
}

export const useIsInPoByPoAndEaGarpoUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoAndEaGarpoUsingPOSTHook>>>, TError, { data: LoginGid }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoAndEaGarpoUsingPOSTHook>>>, TError, { data: LoginGid }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const isInPoByPoAndEaGarpoUsingPOST = useIsInPoByPoAndEaGarpoUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoAndEaGarpoUsingPOSTHook>>>, { data: LoginGid }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return isInPoByPoAndEaGarpoUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsInPoByPoAndEaGarpoUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoAndEaGarpoUsingPOSTHook>>>>
export type IsInPoByPoAndEaGarpoUsingPOSTMutationBody = LoginGid
export type IsInPoByPoAndEaGarpoUsingPOSTMutationError = unknown

/**
 * @summary isInPoByPoAndEaGarpo
 */
export const useIsInPoByPoAndEaGarpoUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsInPoByPoAndEaGarpoUsingPOSTHook>>>, TError, { data: LoginGid }, TContext>
}) => {
    const mutationOptions = useIsInPoByPoAndEaGarpoUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isOwnerByGid
 */
export const useIsOwnerByGidUsingPOSTHook = () => {
    const isOwnerByGidUsingPOST = useIAmSwaggerClient<OwnerByGidOutput | void>()

    return (ownerByGidInput: OwnerByGidInput) => {
        return isOwnerByGidUsingPOST({
            url: `/organizations/isOwnerByGid`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ownerByGidInput,
        })
    }
}

export const useIsOwnerByGidUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsOwnerByGidUsingPOSTHook>>>, TError, { data: OwnerByGidInput }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsOwnerByGidUsingPOSTHook>>>, TError, { data: OwnerByGidInput }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const isOwnerByGidUsingPOST = useIsOwnerByGidUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsOwnerByGidUsingPOSTHook>>>, { data: OwnerByGidInput }> = (props) => {
        const { data } = props ?? {}

        return isOwnerByGidUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsOwnerByGidUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsOwnerByGidUsingPOSTHook>>>>
export type IsOwnerByGidUsingPOSTMutationBody = OwnerByGidInput
export type IsOwnerByGidUsingPOSTMutationError = unknown

/**
 * @summary isOwnerByGid
 */
export const useIsOwnerByGidUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsOwnerByGidUsingPOSTHook>>>, TError, { data: OwnerByGidInput }, TContext>
}) => {
    const mutationOptions = useIsOwnerByGidUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary isOwnerByUser
 */
export const useIsOwnerByUserUsingPOSTHook = () => {
    const isOwnerByUserUsingPOST = useIAmSwaggerClient<OwnerByUserOut | void>()

    return (ownerByUserIn: OwnerByUserIn) => {
        return isOwnerByUserUsingPOST({
            url: `/organizations/isOwnerByUser`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ownerByUserIn,
        })
    }
}

export const useIsOwnerByUserUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsOwnerByUserUsingPOSTHook>>>, TError, { data: OwnerByUserIn }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsOwnerByUserUsingPOSTHook>>>, TError, { data: OwnerByUserIn }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const isOwnerByUserUsingPOST = useIsOwnerByUserUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useIsOwnerByUserUsingPOSTHook>>>, { data: OwnerByUserIn }> = (props) => {
        const { data } = props ?? {}

        return isOwnerByUserUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type IsOwnerByUserUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIsOwnerByUserUsingPOSTHook>>>>
export type IsOwnerByUserUsingPOSTMutationBody = OwnerByUserIn
export type IsOwnerByUserUsingPOSTMutationError = unknown

/**
 * @summary isOwnerByUser
 */
export const useIsOwnerByUserUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useIsOwnerByUserUsingPOSTHook>>>, TError, { data: OwnerByUserIn }, TContext>
}) => {
    const mutationOptions = useIsOwnerByUserUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET9Hook = () => {
    const findAllUsingGET9 = useIAmSwaggerClient<Organization[]>()

    return (page: number, limit: number, signal?: AbortSignal) => {
        return findAllUsingGET9({ url: `/organizations/page/${page}/${limit}`, method: 'get', signal })
    }
}

export const getFindAllUsingGET9QueryKey = (page: number, limit: number) => [`/organizations/page/${page}/${limit}`] as const

export const useFindAllUsingGET9QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>, TError = void>(
    page: number,
    limit: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET9QueryKey(page, limit)

    const findAllUsingGET9 = useFindAllUsingGET9Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>> = ({ signal }) =>
        findAllUsingGET9(page, limit, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindAllUsingGET9QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>>
export type FindAllUsingGET9QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET9 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>, TError = void>(
    page: number,
    limit: number,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET9Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET9QueryOptions(page, limit, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getPages
 */
export const useGetPagesUsingGET3Hook = () => {
    const getPagesUsingGET3 = useIAmSwaggerClient<number>()

    return (signal?: AbortSignal) => {
        return getPagesUsingGET3({ url: `/organizations/pages`, method: 'get', signal })
    }
}

export const getGetPagesUsingGET3QueryKey = () => [`/organizations/pages`] as const

export const useGetPagesUsingGET3QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPagesUsingGET3QueryKey()

    const getPagesUsingGET3 = useGetPagesUsingGET3Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>> = ({ signal }) => getPagesUsingGET3(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPagesUsingGET3QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>>
export type GetPagesUsingGET3QueryError = void

/**
 * @summary getPages
 */
export const useGetPagesUsingGET3 = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET3Hook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPagesUsingGET3QueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getPoRelationshipIntegrityConstraints
 */
export const useGetPoRelationshipIntegrityConstraintsUsingPOSTHook = () => {
    const getPoRelationshipIntegrityConstraintsUsingPOST = useIAmSwaggerClient<PoRelationshipIntegrityConstraints[] | void>()

    return (poRelationship: PoRelationship[]) => {
        return getPoRelationshipIntegrityConstraintsUsingPOST({
            url: `/organizations/poRelationshipIntegrityConstraints`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: poRelationship,
        })
    }
}

export const useGetPoRelationshipIntegrityConstraintsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetPoRelationshipIntegrityConstraintsUsingPOSTHook>>>,
        TError,
        { data: PoRelationship[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetPoRelationshipIntegrityConstraintsUsingPOSTHook>>>,
    TError,
    { data: PoRelationship[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getPoRelationshipIntegrityConstraintsUsingPOST = useGetPoRelationshipIntegrityConstraintsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetPoRelationshipIntegrityConstraintsUsingPOSTHook>>>,
        { data: PoRelationship[] }
    > = (props) => {
        const { data } = props ?? {}

        return getPoRelationshipIntegrityConstraintsUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetPoRelationshipIntegrityConstraintsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetPoRelationshipIntegrityConstraintsUsingPOSTHook>>>
>
export type GetPoRelationshipIntegrityConstraintsUsingPOSTMutationBody = PoRelationship[]
export type GetPoRelationshipIntegrityConstraintsUsingPOSTMutationError = unknown

/**
 * @summary getPoRelationshipIntegrityConstraints
 */
export const useGetPoRelationshipIntegrityConstraintsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetPoRelationshipIntegrityConstraintsUsingPOSTHook>>>,
        TError,
        { data: PoRelationship[] },
        TContext
    >
}) => {
    const mutationOptions = useGetPoRelationshipIntegrityConstraintsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getHierarchyGids
 */
export const useGetHierarchyGidsUsingPOSTHook = () => {
    const getHierarchyGidsUsingPOST = useIAmSwaggerClient<OrganizationRoleHierarchyOut | void>()

    return (organizationRoleHierarchyIn: OrganizationRoleHierarchyIn) => {
        return getHierarchyGidsUsingPOST({
            url: `/organizations/roleHierarchy`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: organizationRoleHierarchyIn,
        })
    }
}

export const useGetHierarchyGidsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyGidsUsingPOSTHook>>>,
        TError,
        { data: OrganizationRoleHierarchyIn },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHierarchyGidsUsingPOSTHook>>>,
    TError,
    { data: OrganizationRoleHierarchyIn },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getHierarchyGidsUsingPOST = useGetHierarchyGidsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyGidsUsingPOSTHook>>>,
        { data: OrganizationRoleHierarchyIn }
    > = (props) => {
        const { data } = props ?? {}

        return getHierarchyGidsUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetHierarchyGidsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetHierarchyGidsUsingPOSTHook>>>>
export type GetHierarchyGidsUsingPOSTMutationBody = OrganizationRoleHierarchyIn
export type GetHierarchyGidsUsingPOSTMutationError = unknown

/**
 * @summary getHierarchyGids
 */
export const useGetHierarchyGidsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHierarchyGidsUsingPOSTHook>>>,
        TError,
        { data: OrganizationRoleHierarchyIn },
        TContext
    >
}) => {
    const mutationOptions = useGetHierarchyGidsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findSubOrganizationsBulk
 */
export const useFindSubOrganizationsBulkUsingPOSTHook = () => {
    const findSubOrganizationsBulkUsingPOST = useIAmSwaggerClient<SubOrganizations[] | void>()

    return (findOrganizationsForListUsingPOSTUuidsBody: FindOrganizationsForListUsingPOSTUuidsBody) => {
        return findSubOrganizationsBulkUsingPOST({
            url: `/organizations/subOrganizationsBulk`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: findOrganizationsForListUsingPOSTUuidsBody,
        })
    }
}

export const useFindSubOrganizationsBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsBulkUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsBulkUsingPOSTHook>>>,
    TError,
    { data: FindOrganizationsForListUsingPOSTUuidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const findSubOrganizationsBulkUsingPOST = useFindSubOrganizationsBulkUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsBulkUsingPOSTHook>>>,
        { data: FindOrganizationsForListUsingPOSTUuidsBody }
    > = (props) => {
        const { data } = props ?? {}

        return findSubOrganizationsBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type FindSubOrganizationsBulkUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsBulkUsingPOSTHook>>>
>
export type FindSubOrganizationsBulkUsingPOSTMutationBody = FindOrganizationsForListUsingPOSTUuidsBody
export type FindSubOrganizationsBulkUsingPOSTMutationError = unknown

/**
 * @summary findSubOrganizationsBulk
 */
export const useFindSubOrganizationsBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsBulkUsingPOSTHook>>>,
        TError,
        { data: FindOrganizationsForListUsingPOSTUuidsBody },
        TContext
    >
}) => {
    const mutationOptions = useFindSubOrganizationsBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findSubOrganizationsByCmdbIdBulk
 */
export const useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook = () => {
    const findSubOrganizationsByCmdbIdBulkUsingPOST = useIAmSwaggerClient<SubOrganizationCmdbId[] | void>()

    return (getAllSubPOSetUsingPOSTCmdbidsBody: GetAllSubPOSetUsingPOSTCmdbidsBody) => {
        return findSubOrganizationsByCmdbIdBulkUsingPOST({
            url: `/organizations/subOrganizationsByCmdbIdBulk`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: getAllSubPOSetUsingPOSTCmdbidsBody,
        })
    }
}

export const useFindSubOrganizationsByCmdbIdBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook>>>,
        TError,
        { data: GetAllSubPOSetUsingPOSTCmdbidsBody },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook>>>,
    TError,
    { data: GetAllSubPOSetUsingPOSTCmdbidsBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const findSubOrganizationsByCmdbIdBulkUsingPOST = useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook>>>,
        { data: GetAllSubPOSetUsingPOSTCmdbidsBody }
    > = (props) => {
        const { data } = props ?? {}

        return findSubOrganizationsByCmdbIdBulkUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type FindSubOrganizationsByCmdbIdBulkUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook>>>
>
export type FindSubOrganizationsByCmdbIdBulkUsingPOSTMutationBody = GetAllSubPOSetUsingPOSTCmdbidsBody
export type FindSubOrganizationsByCmdbIdBulkUsingPOSTMutationError = unknown

/**
 * @summary findSubOrganizationsByCmdbIdBulk
 */
export const useFindSubOrganizationsByCmdbIdBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsByCmdbIdBulkUsingPOSTHook>>>,
        TError,
        { data: GetAllSubPOSetUsingPOSTCmdbidsBody },
        TContext
    >
}) => {
    const mutationOptions = useFindSubOrganizationsByCmdbIdBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET2Hook = () => {
    const findByUuidUsingGET2 = useIAmSwaggerClient<Organization>()

    return (uuid: string, signal?: AbortSignal) => {
        return findByUuidUsingGET2({ url: `/organizations/${uuid}`, method: 'get', signal })
    }
}

export const getFindByUuidUsingGET2QueryKey = (uuid: string) => [`/organizations/${uuid}`] as const

export const useFindByUuidUsingGET2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByUuidUsingGET2QueryKey(uuid)

    const findByUuidUsingGET2 = useFindByUuidUsingGET2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>> = ({ signal }) =>
        findByUuidUsingGET2(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindByUuidUsingGET2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>>
export type FindByUuidUsingGET2QueryError = void

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET2 = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByUuidUsingGET2QueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getHierarchy
 */
export const useGetHierarchyUsingGETHook = () => {
    const getHierarchyUsingGET = useIAmSwaggerClient<OrganizationHierarchy>()

    return (uuid: string, signal?: AbortSignal) => {
        return getHierarchyUsingGET({ url: `/organizations/${uuid}/hierarchy`, method: 'get', signal })
    }
}

export const getGetHierarchyUsingGETQueryKey = (uuid: string) => [`/organizations/${uuid}/hierarchy`] as const

export const useGetHierarchyUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetHierarchyUsingGETQueryKey(uuid)

    const getHierarchyUsingGET = useGetHierarchyUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>> = ({ signal }) =>
        getHierarchyUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetHierarchyUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>>
export type GetHierarchyUsingGETQueryError = void

/**
 * @summary getHierarchy
 */
export const useGetHierarchyUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetHierarchyUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetHierarchyUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getAssignedHKO
 */
export const useGetAssignedHKOUsingGETHook = () => {
    const getAssignedHKOUsingGET = useIAmSwaggerClient<Identity[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return getAssignedHKOUsingGET({ url: `/organizations/${uuid}/hko`, method: 'get', signal })
    }
}

export const getGetAssignedHKOUsingGETQueryKey = (uuid: string) => [`/organizations/${uuid}/hko`] as const

export const useGetAssignedHKOUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetAssignedHKOUsingGETQueryKey(uuid)

    const getAssignedHKOUsingGET = useGetAssignedHKOUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>> = ({ signal }) =>
        getAssignedHKOUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetAssignedHKOUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>>
export type GetAssignedHKOUsingGETQueryError = void

/**
 * @summary getAssignedHKO
 */
export const useGetAssignedHKOUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetAssignedHKOUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetAssignedHKOUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET2Hook = () => {
    const findRelatedIdentitiesUsingGET2 = useIAmSwaggerClient<Identity[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedIdentitiesUsingGET2({ url: `/organizations/${uuid}/identities`, method: 'get', signal })
    }
}

export const getFindRelatedIdentitiesUsingGET2QueryKey = (uuid: string) => [`/organizations/${uuid}/identities`] as const

export const useFindRelatedIdentitiesUsingGET2QueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesUsingGET2QueryKey(uuid)

    const findRelatedIdentitiesUsingGET2 = useFindRelatedIdentitiesUsingGET2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>> = ({ signal }) =>
        findRelatedIdentitiesUsingGET2(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesUsingGET2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>>
export type FindRelatedIdentitiesUsingGET2QueryError = void

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET2 = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesUsingGET2QueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findSubOrganizations
 */
export const useFindSubOrganizationsUsingGETHook = () => {
    const findSubOrganizationsUsingGET = useIAmSwaggerClient<Organization[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findSubOrganizationsUsingGET({ url: `/organizations/${uuid}/organizations`, method: 'get', signal })
    }
}

export const getFindSubOrganizationsUsingGETQueryKey = (uuid: string) => [`/organizations/${uuid}/organizations`] as const

export const useFindSubOrganizationsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubOrganizationsUsingGETQueryKey(uuid)

    const findSubOrganizationsUsingGET = useFindSubOrganizationsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>> = ({ signal }) =>
        findSubOrganizationsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindSubOrganizationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>>
export type FindSubOrganizationsUsingGETQueryError = void

/**
 * @summary findSubOrganizations
 */
export const useFindSubOrganizationsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubOrganizationsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedRoles
 */
export const useFindRelatedRolesUsingGET1Hook = () => {
    const findRelatedRolesUsingGET1 = useIAmSwaggerClient<RelatedRole[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedRolesUsingGET1({ url: `/organizations/${uuid}/roles`, method: 'get', signal })
    }
}

export const getFindRelatedRolesUsingGET1QueryKey = (uuid: string) => [`/organizations/${uuid}/roles`] as const

export const useFindRelatedRolesUsingGET1QueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedRolesUsingGET1QueryKey(uuid)

    const findRelatedRolesUsingGET1 = useFindRelatedRolesUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>> = ({ signal }) =>
        findRelatedRolesUsingGET1(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedRolesUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>>
export type FindRelatedRolesUsingGET1QueryError = void

/**
 * @summary findRelatedRoles
 */
export const useFindRelatedRolesUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedRolesUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedRolesUsingGET1QueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getNewVersionFromCsru
 */
export const useGetNewVersionFromCsruUsingPOSTHook = () => {
    const getNewVersionFromCsruUsingPOST = useIAmSwaggerClient<void>()

    return (uuid: string) => {
        return getNewVersionFromCsruUsingPOST({ url: `/organizations/${uuid}/update`, method: 'post' })
    }
}

export const useGetNewVersionFromCsruUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetNewVersionFromCsruUsingPOSTHook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetNewVersionFromCsruUsingPOSTHook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const getNewVersionFromCsruUsingPOST = useGetNewVersionFromCsruUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useGetNewVersionFromCsruUsingPOSTHook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return getNewVersionFromCsruUsingPOST(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetNewVersionFromCsruUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetNewVersionFromCsruUsingPOSTHook>>>>

export type GetNewVersionFromCsruUsingPOSTMutationError = unknown

/**
 * @summary getNewVersionFromCsru
 */
export const useGetNewVersionFromCsruUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useGetNewVersionFromCsruUsingPOSTHook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useGetNewVersionFromCsruUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findByName
 */
export const useFindByNameUsingGET1Hook = () => {
    const findByNameUsingGET1 = useIAmSwaggerClient<Role>()

    return (params: FindByNameUsingGET1Params, signal?: AbortSignal) => {
        return findByNameUsingGET1({ url: `/roles`, method: 'get', params, signal })
    }
}

export const getFindByNameUsingGET1QueryKey = (params: FindByNameUsingGET1Params) => [`/roles`, ...(params ? [params] : [])] as const

export const useFindByNameUsingGET1QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>, TError = void>(
    params: FindByNameUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByNameUsingGET1QueryKey(params)

    const findByNameUsingGET1 = useFindByNameUsingGET1Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>> = ({ signal }) =>
        findByNameUsingGET1(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindByNameUsingGET1QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>>
export type FindByNameUsingGET1QueryError = void

/**
 * @summary findByName
 */
export const useFindByNameUsingGET1 = <TData = Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>, TError = void>(
    params: FindByNameUsingGET1Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameUsingGET1Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByNameUsingGET1QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary updateOrCreate
 */
export const useUpdateOrCreateUsingPOST2Hook = () => {
    const updateOrCreateUsingPOST2 = useIAmSwaggerClient<OperationResult | void>()

    return (role: Role) => {
        return updateOrCreateUsingPOST2({ url: `/roles`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: role })
    }
}

export const useUpdateOrCreateUsingPOST2MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST2Hook>>>, TError, { data: Role }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST2Hook>>>, TError, { data: Role }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateOrCreateUsingPOST2 = useUpdateOrCreateUsingPOST2Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST2Hook>>>, { data: Role }> = (props) => {
        const { data } = props ?? {}

        return updateOrCreateUsingPOST2(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateOrCreateUsingPOST2MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST2Hook>>>>
export type UpdateOrCreateUsingPOST2MutationBody = Role
export type UpdateOrCreateUsingPOST2MutationError = unknown

/**
 * @summary updateOrCreate
 */
export const useUpdateOrCreateUsingPOST2 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useUpdateOrCreateUsingPOST2Hook>>>, TError, { data: Role }, TContext>
}) => {
    const mutationOptions = useUpdateOrCreateUsingPOST2MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary bulkUpdateOrCreate
 */
export const useBulkUpdateOrCreateUsingPOSTHook = () => {
    const bulkUpdateOrCreateUsingPOST = useIAmSwaggerClient<OperationResultGenericOfRole[] | void>()

    return (role: Role[]) => {
        return bulkUpdateOrCreateUsingPOST({ url: `/roles/bulk`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: role })
    }
}

export const useBulkUpdateOrCreateUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBulkUpdateOrCreateUsingPOSTHook>>>, TError, { data: Role[] }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBulkUpdateOrCreateUsingPOSTHook>>>, TError, { data: Role[] }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const bulkUpdateOrCreateUsingPOST = useBulkUpdateOrCreateUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useBulkUpdateOrCreateUsingPOSTHook>>>, { data: Role[] }> = (props) => {
        const { data } = props ?? {}

        return bulkUpdateOrCreateUsingPOST(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type BulkUpdateOrCreateUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useBulkUpdateOrCreateUsingPOSTHook>>>>
export type BulkUpdateOrCreateUsingPOSTMutationBody = Role[]
export type BulkUpdateOrCreateUsingPOSTMutationError = unknown

/**
 * @summary bulkUpdateOrCreate
 */
export const useBulkUpdateOrCreateUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useBulkUpdateOrCreateUsingPOSTHook>>>, TError, { data: Role[] }, TContext>
}) => {
    const mutationOptions = useBulkUpdateOrCreateUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @deprecated
 * @summary getRolesForOrganizations
 */
export const useGetRolesForOrganizationsUsingGETHook = () => {
    const getRolesForOrganizationsUsingGET = useIAmSwaggerClient<RelatedRole[]>()

    return (orgId: string, signal?: AbortSignal) => {
        return getRolesForOrganizationsUsingGET({ url: `/roles/organizations/${orgId}`, method: 'get', signal })
    }
}

export const getGetRolesForOrganizationsUsingGETQueryKey = (orgId: string) => [`/roles/organizations/${orgId}`] as const

export const useGetRolesForOrganizationsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>,
    TError = void,
>(
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRolesForOrganizationsUsingGETQueryKey(orgId)

    const getRolesForOrganizationsUsingGET = useGetRolesForOrganizationsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>> = ({ signal }) =>
        getRolesForOrganizationsUsingGET(orgId, signal)

    return { queryKey, queryFn, enabled: !!orgId, ...queryOptions }
}

export type GetRolesForOrganizationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>>
export type GetRolesForOrganizationsUsingGETQueryError = void

/**
 * @deprecated
 * @summary getRolesForOrganizations
 */
export const useGetRolesForOrganizationsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>,
    TError = void,
>(
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRolesForOrganizationsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRolesForOrganizationsUsingGETQueryOptions(orgId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findAll
 */
export const useFindAllUsingGET14Hook = () => {
    const findAllUsingGET14 = useIAmSwaggerClient<Role[]>()

    return (page: number, limit: number, params: FindAllUsingGET14Params, signal?: AbortSignal) => {
        return findAllUsingGET14({ url: `/roles/page/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindAllUsingGET14QueryKey = (page: number, limit: number, params: FindAllUsingGET14Params) =>
    [`/roles/page/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindAllUsingGET14QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindAllUsingGET14Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindAllUsingGET14QueryKey(page, limit, params)

    const findAllUsingGET14 = useFindAllUsingGET14Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>> = ({ signal }) =>
        findAllUsingGET14(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindAllUsingGET14QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>>
export type FindAllUsingGET14QueryError = void

/**
 * @summary findAll
 */
export const useFindAllUsingGET14 = <TData = Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindAllUsingGET14Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindAllUsingGET14Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindAllUsingGET14QueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getPages
 */
export const useGetPagesUsingGET4Hook = () => {
    const getPagesUsingGET4 = useIAmSwaggerClient<number>()

    return (signal?: AbortSignal) => {
        return getPagesUsingGET4({ url: `/roles/pages`, method: 'get', signal })
    }
}

export const getGetPagesUsingGET4QueryKey = () => [`/roles/pages`] as const

export const useGetPagesUsingGET4QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPagesUsingGET4QueryKey()

    const getPagesUsingGET4 = useGetPagesUsingGET4Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>> = ({ signal }) => getPagesUsingGET4(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPagesUsingGET4QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>>
export type GetPagesUsingGET4QueryError = void

/**
 * @summary getPages
 */
export const useGetPagesUsingGET4 = <TData = Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPagesUsingGET4Hook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPagesUsingGET4QueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findByNameWithParams
 */
export const useFindByNameWithParamsUsingGETHook = () => {
    const findByNameWithParamsUsingGET = useIAmSwaggerClient<Role[]>()

    return (page: number, limit: number, params: FindByNameWithParamsUsingGETParams, signal?: AbortSignal) => {
        return findByNameWithParamsUsingGET({ url: `/roles/withParams/page/${page}/${limit}`, method: 'get', params, signal })
    }
}

export const getFindByNameWithParamsUsingGETQueryKey = (page: number, limit: number, params: FindByNameWithParamsUsingGETParams) =>
    [`/roles/withParams/page/${page}/${limit}`, ...(params ? [params] : [])] as const

export const useFindByNameWithParamsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>,
    TError = void,
>(
    page: number,
    limit: number,
    params: FindByNameWithParamsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByNameWithParamsUsingGETQueryKey(page, limit, params)

    const findByNameWithParamsUsingGET = useFindByNameWithParamsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>> = ({ signal }) =>
        findByNameWithParamsUsingGET(page, limit, params, signal)

    return { queryKey, queryFn, enabled: !!(page && limit), ...queryOptions }
}

export type FindByNameWithParamsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>>
export type FindByNameWithParamsUsingGETQueryError = void

/**
 * @summary findByNameWithParams
 */
export const useFindByNameWithParamsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>, TError = void>(
    page: number,
    limit: number,
    params: FindByNameWithParamsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByNameWithParamsUsingGETQueryOptions(page, limit, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findByNameWithParamsCount
 */
export const useFindByNameWithParamsCountUsingGETHook = () => {
    const findByNameWithParamsCountUsingGET = useIAmSwaggerClient<number>()

    return (params: FindByNameWithParamsCountUsingGETParams, signal?: AbortSignal) => {
        return findByNameWithParamsCountUsingGET({ url: `/roles/withParams/pages`, method: 'get', params, signal })
    }
}

export const getFindByNameWithParamsCountUsingGETQueryKey = (params: FindByNameWithParamsCountUsingGETParams) =>
    [`/roles/withParams/pages`, ...(params ? [params] : [])] as const

export const useFindByNameWithParamsCountUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>,
    TError = void,
>(
    params: FindByNameWithParamsCountUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByNameWithParamsCountUsingGETQueryKey(params)

    const findByNameWithParamsCountUsingGET = useFindByNameWithParamsCountUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>> = ({ signal }) =>
        findByNameWithParamsCountUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type FindByNameWithParamsCountUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>
>
export type FindByNameWithParamsCountUsingGETQueryError = void

/**
 * @summary findByNameWithParamsCount
 */
export const useFindByNameWithParamsCountUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>,
    TError = void,
>(
    params: FindByNameWithParamsCountUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByNameWithParamsCountUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByNameWithParamsCountUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary addRelatedIdentity
 */
export const useAddRelatedIdentityUsingPUTHook = () => {
    const addRelatedIdentityUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (roleUuid: string, relatedIdentityUuid: string) => {
        return addRelatedIdentityUsingPUT({ url: `/roles/${roleUuid}/identities/${relatedIdentityUuid}`, method: 'put' })
    }
}

export const useAddRelatedIdentityUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddRelatedIdentityUsingPUTHook>>>,
        TError,
        { roleUuid: string; relatedIdentityUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddRelatedIdentityUsingPUTHook>>>,
    TError,
    { roleUuid: string; relatedIdentityUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addRelatedIdentityUsingPUT = useAddRelatedIdentityUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddRelatedIdentityUsingPUTHook>>>,
        { roleUuid: string; relatedIdentityUuid: string }
    > = (props) => {
        const { roleUuid, relatedIdentityUuid } = props ?? {}

        return addRelatedIdentityUsingPUT(roleUuid, relatedIdentityUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddRelatedIdentityUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddRelatedIdentityUsingPUTHook>>>>

export type AddRelatedIdentityUsingPUTMutationError = unknown

/**
 * @summary addRelatedIdentity
 */
export const useAddRelatedIdentityUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddRelatedIdentityUsingPUTHook>>>,
        TError,
        { roleUuid: string; relatedIdentityUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useAddRelatedIdentityUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteRelatedIdentity
 */
export const useDeleteRelatedIdentityUsingDELETEHook = () => {
    const deleteRelatedIdentityUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (roleUuid: string, relatedIdentityUuid: string) => {
        return deleteRelatedIdentityUsingDELETE({ url: `/roles/${roleUuid}/identities/${relatedIdentityUuid}`, method: 'delete' })
    }
}

export const useDeleteRelatedIdentityUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelatedIdentityUsingDELETEHook>>>,
        TError,
        { roleUuid: string; relatedIdentityUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteRelatedIdentityUsingDELETEHook>>>,
    TError,
    { roleUuid: string; relatedIdentityUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteRelatedIdentityUsingDELETE = useDeleteRelatedIdentityUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelatedIdentityUsingDELETEHook>>>,
        { roleUuid: string; relatedIdentityUuid: string }
    > = (props) => {
        const { roleUuid, relatedIdentityUuid } = props ?? {}

        return deleteRelatedIdentityUsingDELETE(roleUuid, relatedIdentityUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteRelatedIdentityUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteRelatedIdentityUsingDELETEHook>>>
>

export type DeleteRelatedIdentityUsingDELETEMutationError = unknown

/**
 * @summary deleteRelatedIdentity
 */
export const useDeleteRelatedIdentityUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelatedIdentityUsingDELETEHook>>>,
        TError,
        { roleUuid: string; relatedIdentityUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteRelatedIdentityUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findOrgCmdbIds
 */
export const useFindOrgCmdbIdsUsingGETHook = () => {
    const findOrgCmdbIdsUsingGET = useIAmSwaggerClient<string[]>()

    return (roleUuid: string, signal?: AbortSignal) => {
        return findOrgCmdbIdsUsingGET({ url: `/roles/${roleUuid}/organizations`, method: 'get', signal })
    }
}

export const getFindOrgCmdbIdsUsingGETQueryKey = (roleUuid: string) => [`/roles/${roleUuid}/organizations`] as const

export const useFindOrgCmdbIdsUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>, TError = void>(
    roleUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindOrgCmdbIdsUsingGETQueryKey(roleUuid)

    const findOrgCmdbIdsUsingGET = useFindOrgCmdbIdsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>> = ({ signal }) =>
        findOrgCmdbIdsUsingGET(roleUuid, signal)

    return { queryKey, queryFn, enabled: !!roleUuid, ...queryOptions }
}

export type FindOrgCmdbIdsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>>
export type FindOrgCmdbIdsUsingGETQueryError = void

/**
 * @summary findOrgCmdbIds
 */
export const useFindOrgCmdbIdsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>, TError = void>(
    roleUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindOrgCmdbIdsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindOrgCmdbIdsUsingGETQueryOptions(roleUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRoleOrgGroup
 */
export const useFindRoleOrgGroupUsingGETHook = () => {
    const findRoleOrgGroupUsingGET = useIAmSwaggerClient<RoleOrgGroup>()

    return (roleUuid: string, orgId: string, signal?: AbortSignal) => {
        return findRoleOrgGroupUsingGET({ url: `/roles/${roleUuid}/organizations/${orgId}`, method: 'get', signal })
    }
}

export const getFindRoleOrgGroupUsingGETQueryKey = (roleUuid: string, orgId: string) => [`/roles/${roleUuid}/organizations/${orgId}`] as const

export const useFindRoleOrgGroupUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>,
    TError = void,
>(
    roleUuid: string,
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRoleOrgGroupUsingGETQueryKey(roleUuid, orgId)

    const findRoleOrgGroupUsingGET = useFindRoleOrgGroupUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>> = ({ signal }) =>
        findRoleOrgGroupUsingGET(roleUuid, orgId, signal)

    return { queryKey, queryFn, enabled: !!(roleUuid && orgId), ...queryOptions }
}

export type FindRoleOrgGroupUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>>
export type FindRoleOrgGroupUsingGETQueryError = void

/**
 * @summary findRoleOrgGroup
 */
export const useFindRoleOrgGroupUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>, TError = void>(
    roleUuid: string,
    orgId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRoleOrgGroupUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRoleOrgGroupUsingGETQueryOptions(roleUuid, orgId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary addOrganizationToRole
 */
export const useAddOrganizationToRoleUsingPUTHook = () => {
    const addOrganizationToRoleUsingPUT = useIAmSwaggerClient<CreateGidOperationResult | void>()

    return (roleUuid: string, orgId: string) => {
        return addOrganizationToRoleUsingPUT({ url: `/roles/${roleUuid}/organizations/${orgId}`, method: 'put' })
    }
}

export const useAddOrganizationToRoleUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddOrganizationToRoleUsingPUTHook>>>,
        TError,
        { roleUuid: string; orgId: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddOrganizationToRoleUsingPUTHook>>>,
    TError,
    { roleUuid: string; orgId: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addOrganizationToRoleUsingPUT = useAddOrganizationToRoleUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddOrganizationToRoleUsingPUTHook>>>,
        { roleUuid: string; orgId: string }
    > = (props) => {
        const { roleUuid, orgId } = props ?? {}

        return addOrganizationToRoleUsingPUT(roleUuid, orgId)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddOrganizationToRoleUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddOrganizationToRoleUsingPUTHook>>>>

export type AddOrganizationToRoleUsingPUTMutationError = unknown

/**
 * @summary addOrganizationToRole
 */
export const useAddOrganizationToRoleUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddOrganizationToRoleUsingPUTHook>>>,
        TError,
        { roleUuid: string; orgId: string },
        TContext
    >
}) => {
    const mutationOptions = useAddOrganizationToRoleUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary removeOrzanizationFromRole
 */
export const useRemoveOrzanizationFromRoleUsingDELETEHook = () => {
    const removeOrzanizationFromRoleUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (roleUuid: string, orgId: string) => {
        return removeOrzanizationFromRoleUsingDELETE({ url: `/roles/${roleUuid}/organizations/${orgId}`, method: 'delete' })
    }
}

export const useRemoveOrzanizationFromRoleUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveOrzanizationFromRoleUsingDELETEHook>>>,
        TError,
        { roleUuid: string; orgId: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRemoveOrzanizationFromRoleUsingDELETEHook>>>,
    TError,
    { roleUuid: string; orgId: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeOrzanizationFromRoleUsingDELETE = useRemoveOrzanizationFromRoleUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRemoveOrzanizationFromRoleUsingDELETEHook>>>,
        { roleUuid: string; orgId: string }
    > = (props) => {
        const { roleUuid, orgId } = props ?? {}

        return removeOrzanizationFromRoleUsingDELETE(roleUuid, orgId)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveOrzanizationFromRoleUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRemoveOrzanizationFromRoleUsingDELETEHook>>>
>

export type RemoveOrzanizationFromRoleUsingDELETEMutationError = unknown

/**
 * @summary removeOrzanizationFromRole
 */
export const useRemoveOrzanizationFromRoleUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveOrzanizationFromRoleUsingDELETEHook>>>,
        TError,
        { roleUuid: string; orgId: string },
        TContext
    >
}) => {
    const mutationOptions = useRemoveOrzanizationFromRoleUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary addSubRole
 */
export const useAddSubRoleUsingPUTHook = () => {
    const addSubRoleUsingPUT = useIAmSwaggerClient<OperationResult | void>()

    return (roleUuid: string, subRoleUuid: string) => {
        return addSubRoleUsingPUT({ url: `/roles/${roleUuid}/roles/${subRoleUuid}`, method: 'put' })
    }
}

export const useAddSubRoleUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddSubRoleUsingPUTHook>>>,
        TError,
        { roleUuid: string; subRoleUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddSubRoleUsingPUTHook>>>,
    TError,
    { roleUuid: string; subRoleUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addSubRoleUsingPUT = useAddSubRoleUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddSubRoleUsingPUTHook>>>,
        { roleUuid: string; subRoleUuid: string }
    > = (props) => {
        const { roleUuid, subRoleUuid } = props ?? {}

        return addSubRoleUsingPUT(roleUuid, subRoleUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddSubRoleUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddSubRoleUsingPUTHook>>>>

export type AddSubRoleUsingPUTMutationError = unknown

/**
 * @summary addSubRole
 */
export const useAddSubRoleUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddSubRoleUsingPUTHook>>>,
        TError,
        { roleUuid: string; subRoleUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useAddSubRoleUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET3Hook = () => {
    const findByUuidUsingGET3 = useIAmSwaggerClient<Role>()

    return (uuid: string, signal?: AbortSignal) => {
        return findByUuidUsingGET3({ url: `/roles/${uuid}`, method: 'get', signal })
    }
}

export const getFindByUuidUsingGET3QueryKey = (uuid: string) => [`/roles/${uuid}`] as const

export const useFindByUuidUsingGET3QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindByUuidUsingGET3QueryKey(uuid)

    const findByUuidUsingGET3 = useFindByUuidUsingGET3Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>> = ({ signal }) =>
        findByUuidUsingGET3(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindByUuidUsingGET3QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>>
export type FindByUuidUsingGET3QueryError = void

/**
 * @summary findByUuid
 */
export const useFindByUuidUsingGET3 = <TData = Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindByUuidUsingGET3Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindByUuidUsingGET3QueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary delete
 */
export const useDeleteUsingDELETE2Hook = () => {
    const deleteUsingDELETE2 = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string) => {
        return deleteUsingDELETE2({ url: `/roles/${uuid}`, method: 'delete' })
    }
}

export const useDeleteUsingDELETE2MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE2Hook>>>, TError, { uuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE2Hook>>>, TError, { uuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteUsingDELETE2 = useDeleteUsingDELETE2Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE2Hook>>>, { uuid: string }> = (props) => {
        const { uuid } = props ?? {}

        return deleteUsingDELETE2(uuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteUsingDELETE2MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE2Hook>>>>

export type DeleteUsingDELETE2MutationError = unknown

/**
 * @summary delete
 */
export const useDeleteUsingDELETE2 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteUsingDELETE2Hook>>>, TError, { uuid: string }, TContext>
}) => {
    const mutationOptions = useDeleteUsingDELETE2MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary findRelatedIdentitiesWithOrganization
 */
export const useFindRelatedIdentitiesWithOrganizationUsingGETHook = () => {
    const findRelatedIdentitiesWithOrganizationUsingGET = useIAmSwaggerClient<Identity[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedIdentitiesWithOrganizationUsingGET({ url: `/roles/${uuid}/findRelatedIdentitiesWithOrganization`, method: 'get', signal })
    }
}

export const getFindRelatedIdentitiesWithOrganizationUsingGETQueryKey = (uuid: string) =>
    [`/roles/${uuid}/findRelatedIdentitiesWithOrganization`] as const

export const useFindRelatedIdentitiesWithOrganizationUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>, TError, TData>
    },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesWithOrganizationUsingGETQueryKey(uuid)

    const findRelatedIdentitiesWithOrganizationUsingGET = useFindRelatedIdentitiesWithOrganizationUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>> = ({ signal }) =>
        findRelatedIdentitiesWithOrganizationUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesWithOrganizationUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>
>
export type FindRelatedIdentitiesWithOrganizationUsingGETQueryError = void

/**
 * @summary findRelatedIdentitiesWithOrganization
 */
export const useFindRelatedIdentitiesWithOrganizationUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithOrganizationUsingGETHook>>>, TError, TData>
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesWithOrganizationUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findGidRelations
 */
export const useFindGidRelationsUsingGETHook = () => {
    const findGidRelationsUsingGET = useIAmSwaggerClient<RoleOrgGroup[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findGidRelationsUsingGET({ url: `/roles/${uuid}/gids`, method: 'get', signal })
    }
}

export const getFindGidRelationsUsingGETQueryKey = (uuid: string) => [`/roles/${uuid}/gids`] as const

export const useFindGidRelationsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindGidRelationsUsingGETQueryKey(uuid)

    const findGidRelationsUsingGET = useFindGidRelationsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>> = ({ signal }) =>
        findGidRelationsUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindGidRelationsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>>
export type FindGidRelationsUsingGETQueryError = void

/**
 * @summary findGidRelations
 */
export const useFindGidRelationsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindGidRelationsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindGidRelationsUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET3Hook = () => {
    const findRelatedIdentitiesUsingGET3 = useIAmSwaggerClient<RelatedIdentity[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedIdentitiesUsingGET3({ url: `/roles/${uuid}/identities`, method: 'get', signal })
    }
}

export const getFindRelatedIdentitiesUsingGET3QueryKey = (uuid: string) => [`/roles/${uuid}/identities`] as const

export const useFindRelatedIdentitiesUsingGET3QueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesUsingGET3QueryKey(uuid)

    const findRelatedIdentitiesUsingGET3 = useFindRelatedIdentitiesUsingGET3Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>> = ({ signal }) =>
        findRelatedIdentitiesUsingGET3(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesUsingGET3QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>>
export type FindRelatedIdentitiesUsingGET3QueryError = void

/**
 * @summary findRelatedIdentities
 */
export const useFindRelatedIdentitiesUsingGET3 = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesUsingGET3Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesUsingGET3QueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findRelatedIdentitiesWithPO
 */
export const useFindRelatedIdentitiesWithPOUsingGETHook = () => {
    const findRelatedIdentitiesWithPOUsingGET = useIAmSwaggerClient<RelatedIdentityWithPo[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findRelatedIdentitiesWithPOUsingGET({ url: `/roles/${uuid}/identitiesWithPo`, method: 'get', signal })
    }
}

export const getFindRelatedIdentitiesWithPOUsingGETQueryKey = (uuid: string) => [`/roles/${uuid}/identitiesWithPo`] as const

export const useFindRelatedIdentitiesWithPOUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindRelatedIdentitiesWithPOUsingGETQueryKey(uuid)

    const findRelatedIdentitiesWithPOUsingGET = useFindRelatedIdentitiesWithPOUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>> = ({ signal }) =>
        findRelatedIdentitiesWithPOUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindRelatedIdentitiesWithPOUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>
>
export type FindRelatedIdentitiesWithPOUsingGETQueryError = void

/**
 * @summary findRelatedIdentitiesWithPO
 */
export const useFindRelatedIdentitiesWithPOUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindRelatedIdentitiesWithPOUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindRelatedIdentitiesWithPOUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary findSubRoles
 */
export const useFindSubRolesUsingGETHook = () => {
    const findSubRolesUsingGET = useIAmSwaggerClient<Role[]>()

    return (uuid: string, signal?: AbortSignal) => {
        return findSubRolesUsingGET({ url: `/roles/${uuid}/roles`, method: 'get', signal })
    }
}

export const getFindSubRolesUsingGETQueryKey = (uuid: string) => [`/roles/${uuid}/roles`] as const

export const useFindSubRolesUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFindSubRolesUsingGETQueryKey(uuid)

    const findSubRolesUsingGET = useFindSubRolesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>> = ({ signal }) =>
        findSubRolesUsingGET(uuid, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type FindSubRolesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>>
export type FindSubRolesUsingGETQueryError = void

/**
 * @summary findSubRoles
 */
export const useFindSubRolesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>, TError = void>(
    uuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFindSubRolesUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFindSubRolesUsingGETQueryOptions(uuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary deleteSubRole
 */
export const useDeleteSubRoleUsingDELETEHook = () => {
    const deleteSubRoleUsingDELETE = useIAmSwaggerClient<OperationResult | void>()

    return (uuid: string, subRoleUuid: string) => {
        return deleteSubRoleUsingDELETE({ url: `/roles/${uuid}/roles/${subRoleUuid}`, method: 'delete' })
    }
}

export const useDeleteSubRoleUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteSubRoleUsingDELETEHook>>>,
        TError,
        { uuid: string; subRoleUuid: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteSubRoleUsingDELETEHook>>>,
    TError,
    { uuid: string; subRoleUuid: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteSubRoleUsingDELETE = useDeleteSubRoleUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteSubRoleUsingDELETEHook>>>,
        { uuid: string; subRoleUuid: string }
    > = (props) => {
        const { uuid, subRoleUuid } = props ?? {}

        return deleteSubRoleUsingDELETE(uuid, subRoleUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteSubRoleUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteSubRoleUsingDELETEHook>>>>

export type DeleteSubRoleUsingDELETEMutationError = unknown

/**
 * @summary deleteSubRole
 */
export const useDeleteSubRoleUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteSubRoleUsingDELETEHook>>>,
        TError,
        { uuid: string; subRoleUuid: string },
        TContext
    >
}) => {
    const mutationOptions = useDeleteSubRoleUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

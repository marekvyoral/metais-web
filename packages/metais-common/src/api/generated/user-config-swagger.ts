//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS User Config
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import type { MutationFunction, QueryFunction, QueryKey, UseMutationOptions, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { useUserConfigSwaggerClient } from '../hooks/useUserConfigSwaggerClient'
export interface FavoriteColumn {
    name?: string
    order?: number
}

export interface FavoriteCiType {
    id?: number
    ciType?: string
    attributes?: FavoriteColumn[]
    metaAttributes?: FavoriteColumn[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useInsertUserColumnsHook = () => {
    const insertUserColumns = useUserConfigSwaggerClient<void>()

    return (favoriteCiType: FavoriteCiType) => {
        return insertUserColumns({ url: `/columns/store`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: favoriteCiType })
    }
}

export const useInsertUserColumnsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInsertUserColumnsHook>>>, TError, { data: FavoriteCiType }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInsertUserColumnsHook>>>, TError, { data: FavoriteCiType }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const insertUserColumns = useInsertUserColumnsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInsertUserColumnsHook>>>, { data: FavoriteCiType }> = (props) => {
        const { data } = props ?? {}

        return insertUserColumns(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type InsertUserColumnsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInsertUserColumnsHook>>>>
export type InsertUserColumnsMutationBody = FavoriteCiType
export type InsertUserColumnsMutationError = unknown

export const useInsertUserColumns = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInsertUserColumnsHook>>>, TError, { data: FavoriteCiType }, TContext>
}) => {
    const mutationOptions = useInsertUserColumnsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useInsertDefaultColumnsHook = () => {
    const insertDefaultColumns = useUserConfigSwaggerClient<void>()

    return (favoriteCiType: FavoriteCiType) => {
        return insertDefaultColumns({
            url: `/columns/store/default`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: favoriteCiType,
        })
    }
}

export const useInsertDefaultColumnsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInsertDefaultColumnsHook>>>, TError, { data: FavoriteCiType }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInsertDefaultColumnsHook>>>, TError, { data: FavoriteCiType }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const insertDefaultColumns = useInsertDefaultColumnsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useInsertDefaultColumnsHook>>>, { data: FavoriteCiType }> = (props) => {
        const { data } = props ?? {}

        return insertDefaultColumns(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type InsertDefaultColumnsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInsertDefaultColumnsHook>>>>
export type InsertDefaultColumnsMutationBody = FavoriteCiType
export type InsertDefaultColumnsMutationError = unknown

export const useInsertDefaultColumns = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useInsertDefaultColumnsHook>>>, TError, { data: FavoriteCiType }, TContext>
}) => {
    const mutationOptions = useInsertDefaultColumnsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetUserColumnsHook = () => {
    const getUserColumns = useUserConfigSwaggerClient<FavoriteCiType>()

    return (citype: string, signal?: AbortSignal) => {
        return getUserColumns({ url: `/columns/citype/${citype}`, method: 'get', signal })
    }
}

export const getGetUserColumnsQueryKey = (citype: string) => [`/columns/citype/${citype}`] as const

export const useGetUserColumnsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>, TError = unknown>(
    citype: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetUserColumnsQueryKey(citype)

    const getUserColumns = useGetUserColumnsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>> = ({ signal }) => getUserColumns(citype, signal)

    return { queryKey, queryFn, enabled: !!citype, ...queryOptions }
}

export type GetUserColumnsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>>
export type GetUserColumnsQueryError = unknown

export const useGetUserColumns = <TData = Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>, TError = unknown>(
    citype: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUserColumnsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetUserColumnsQueryOptions(citype, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useResetUserColumnsHook = () => {
    const resetUserColumns = useUserConfigSwaggerClient<void>()

    return (citype: string) => {
        return resetUserColumns({ url: `/columns/citype/${citype}`, method: 'delete' })
    }
}

export const useResetUserColumnsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useResetUserColumnsHook>>>, TError, { citype: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useResetUserColumnsHook>>>, TError, { citype: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const resetUserColumns = useResetUserColumnsHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useResetUserColumnsHook>>>, { citype: string }> = (props) => {
        const { citype } = props ?? {}

        return resetUserColumns(citype)
    }

    return { mutationFn, ...mutationOptions }
}

export type ResetUserColumnsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useResetUserColumnsHook>>>>

export type ResetUserColumnsMutationError = unknown

export const useResetUserColumns = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useResetUserColumnsHook>>>, TError, { citype: string }, TContext>
}) => {
    const mutationOptions = useResetUserColumnsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useGetDefaultColumnsHook = () => {
    const getDefaultColumns = useUserConfigSwaggerClient<FavoriteCiType>()

    return (citype: string, signal?: AbortSignal) => {
        return getDefaultColumns({ url: `/columns/citype/${citype}/default`, method: 'get', signal })
    }
}

export const getGetDefaultColumnsQueryKey = (citype: string) => [`/columns/citype/${citype}/default`] as const

export const useGetDefaultColumnsQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>, TError = unknown>(
    citype: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDefaultColumnsQueryKey(citype)

    const getDefaultColumns = useGetDefaultColumnsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>> = ({ signal }) => getDefaultColumns(citype, signal)

    return { queryKey, queryFn, enabled: !!citype, ...queryOptions }
}

export type GetDefaultColumnsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>>
export type GetDefaultColumnsQueryError = unknown

export const useGetDefaultColumns = <TData = Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>, TError = unknown>(
    citype: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDefaultColumnsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDefaultColumnsQueryOptions(citype, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

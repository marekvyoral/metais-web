//@ts-nocheck
/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * MetaIS Provisioning
 * OpenAPI spec version: latest
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useProvisioningSwaggerClient } from '../hooks/useProvisioningSwaggerClient'
export type ListConsumingProjectsCandidatesParams = {
    'providingProjects[]'?: string[]
    projectNameLike?: string
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
}

export type ListIntegrationCoverageOfIsvsParams = {
    integrationUuid?: string
    'consumingProjects[]'?: string[]
    'providingProjects[]'?: string[]
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
    ignoreInvalidated?: boolean
}

export type ListIntegrationHarmonogramsParams = {
    integrationUuid: string
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
    ignoreInvalidated?: boolean
}

export type ListIntegrationLinksParams = {
    integrationName?: string
    'consumingProjects[]'?: string[]
    'providingProjects[]'?: string[]
    'consumingIsvs[]'?: string[]
    'providingIsvs[]'?: string[]
    'consumingPo[]'?: string[]
    'providingPo[]'?: string[]
    itemState?: string
    integrationState?: string
    dizState?: string
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
}

export type ListIntegrationSubjectsParams = {
    integrationUuid: string
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
    ignoreInvalidated?: boolean
}

export type CheckOperationPermissionByMetaisCodeParams = {
    operation: string
}

export type ListProvidingProjectsCandidatesParams = {
    'consumingProjects[]'?: string[]
    projectNameLike?: string
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
}

export type ListRelatedIntegrationLinksParams = {
    side: string
    ciType: string
    ciUuid: string
    page?: number
    perPageSize?: number
    sortBy?: string
    ascending?: boolean
    ignoreInvalidated?: boolean
}

export type ProvServiceRequestBody = {
    file: Blob
}

export type ProvServiceRequestParams = {
    roles: string
    accountName: string
    projectUuid: string
}

export interface ApiServiceInfoLight {
    type?: string
    uuid?: string
    name?: string
    code?: string
    state?: string
}

export interface ApiIntegrationCoverageOfIsvsViewItem {
    integrationUuid?: string
    integrationName?: string
    integrationCode?: string
    integrationState?: string
    consumingKs?: ApiServiceInfoLight
    consumingAs?: ApiServiceInfoLight
    providingAs?: ApiServiceInfoLight
}

export interface ApiIntegrationCoverageOfIsvsViewList {
    results?: ApiIntegrationCoverageOfIsvsViewItem[]
    pagination?: PaginationResponseData
}

export interface ApiIsvsInfoLight {
    type?: string
    uuid?: string
    name?: string
    code?: string
    state?: string
}

export interface ApiGestorInfoLight {
    type?: string
    uuid?: string
    name?: string
    code?: string
    state?: string
}

export interface ApiPermissionResult {
    hasPermission?: boolean
}

export interface PaginationResponseData {
    page?: number
    perPage?: number
    totalPages?: number
    totalItems?: number
}

export interface ApiIntegrationSubjectsViewList {
    results?: ApiIntegrationSubjectsViewItem[]
    pagination?: PaginationResponseData
}

export interface ApiProjectInfoLightList {
    results?: ApiProjectInfoLight[]
    pagination?: PaginationResponseData
}

export interface ApiIntegrationHarmonogram {
    integrationUuid?: string
    integrationName?: string
    integrationCode?: string
    uuid?: string
    plannedDate?: string
    realizedDate?: string
    harmonogramPhase?: string
    ciType?: string
}

export interface ApiIntegrationHarmonogramList {
    results?: ApiIntegrationHarmonogram[]
    pagination?: PaginationResponseData
}

export interface ApiProjectInfoLight {
    type?: string
    uuid?: string
    name?: string
    code?: string
    state?: string
}

export interface ApiIntegrationSubjectsViewItem {
    integrationUuid?: string
    integrationName?: string
    integrationCode?: string
    integrationState?: string
    providingProject?: ApiProjectInfoLight
    consumingProject?: ApiProjectInfoLight
    providingGestor?: ApiGestorInfoLight
    consumingGestor?: ApiGestorInfoLight
    providingIsvs?: ApiIsvsInfoLight
    consumingIsvs?: ApiIsvsInfoLight
}

export interface ApiIntegrationLink {
    uuid?: string
    state?: string
    name?: string
    nameEnglish?: string
    description?: string
    descriptionEnglish?: string
    note?: string
    source?: string
    code?: string
    referencingIdentifier?: string
    ciType?: string
    owner?: string
    dizStatus?: string
    consumingProject?: ApiProjectInfoLight
    providingProject?: ApiProjectInfoLight
}

export interface ApiIntegrationLinkList {
    results?: ApiIntegrationLink[]
    pagination?: PaginationResponseData
}

export type ApiErrorData = { [key: string]: any }

export interface ApiError {
    type?: string
    message?: string
    data?: ApiErrorData
    logToken?: string
    values?: string[]
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useUpdateIntegrationLinkHook = () => {
    const updateIntegrationLink = useProvisioningSwaggerClient<void>()

    return (integrationUuid: string, apiIntegrationLink: ApiIntegrationLink) => {
        return updateIntegrationLink({
            url: `/integration/${integrationUuid}`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: apiIntegrationLink,
        })
    }
}

export const useUpdateIntegrationLinkMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationLinkHook>>>,
        TError,
        { integrationUuid: string; data: ApiIntegrationLink },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationLinkHook>>>,
    TError,
    { integrationUuid: string; data: ApiIntegrationLink },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateIntegrationLink = useUpdateIntegrationLinkHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationLinkHook>>>,
        { integrationUuid: string; data: ApiIntegrationLink }
    > = (props) => {
        const { integrationUuid, data } = props ?? {}

        return updateIntegrationLink(integrationUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateIntegrationLinkMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationLinkHook>>>>
export type UpdateIntegrationLinkMutationBody = ApiIntegrationLink
export type UpdateIntegrationLinkMutationError = ApiError

export const useUpdateIntegrationLink = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationLinkHook>>>,
        TError,
        { integrationUuid: string; data: ApiIntegrationLink },
        TContext
    >
}) => {
    const mutationOptions = useUpdateIntegrationLinkMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useDeleteIntegrationLinkHook = () => {
    const deleteIntegrationLink = useProvisioningSwaggerClient<void>()

    return (integrationUuid: string) => {
        return deleteIntegrationLink({ url: `/integration/${integrationUuid}`, method: 'delete' })
    }
}

export const useDeleteIntegrationLinkMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteIntegrationLinkHook>>>, TError, { integrationUuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteIntegrationLinkHook>>>, TError, { integrationUuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteIntegrationLink = useDeleteIntegrationLinkHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteIntegrationLinkHook>>>, { integrationUuid: string }> = (
        props,
    ) => {
        const { integrationUuid } = props ?? {}

        return deleteIntegrationLink(integrationUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteIntegrationLinkMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteIntegrationLinkHook>>>>

export type DeleteIntegrationLinkMutationError = ApiError

export const useDeleteIntegrationLink = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteIntegrationLinkHook>>>, TError, { integrationUuid: string }, TContext>
}) => {
    const mutationOptions = useDeleteIntegrationLinkMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useCreateIntegrationLinkHook = () => {
    const createIntegrationLink = useProvisioningSwaggerClient<void>()

    return (apiIntegrationLink: ApiIntegrationLink) => {
        return createIntegrationLink({
            url: `/integration`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiIntegrationLink,
        })
    }
}

export const useCreateIntegrationLinkMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateIntegrationLinkHook>>>,
        TError,
        { data: ApiIntegrationLink },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useCreateIntegrationLinkHook>>>, TError, { data: ApiIntegrationLink }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const createIntegrationLink = useCreateIntegrationLinkHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useCreateIntegrationLinkHook>>>, { data: ApiIntegrationLink }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return createIntegrationLink(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateIntegrationLinkMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCreateIntegrationLinkHook>>>>
export type CreateIntegrationLinkMutationBody = ApiIntegrationLink
export type CreateIntegrationLinkMutationError = ApiError

export const useCreateIntegrationLink = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useCreateIntegrationLinkHook>>>,
        TError,
        { data: ApiIntegrationLink },
        TContext
    >
}) => {
    const mutationOptions = useCreateIntegrationLinkMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useChangeIntegrationStateHook = () => {
    const changeIntegrationState = useProvisioningSwaggerClient<void>()

    return (integrationUuid: string, transition: string) => {
        return changeIntegrationState({ url: `/integration/${integrationUuid}/transitions/${transition}`, method: 'post' })
    }
}

export const useChangeIntegrationStateMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIntegrationStateHook>>>,
        TError,
        { integrationUuid: string; transition: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangeIntegrationStateHook>>>,
    TError,
    { integrationUuid: string; transition: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeIntegrationState = useChangeIntegrationStateHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useChangeIntegrationStateHook>>>,
        { integrationUuid: string; transition: string }
    > = (props) => {
        const { integrationUuid, transition } = props ?? {}

        return changeIntegrationState(integrationUuid, transition)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeIntegrationStateMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeIntegrationStateHook>>>>

export type ChangeIntegrationStateMutationError = ApiError

export const useChangeIntegrationState = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeIntegrationStateHook>>>,
        TError,
        { integrationUuid: string; transition: string },
        TContext
    >
}) => {
    const mutationOptions = useChangeIntegrationStateMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useProvServiceRequestHook = () => {
    const provServiceRequest = useProvisioningSwaggerClient<boolean>()

    return (integrationUuid: string, provServiceRequestBody: ProvServiceRequestBody, params: ProvServiceRequestParams) => {
        return provServiceRequest({
            url: `/integration/${integrationUuid}/servicerequest`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: provServiceRequestBody,
            params,
        })
    }
}

export const useProvServiceRequestMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProvServiceRequestHook>>>,
        TError,
        { integrationUuid: string; data: ProvServiceRequestBody; params: ProvServiceRequestParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useProvServiceRequestHook>>>,
    TError,
    { integrationUuid: string; data: ProvServiceRequestBody; params: ProvServiceRequestParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const provServiceRequest = useProvServiceRequestHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useProvServiceRequestHook>>>,
        { integrationUuid: string; data: ProvServiceRequestBody; params: ProvServiceRequestParams }
    > = (props) => {
        const { integrationUuid, data, params } = props ?? {}

        return provServiceRequest(integrationUuid, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ProvServiceRequestMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useProvServiceRequestHook>>>>
export type ProvServiceRequestMutationBody = ProvServiceRequestBody
export type ProvServiceRequestMutationError = ApiError

export const useProvServiceRequest = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useProvServiceRequestHook>>>,
        TError,
        { integrationUuid: string; data: ProvServiceRequestBody; params: ProvServiceRequestParams },
        TContext
    >
}) => {
    const mutationOptions = useProvServiceRequestMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useChangeOwnerHook = () => {
    const changeOwner = useProvisioningSwaggerClient<void>()

    return (integrationUuid: string, transition: string) => {
        return changeOwner({ url: `/integration/${integrationUuid}/ownership/transitions/${transition}`, method: 'post' })
    }
}

export const useChangeOwnerMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeOwnerHook>>>,
        TError,
        { integrationUuid: string; transition: string },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangeOwnerHook>>>,
    TError,
    { integrationUuid: string; transition: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeOwner = useChangeOwnerHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useChangeOwnerHook>>>,
        { integrationUuid: string; transition: string }
    > = (props) => {
        const { integrationUuid, transition } = props ?? {}

        return changeOwner(integrationUuid, transition)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeOwnerMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeOwnerHook>>>>

export type ChangeOwnerMutationError = ApiError

export const useChangeOwner = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeOwnerHook>>>,
        TError,
        { integrationUuid: string; transition: string },
        TContext
    >
}) => {
    const mutationOptions = useChangeOwnerMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateIntegrationHarmonogramsHook = () => {
    const updateIntegrationHarmonograms = useProvisioningSwaggerClient<void>()

    return (integrationUuid: string, apiIntegrationHarmonogram: ApiIntegrationHarmonogram[]) => {
        return updateIntegrationHarmonograms({
            url: `/integration/integrationharmonograms/${integrationUuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: apiIntegrationHarmonogram,
        })
    }
}

export const useUpdateIntegrationHarmonogramsMutationOptions = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationHarmonogramsHook>>>,
        TError,
        { integrationUuid: string; data: ApiIntegrationHarmonogram[] },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationHarmonogramsHook>>>,
    TError,
    { integrationUuid: string; data: ApiIntegrationHarmonogram[] },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateIntegrationHarmonograms = useUpdateIntegrationHarmonogramsHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationHarmonogramsHook>>>,
        { integrationUuid: string; data: ApiIntegrationHarmonogram[] }
    > = (props) => {
        const { integrationUuid, data } = props ?? {}

        return updateIntegrationHarmonograms(integrationUuid, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateIntegrationHarmonogramsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationHarmonogramsHook>>>>
export type UpdateIntegrationHarmonogramsMutationBody = ApiIntegrationHarmonogram[]
export type UpdateIntegrationHarmonogramsMutationError = ApiError

export const useUpdateIntegrationHarmonograms = <TError = ApiError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateIntegrationHarmonogramsHook>>>,
        TError,
        { integrationUuid: string; data: ApiIntegrationHarmonogram[] },
        TContext
    >
}) => {
    const mutationOptions = useUpdateIntegrationHarmonogramsMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useListRelatedIntegrationLinksHook = () => {
    const listRelatedIntegrationLinks = useProvisioningSwaggerClient<ApiIntegrationLinkList>()

    return (params: ListRelatedIntegrationLinksParams, signal?: AbortSignal) => {
        return listRelatedIntegrationLinks({ url: `/integration/relatedintegrationlinks`, method: 'get', params, signal })
    }
}

export const getListRelatedIntegrationLinksQueryKey = (params: ListRelatedIntegrationLinksParams) =>
    [`/integration/relatedintegrationlinks`, ...(params ? [params] : [])] as const

export const useListRelatedIntegrationLinksQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>,
    TError = ApiError,
>(
    params: ListRelatedIntegrationLinksParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListRelatedIntegrationLinksQueryKey(params)

    const listRelatedIntegrationLinks = useListRelatedIntegrationLinksHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>> = ({ signal }) =>
        listRelatedIntegrationLinks(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListRelatedIntegrationLinksQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>>
export type ListRelatedIntegrationLinksQueryError = ApiError

export const useListRelatedIntegrationLinks = <TData = Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>, TError = ApiError>(
    params: ListRelatedIntegrationLinksParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListRelatedIntegrationLinksHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListRelatedIntegrationLinksQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListProvidingProjectsCandidatesHook = () => {
    const listProvidingProjectsCandidates = useProvisioningSwaggerClient<ApiProjectInfoLightList>()

    return (params?: ListProvidingProjectsCandidatesParams, signal?: AbortSignal) => {
        return listProvidingProjectsCandidates({ url: `/integration/providingprojectscandidates`, method: 'get', params, signal })
    }
}

export const getListProvidingProjectsCandidatesQueryKey = (params?: ListProvidingProjectsCandidatesParams) =>
    [`/integration/providingprojectscandidates`, ...(params ? [params] : [])] as const

export const useListProvidingProjectsCandidatesQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>,
    TError = ApiError,
>(
    params?: ListProvidingProjectsCandidatesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListProvidingProjectsCandidatesQueryKey(params)

    const listProvidingProjectsCandidates = useListProvidingProjectsCandidatesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>> = ({ signal }) =>
        listProvidingProjectsCandidates(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListProvidingProjectsCandidatesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>>
export type ListProvidingProjectsCandidatesQueryError = ApiError

export const useListProvidingProjectsCandidates = <
    TData = Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>,
    TError = ApiError,
>(
    params?: ListProvidingProjectsCandidatesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListProvidingProjectsCandidatesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListProvidingProjectsCandidatesQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useCheckOperationPermissionByMetaisCodeHook = () => {
    const checkOperationPermissionByMetaisCode = useProvisioningSwaggerClient<ApiPermissionResult>()

    return (integrationMetaisCode: string, params: CheckOperationPermissionByMetaisCodeParams, signal?: AbortSignal) => {
        return checkOperationPermissionByMetaisCode({
            url: `/integration/metaiscode/${integrationMetaisCode}/permissions`,
            method: 'get',
            params,
            signal,
        })
    }
}

export const getCheckOperationPermissionByMetaisCodeQueryKey = (integrationMetaisCode: string, params: CheckOperationPermissionByMetaisCodeParams) =>
    [`/integration/metaiscode/${integrationMetaisCode}/permissions`, ...(params ? [params] : [])] as const

export const useCheckOperationPermissionByMetaisCodeQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>,
    TError = ApiError,
>(
    integrationMetaisCode: string,
    params: CheckOperationPermissionByMetaisCodeParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getCheckOperationPermissionByMetaisCodeQueryKey(integrationMetaisCode, params)

    const checkOperationPermissionByMetaisCode = useCheckOperationPermissionByMetaisCodeHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>> = ({ signal }) =>
        checkOperationPermissionByMetaisCode(integrationMetaisCode, params, signal)

    return { queryKey, queryFn, enabled: !!integrationMetaisCode, ...queryOptions }
}

export type CheckOperationPermissionByMetaisCodeQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>
>
export type CheckOperationPermissionByMetaisCodeQueryError = ApiError

export const useCheckOperationPermissionByMetaisCode = <
    TData = Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>,
    TError = ApiError,
>(
    integrationMetaisCode: string,
    params: CheckOperationPermissionByMetaisCodeParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCheckOperationPermissionByMetaisCodeHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useCheckOperationPermissionByMetaisCodeQueryOptions(integrationMetaisCode, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListIntegrationSubjectsHook = () => {
    const listIntegrationSubjects = useProvisioningSwaggerClient<ApiIntegrationSubjectsViewList>()

    return (params: ListIntegrationSubjectsParams, signal?: AbortSignal) => {
        return listIntegrationSubjects({ url: `/integration/integrationsubjects`, method: 'get', params, signal })
    }
}

export const getListIntegrationSubjectsQueryKey = (params: ListIntegrationSubjectsParams) =>
    [`/integration/integrationsubjects`, ...(params ? [params] : [])] as const

export const useListIntegrationSubjectsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>,
    TError = ApiError,
>(
    params: ListIntegrationSubjectsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListIntegrationSubjectsQueryKey(params)

    const listIntegrationSubjects = useListIntegrationSubjectsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>> = ({ signal }) =>
        listIntegrationSubjects(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListIntegrationSubjectsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>>
export type ListIntegrationSubjectsQueryError = ApiError

export const useListIntegrationSubjects = <TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>, TError = ApiError>(
    params: ListIntegrationSubjectsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationSubjectsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListIntegrationSubjectsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListIntegrationLinksHook = () => {
    const listIntegrationLinks = useProvisioningSwaggerClient<ApiIntegrationLinkList>()

    return (params?: ListIntegrationLinksParams, signal?: AbortSignal) => {
        return listIntegrationLinks({ url: `/integration/integrationlinks`, method: 'get', params, signal })
    }
}

export const getListIntegrationLinksQueryKey = (params?: ListIntegrationLinksParams) =>
    [`/integration/integrationlinks`, ...(params ? [params] : [])] as const

export const useListIntegrationLinksQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>, TError = ApiError>(
    params?: ListIntegrationLinksParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListIntegrationLinksQueryKey(params)

    const listIntegrationLinks = useListIntegrationLinksHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>> = ({ signal }) =>
        listIntegrationLinks(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListIntegrationLinksQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>>
export type ListIntegrationLinksQueryError = ApiError

export const useListIntegrationLinks = <TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>, TError = ApiError>(
    params?: ListIntegrationLinksParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationLinksHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListIntegrationLinksQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListIntegrationHarmonogramsHook = () => {
    const listIntegrationHarmonograms = useProvisioningSwaggerClient<ApiIntegrationHarmonogramList>()

    return (params: ListIntegrationHarmonogramsParams, signal?: AbortSignal) => {
        return listIntegrationHarmonograms({ url: `/integration/integrationharmonograms`, method: 'get', params, signal })
    }
}

export const getListIntegrationHarmonogramsQueryKey = (params: ListIntegrationHarmonogramsParams) =>
    [`/integration/integrationharmonograms`, ...(params ? [params] : [])] as const

export const useListIntegrationHarmonogramsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>,
    TError = ApiError,
>(
    params: ListIntegrationHarmonogramsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListIntegrationHarmonogramsQueryKey(params)

    const listIntegrationHarmonograms = useListIntegrationHarmonogramsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>> = ({ signal }) =>
        listIntegrationHarmonograms(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListIntegrationHarmonogramsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>>
export type ListIntegrationHarmonogramsQueryError = ApiError

export const useListIntegrationHarmonograms = <TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>, TError = ApiError>(
    params: ListIntegrationHarmonogramsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationHarmonogramsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListIntegrationHarmonogramsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListIntegrationCoverageOfIsvsHook = () => {
    const listIntegrationCoverageOfIsvs = useProvisioningSwaggerClient<ApiIntegrationCoverageOfIsvsViewList>()

    return (params?: ListIntegrationCoverageOfIsvsParams, signal?: AbortSignal) => {
        return listIntegrationCoverageOfIsvs({ url: `/integration/integrationcoverage`, method: 'get', params, signal })
    }
}

export const getListIntegrationCoverageOfIsvsQueryKey = (params?: ListIntegrationCoverageOfIsvsParams) =>
    [`/integration/integrationcoverage`, ...(params ? [params] : [])] as const

export const useListIntegrationCoverageOfIsvsQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>,
    TError = ApiError,
>(
    params?: ListIntegrationCoverageOfIsvsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListIntegrationCoverageOfIsvsQueryKey(params)

    const listIntegrationCoverageOfIsvs = useListIntegrationCoverageOfIsvsHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>> = ({ signal }) =>
        listIntegrationCoverageOfIsvs(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListIntegrationCoverageOfIsvsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>>
export type ListIntegrationCoverageOfIsvsQueryError = ApiError

export const useListIntegrationCoverageOfIsvs = <
    TData = Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>,
    TError = ApiError,
>(
    params?: ListIntegrationCoverageOfIsvsParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListIntegrationCoverageOfIsvsHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListIntegrationCoverageOfIsvsQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useListConsumingProjectsCandidatesHook = () => {
    const listConsumingProjectsCandidates = useProvisioningSwaggerClient<ApiProjectInfoLightList>()

    return (params?: ListConsumingProjectsCandidatesParams, signal?: AbortSignal) => {
        return listConsumingProjectsCandidates({ url: `/integration/consumingprojectscandidates`, method: 'get', params, signal })
    }
}

export const getListConsumingProjectsCandidatesQueryKey = (params?: ListConsumingProjectsCandidatesParams) =>
    [`/integration/consumingprojectscandidates`, ...(params ? [params] : [])] as const

export const useListConsumingProjectsCandidatesQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>,
    TError = ApiError,
>(
    params?: ListConsumingProjectsCandidatesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getListConsumingProjectsCandidatesQueryKey(params)

    const listConsumingProjectsCandidates = useListConsumingProjectsCandidatesHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>> = ({ signal }) =>
        listConsumingProjectsCandidates(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ListConsumingProjectsCandidatesQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>>
export type ListConsumingProjectsCandidatesQueryError = ApiError

export const useListConsumingProjectsCandidates = <
    TData = Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>,
    TError = ApiError,
>(
    params?: ListConsumingProjectsCandidatesParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useListConsumingProjectsCandidatesHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useListConsumingProjectsCandidatesQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

// @ts-nocheck
/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * MetaIS CMDB
 * Api Documentation
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useCmdbSwaggerClient } from '../hooks/useCmdbSwaggerClient'
import { useClientForReadConfigurationItemUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForReadCiNeighboursWithAllRelsUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
import { useClientForGetRoleParticipantUsingGET } from '../hooks/useCmdbSwaggerClientWithTransform'
export type ValidateCIsByTypesAndOwnerUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    /**
     * poUuid
     */
    poUuid: string
    principal?: { [key: string]: any }
    /**
     * typeNames
     */
    typeNames: string[]
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
    /**
     * validationTypes
     */
    validationTypes?: string[]
}

export type ValidateStoreGraphUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type UpdateConfluenceUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReindexReportsUsingDELETEParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReindexRelationshipsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * limit
     */
    limit?: number
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReindexUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * limit
     */
    limit?: number
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetPropertiesUsingGET200 = { [key: string]: string }

export type PartialReindexUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * limit
     */
    limit?: number
    name?: string
    principal?: { [key: string]: any }
    /**
     * timestamp
     */
    timestamp: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReindexHierarchyUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ConfluenceDocumentResultsUsingPOSTParams = {
    /**
     * spaceKey
     */
    spaceKey: string
    /**
     * title
     */
    title: string
}

export type CiRelTypesIntegrityCheckUsingGET200 = { [key: string]: string[] }

export type StoreGroupItemsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreRelationshipUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreCiNeighboursSUUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RemoveManagerFromGroupUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreManagerToGroupUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreGroupUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreGraphBiznisUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreGraphUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreConfigurationItemBiznisUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreConfigurationItemUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardVotesUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardVotesUsingDELETEParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreStandardVotesUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadVotesFromStandardUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    /**
     * ascending
     */
    ascending?: boolean
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * fulltextSearch
     */
    fulltextSearch?: string
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * sortBy
     */
    sortBy?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardStandardRequestsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardStandardUsingDELETEParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreStandardStandardRequestsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadStandardRequestsFromStandardUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    /**
     * ascending
     */
    ascending?: boolean
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * fulltextSearch
     */
    fulltextSearch?: string
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * sortBy
     */
    sortBy?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardMeetingRequestsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardMeetingRequestsUsingDELETEParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreStandardMeetingRequestsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadMeetingRequestsFromStandardUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    /**
     * ascending
     */
    ascending?: boolean
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * fulltextSearch
     */
    fulltextSearch?: string
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * sortBy
     */
    sortBy?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteStandardUsingDELETEParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiListUsingPOST1Params = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadReportsWithFilterUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    /**
     * category_id
     */
    category_id?: number
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * fulltextSearch
     */
    fulltextSearch?: string
    /**
     * language
     */
    language?: string
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * published
     */
    published?: boolean
    /**
     * reportType
     */
    reportType?: string
    /**
     * sortBy
     */
    sortBy?: string
    /**
     * sortType
     */
    sortType?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RemoveCiFromGroupUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RemoveGroupUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RecycleInvalidatedRelsBiznisUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RecycleInvalidatedRelsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RecyclePoWithHierarchyUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RecycleInvalidatedCisBiznisUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type RecycleInvalidatedCisUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadGroupItemsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadConfigurationItemByRefIDUsingPOST200 = { [key: string]: any }

export type ReadConfigurationItemByRefIDUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadConfigurationItemByMetaIsCodeUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadConfigurationItemsByMetaIsCodesUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type SearchAllUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * state
     */
    state?: string[]
    /**
     * text
     */
    text?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetRoleParticipantUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetRoleParticipantBulkUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadRelListUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadPoSuperiorPoRelationshipUsingPOST200 = { [key: string]: RelationshipUi }

export type ReadPoSuperiorPoRelationshipUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadRelationshipListUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiNeighboursWithAllRelsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    /**
     * ciTypes
     */
    ciTypes?: string[]
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * relTypes
     */
    relTypes?: string[]
    /**
     * state
     */
    state?: string[]
    /**
     * usageType.blackList[]
     */
    'usageType.blackList[]'?: string[]
    /**
     * usageType.whiteList[]
     */
    'usageType.whiteList[]'?: string[]
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiNeighboursUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadRelationshipUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadQueryUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetKSSpravcaVerejnaMocAktivnaFZCUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadIncidentRelationshipsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiUuidSetUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiRelationshipCiListUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiListUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiListUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    /**
     * owner
     */
    owner?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * sortBy
     */
    sortBy?: string
    /**
     * sortType
     */
    sortType?: string
    /**
     * state
     */
    state?: string[]
    /**
     * type
     */
    type?: string[]
    /**
     * usageType.blackList[]
     */
    'usageType.blackList[]'?: string[]
    /**
     * usageType.whiteList[]
     */
    'usageType.whiteList[]'?: string[]
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadRelationshipsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    /**
     * types[]
     */
    'types[]'?: string[]
    /**
     * usageType.blackList[]
     */
    'usageType.blackList[]'?: string[]
    /**
     * usageType.whiteList[]
     */
    'usageType.whiteList[]'?: string[]
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadNeighboursConfigurationItemsCountUsingGET200 = { [key: string]: number }

export type ReadNeighboursConfigurationItemsCountUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * includeInvalidated
     */
    includeInvalidated?: boolean
    name?: string
    principal?: { [key: string]: any }
    /**
     * usageType.blackList[]
     */
    'usageType.blackList[]'?: string[]
    /**
     * usageType.whiteList[]
     */
    'usageType.whiteList[]'?: string[]
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadNeighboursConfigurationItemsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * includeInvalidated
     */
    includeInvalidated?: boolean
    name?: string
    /**
     * nodeType
     */
    nodeType?: string
    /**
     * nodeUsageType.blackList[]
     */
    'nodeUsageType.blackList[]'?: string[]
    /**
     * nodeUsageType.whiteList[]
     */
    'nodeUsageType.whiteList[]'?: string[]
    principal?: { [key: string]: any }
    /**
     * relationshipType
     */
    relationshipType?: string
    /**
     * relationshipUsageType.blackList[]
     */
    'relationshipUsageType.blackList[]'?: string[]
    /**
     * relationshipUsageType.whiteList[]
     */
    'relationshipUsageType.whiteList[]'?: string[]
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadConfigurationItemUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetCountCiTypesByOwnerUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * liableEntities
     */
    liableEntities?: string[]
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StorePoWithHierarchyRelUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StorePoUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type UpdateNotificationsUsingPUTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StoreNotificationsUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadNotificationsWithFilterUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    /**
     * ascending
     */
    ascending?: boolean
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * eventType
     */
    eventType?: string
    /**
     * fulltextSearch
     */
    fulltextSearch?: string
    name?: string
    /**
     * page
     */
    page?: number
    /**
     * perPage
     */
    perPage?: number
    principal?: { [key: string]: any }
    /**
     * sortBy
     */
    sortBy?: string
    /**
     * unread
     */
    unread?: boolean
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
    /**
     * userId
     */
    userId?: string
}

export type GetMetricsUsingGETParams = {
    /**
     * pretty
     */
    pretty?: boolean
}

export type InvalidateRelationshipUsingPOSTNewStateItem =
    (typeof InvalidateRelationshipUsingPOSTNewStateItem)[keyof typeof InvalidateRelationshipUsingPOSTNewStateItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvalidateRelationshipUsingPOSTNewStateItem = {
    DRAFT: 'DRAFT',
    AWAITING_APPROVAL: 'AWAITING_APPROVAL',
    APPROVED_BY_OWNER: 'APPROVED_BY_OWNER',
    INVALIDATED: 'INVALIDATED',
    DELETED: 'DELETED',
} as const

export type InvalidateRelationshipUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    /**
     * newState
     */
    newState?: InvalidateRelationshipUsingPOSTNewStateItem[]
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type InvalidateSetUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type InvalidateConfigurationItemBiznisMdulesUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type InvalidateConfigurationItemUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadRelHistoryVersionsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    /**
     * page
     */
    page: number
    /**
     * perPage
     */
    perPage: number
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadRelHistoryVersionUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    /**
     * timestamp
     */
    timestamp?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
    /**
     * versionId
     */
    versionId?: string
}

export type GdprHistoryUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * lastModifiedBy
     */
    lastModifiedBy: string
    name?: string
    /**
     * page
     */
    page: number
    /**
     * perPage
     */
    perPage: number
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiHistoryVersionsIncidentRelsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * excludeStates[]
     */
    'excludeStates[]'?: string[]
    /**
     * includeCis
     */
    includeCis?: boolean
    name?: string
    /**
     * page
     */
    page: number
    /**
     * perPage
     */
    perPage: number
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
    /**
     * versionId
     */
    versionId: string
}

export type ReadCiHistoryModifiedByListUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiHistoryVersionsActionsListUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiHistoryVersionsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    /**
     * action
     */
    action?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * fromDate
     */
    fromDate?: string
    /**
     * lastModifiedBy
     */
    lastModifiedBy?: string[]
    name?: string
    /**
     * page
     */
    page: number
    /**
     * perPage
     */
    perPage: number
    principal?: { [key: string]: any }
    /**
     * toDate
     */
    toDate?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReadCiHistoryVersionUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    /**
     * timestamp
     */
    timestamp?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
    /**
     * versionId
     */
    versionId?: string
}

export type ReadAllCiHistoryVersionsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    /**
     * action
     */
    action?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    /**
     * fromDate
     */
    fromDate?: string
    /**
     * lastModifiedBy
     */
    lastModifiedBy?: string[]
    name?: string
    /**
     * page
     */
    page: number
    /**
     * perPage
     */
    perPage: number
    principal?: { [key: string]: any }
    /**
     * toDate
     */
    toDate?: string
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type StorePoHierarchyRelUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetConfigurationItemsGroupsUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetGroupListUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type GetUuidUsingGETParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ReportErrorUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type DeleteRelationshipUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ChangeOwnerSetUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type ChangePoHierarchyUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

export type AddCiToGroupUsingPOSTParams = {
    'OAuth2Request.approved'?: boolean
    'OAuth2Request.authorities[0].authority'?: string
    'OAuth2Request.grantType'?: string
    'OAuth2Request.redirectUri'?: string
    'OAuth2Request.refresh'?: boolean
    'OAuth2Request.refreshTokenRequest.grantType'?: string
    'OAuth2Request.resourceIds'?: string[]
    'OAuth2Request.responseTypes'?: string[]
    authenticated?: boolean
    'authorities[0].authority'?: string
    clientOnly?: boolean
    credentials?: { [key: string]: any }
    details?: { [key: string]: any }
    name?: string
    principal?: { [key: string]: any }
    'userAuthentication.authenticated'?: boolean
    'userAuthentication.authorities[0].authority'?: string
    'userAuthentication.credentials'?: { [key: string]: any }
    'userAuthentication.details'?: { [key: string]: any }
    'userAuthentication.principal'?: { [key: string]: any }
}

/**
 * request
 */
export type GraphRequestUiBody = GraphRequestUi

/**
 * relationship
 */
export type RelationshipUiBody = RelationshipUi

/**
 * relationshipUi
 */
export type RelationshipInvalidateUiBody = RelationshipInvalidateUi

/**
 * filterContainerUi
 */
export type CiListFilterContainerUiBody = CiListFilterContainerUi

/**
 * poWithHierarchyUi
 */
export type PoWithHierarchyUiBody = PoWithHierarchyUi

/**
 * configurationItem
 */
export type ConfigurationItemUiBody = ConfigurationItemUi

/**
 * recycleRelsUi
 */
export type RecycleRelsUiBody = RecycleRelsUi

/**
 * filterContainerUi
 */
export type RelListFilterContainerUiBody = RelListFilterContainerUi

/**
 * configurationItemUi
 */
export type ConfigurationItemInvalidateUiBody = ConfigurationItemInvalidateUi

/**
 * recycleCisUi
 */
export type RecycleCisUiBody = RecycleCisUi

/**
 * deleteIds
 */
export type DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody = number[]

export interface MapStringObject {
    [key: string]: { [key: string]: any }
}

export interface HistoryVersionUiRelationshipUi {
    actionBy?: string
    actionTime?: string
    actions?: string[]
    item?: RelationshipUi
    versionId?: string
}

export interface HistoryVersionsListUiRelationshipUi {
    historyVersions?: HistoryVersionUiRelationshipUi[]
    pagination?: PaginationUi
}

export interface HistoryVersionUiConfigurationItemUi {
    actionBy?: string
    actionTime?: string
    actions?: string[]
    item?: ConfigurationItemUi
    versionId?: string
}

export interface HistoryVersionsListUiConfigurationItemUi {
    historyVersions?: HistoryVersionUiConfigurationItemUi[]
    pagination?: PaginationUi
}

export type WriteSetUiAllOf = {
    configurationItemSet?: ConfigurationItemUi[]
    invalidateReason?: InvalidateReason
    relationshipSet?: RelationshipUi[]
}

export type WriteSetUi = ItemSetUi & WriteSetUiAllOf

export interface VoteUi {
    effectiveFrom?: string
    effectiveTo?: string
    id?: number
    name?: string
    voteState?: string
}

export interface VoteListUi {
    pagination?: PaginationUi
    votes?: VoteUi[]
}

export interface Version {
    _expandable?: Expandable
    _links?: Links
    by?: By
    hidden?: boolean
    message?: string
    minorEdit?: boolean
    number?: number
    when?: string
}

export interface UuidSetUi {
    uuids?: string[]
}

export interface UserFeedbackErrorReportUi {
    data?: string
    description?: string
    title?: string
}

export type UsageTypeFilterUiWhiteListItem = (typeof UsageTypeFilterUiWhiteListItem)[keyof typeof UsageTypeFilterUiWhiteListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiWhiteListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export type UsageTypeFilterUiBlackListItem = (typeof UsageTypeFilterUiBlackListItem)[keyof typeof UsageTypeFilterUiBlackListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiBlackListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export interface UsageTypeFilterUi {
    blackList?: UsageTypeFilterUiBlackListItem[]
    whiteList?: UsageTypeFilterUiWhiteListItem[]
}

export interface InvalidateReason {
    comment?: string
}

export interface StoreSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    invalidateReason?: InvalidateReason
    relationshipSet?: RelationshipUi[]
}

export interface StoreGroupMembersSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    doNotInvalidateIncomming?: boolean
    doNotInvalidateOutgoing?: boolean
    invalidateReason?: InvalidateReason
    newComtool?: string
    processedRelTypesEndingInGroup?: string[]
    processedRelTypesStartingInGroup?: string[]
    relationshipSet?: RelationshipUi[]
}

export interface StandardRequestUi {
    createdBy?: string
    id?: number
    srName?: string
    standardRequestState?: string
}

export interface StandardRequestListUi {
    pagination?: PaginationUi
    standardRequests?: StandardRequestUi[]
}

export type RoleType = (typeof RoleType)[keyof typeof RoleType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleType = {
    SYSTEM: 'SYSTEM',
    NON_SYSTEM: 'NON_SYSTEM',
} as const

export interface Role {
    assignedGroup?: string
    category?: string
    description?: string
    name?: string
    type?: RoleType
    uuid?: string
    weight?: number
}

export interface RoleParticipantUI {
    configurationItemUi?: ConfigurationItemUi
    gid?: string
    owner?: string
    role?: Role
}

export interface Result {
    _expandable?: Expandable
    _links?: Links
    extensions?: Extensions
    id?: string
    status?: string
    title?: string
    type?: string
    version?: Version
}

export type ResponseEntityStatusCode = (typeof ResponseEntityStatusCode)[keyof typeof ResponseEntityStatusCode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseEntityStatusCode = {
    NUMBER_100: '100',
    NUMBER_101: '101',
    NUMBER_102: '102',
    NUMBER_103: '103',
    NUMBER_200: '200',
    NUMBER_201: '201',
    NUMBER_202: '202',
    NUMBER_203: '203',
    NUMBER_204: '204',
    NUMBER_205: '205',
    NUMBER_206: '206',
    NUMBER_207: '207',
    NUMBER_208: '208',
    NUMBER_226: '226',
    NUMBER_300: '300',
    NUMBER_301: '301',
    NUMBER_302: '302',
    NUMBER_303: '303',
    NUMBER_304: '304',
    NUMBER_305: '305',
    NUMBER_307: '307',
    NUMBER_308: '308',
    NUMBER_400: '400',
    NUMBER_401: '401',
    NUMBER_402: '402',
    NUMBER_403: '403',
    NUMBER_404: '404',
    NUMBER_405: '405',
    NUMBER_406: '406',
    NUMBER_407: '407',
    NUMBER_408: '408',
    NUMBER_409: '409',
    NUMBER_410: '410',
    NUMBER_411: '411',
    NUMBER_412: '412',
    NUMBER_413: '413',
    NUMBER_414: '414',
    NUMBER_415: '415',
    NUMBER_416: '416',
    NUMBER_417: '417',
    NUMBER_418: '418',
    NUMBER_419: '419',
    NUMBER_420: '420',
    NUMBER_421: '421',
    NUMBER_422: '422',
    NUMBER_423: '423',
    NUMBER_424: '424',
    NUMBER_426: '426',
    NUMBER_428: '428',
    NUMBER_429: '429',
    NUMBER_431: '431',
    NUMBER_451: '451',
    NUMBER_500: '500',
    NUMBER_501: '501',
    NUMBER_502: '502',
    NUMBER_503: '503',
    NUMBER_504: '504',
    NUMBER_505: '505',
    NUMBER_506: '506',
    NUMBER_507: '507',
    NUMBER_508: '508',
    NUMBER_509: '509',
    NUMBER_510: '510',
    NUMBER_511: '511',
} as const

export type ResponseEntityBody = { [key: string]: any }

export interface ResponseEntity {
    body?: ResponseEntityBody
    statusCode?: ResponseEntityStatusCode
    statusCodeValue?: number
}

export interface RequestStatusResultUi {
    processed?: boolean
    processedAt?: string
    status?: string
}

export interface RequestIdUi {
    requestId?: string
}

export interface RequestId {
    id?: string
}

export interface ReportHolderUi {
    pagination?: PaginationUi
    reports?: ReportUi[]
}

export interface ReportCategoryUi {
    id?: number
    name?: string
    nameEn?: string
}

export interface ReportUi {
    category?: ReportCategoryUi
    description?: string
    id?: number
    language?: string
    lastUpdatedTime?: string
    lookupKey?: string
    name?: string
    publikovany?: boolean
    reportType?: string
}

export interface RelationshipsProblemMessageUi {
    problemType?: string
    relOrientation?: string
    relTypeName?: string
    relationsUuids?: string[]
}

export interface RelationshipsProblemHolderUi {
    lastModification?: string
    relationshipsProblemMessages?: RelationshipsProblemMessageUi[]
}

export interface RelationshipUi {
    attributes?: AttributeUi[]
    endUuid?: string
    metaAttributes?: MetaAttributesUi
    owner?: string
    startUuid?: string
    type?: string
    uuid?: string
}

export interface RelationshipSetUi {
    pagination?: PaginationUi
    relationshipSet?: RelationshipUi[]
}

export interface RelationshipListUi {
    pagination?: PaginationUi
    relationshipList?: RelationshipUi[]
}

export interface RelationshipInvalidateUi {
    attributes?: AttributeUi[]
    endUuid?: string
    invalidateReason?: InvalidateReason
    metaAttributes?: MetaAttributesUi
    owner?: string
    startUuid?: string
    type?: string
    uuid?: string
}

export interface RelationshipElasticPreviewUi {
    endCiName?: string
    endCiType?: string
    endCiUuid?: string
    relState?: string
    relType?: string
    relUuid?: string
    startCiName?: string
    startCiType?: string
    startCiUuid?: string
    usageType?: string
}

export interface RelationshipElasticPreviewHolderUi {
    ciRelCi?: RelationshipElasticPreviewUi[]
    pagination?: PaginationUi
}

export interface RelTypeFilterUi {
    byHierarchy?: boolean
    onlyValidRel?: boolean
    relCiUuids?: string[]
    relType?: string
}

export interface RelFilterUi {
    attributes?: FilterAttributesUi[]
    endCiTypeName?: string[]
    endCiUuid?: string[]
    fullTextSearch?: string
    metaAttributes?: FilterMetaAttributesUi
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    poUuid?: string
    searchFields?: string[]
    startCiTypeName?: string[]
    startCiUuid?: string[]
    startOrEndCiUuid?: string[]
    type?: string[]
    usageType?: string[]
    uuid?: string[]
}

export interface RelListFilterContainerUi {
    getIncidentRelations?: boolean
    page?: number
    perpage?: number
    relFilter?: RelFilterUi
    sortBy?: string
    sortByEndCi?: boolean
    sortSource?: string
    sortType?: string
    usageTypeFilter?: UsageTypeFilterUi
}

export interface RelFilterSmallUi {
    ciTypes?: string[]
    ciUuids?: string[]
    metaAttributes?: FilterMetaAttributesUi
    page?: number
    perpage?: number
    relTypes?: string[]
    sortBy?: string
    sortByEndCi?: boolean
    sortSource?: string
    sortType?: string
    state?: string[]
    text?: string
}

export type RelElasticItemAllOf = {
    PO?: string
    endName?: string
    endType?: string
    endUuid?: string
    highlight?: HighLightResultHolder
    itemType?: string
    startName?: string
    startType?: string
    startUuid?: string
    state?: string
    type?: string
    typeName?: string
    uuid?: string
}

export type RelElasticItem = GeneralElasticItem & RelElasticItemAllOf

export interface RecycleSetUi {
    ciIdSet?: string[]
    relIdSet?: string[]
}

export interface RecycleRelsUi {
    relIdList?: string[]
}

export interface RecycleCisUi {
    ciIdList?: string[]
}

export type QueryUiParams = { [key: string]: any }

export interface QueryUi {
    params?: QueryUiParams
    query?: string
}

export type QueryResultTableUiTypes = { [key: string]: string }

export interface QueryResultTableUi {
    data?: MapStringObject[]
    types?: QueryResultTableUiTypes
}

export interface ProfilePicture {
    height?: number
    isDefault?: boolean
    path?: string
    width?: number
}

export interface PoWithHierarchyUi {
    hierarchy?: RelationshipUi
    po?: ConfigurationItemUi
}

export interface PaginationUi {
    page?: number
    perPage?: number
    totalPages?: number
    totaltems?: number
}

export interface PaginationData {
    page?: number
    perPage?: number
    totalItems?: number
    totalPages?: number
    totalUnreadedItems?: number
}

export type NotificationUpdateHolderUiTypeOfAction =
    (typeof NotificationUpdateHolderUiTypeOfAction)[keyof typeof NotificationUpdateHolderUiTypeOfAction]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationUpdateHolderUiTypeOfAction = {
    READ: 'READ',
    REMOVE: 'REMOVE',
    REMOVE_UNREAD: 'REMOVE_UNREAD',
} as const

export interface NotificationUpdateHolderUi {
    ids?: number[]
    typeOfAction?: NotificationUpdateHolderUiTypeOfAction
    userId?: string
}

export interface Notification {
    createdAt?: string
    deleted?: boolean
    eventType?: string
    id?: number
    message?: string
    messagePerex?: string
    notifType?: string
    readedAt?: string
    sendToUserIdSet?: string[]
    targetUri?: string
    userId?: string
}

export interface NotificationsList {
    notifications?: Notification[]
    pagination?: PaginationData
}

export interface NeighboursResultUi {
    neighbourPairs?: NeighbourPairUi[]
    pagination?: PaginationUi
}

export interface NeighboursFilterUi {
    ciType?: string[]
    excludedCiUuids?: string[]
    excludedRelTypes?: string[]
    filterType?: string
    fullTextSearch?: string
    metaAttributes?: FilterMetaAttributesUi
    relType?: string[]
    searchFields?: string[]
    usageType?: string[]
}

export interface NeighboursFilterContainerUi {
    neighboursFilter?: NeighboursFilterUi
    page?: number
    perpage?: number
    sortBy?: string
    sortSource?: string
    sortType?: string
}

export interface NeighbourSetUi {
    fromNodes?: NeighboursResultUi
    toNodes?: NeighboursResultUi
}

export interface NeighbourPairUi {
    configurationItem?: ConfigurationItemUi
    relationship?: RelationshipUi
}

export interface MissingAttributesHolderUi {
    lastModification?: string
    missingAttributes?: string[]
}

export interface MetaIsCodesListUi {
    metaIsCodes?: string[]
}

export interface MetaAttributesUi {
    createdAt?: string
    createdBy?: string
    lastModifiedAt?: string
    lastModifiedBy?: string
    owner?: string
    state?: string
}

export interface MeetingRequestUi {
    beginDate?: string
    endDate?: string
    id?: number
    name?: string
    state?: string
}

export interface MeetingRequestListUi {
    meetingRequests?: MeetingRequestUi[]
    pagination?: PaginationUi
}

export interface Links {
    edit?: string
    self?: string
    tinyui?: string
    webui?: string
}

export interface Links {
    self?: string
}

export interface Links {
    self?: string
}

export interface ItemSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    invalidateReason?: InvalidateReason
    relationshipSet?: RelationshipUi[]
}

export interface InvalidateSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    invalidateReason?: InvalidateReason
    relationshipSet?: RelationshipUi[]
}

export interface IntegrityCheckObject {
    elasticValue?: number
    neo4jValue?: number
    type?: string
}

export interface IntegrityCheckHolder {
    configurationItems?: IntegrityCheckObject[]
    configurationItemsDifferences?: string[]
    relationships?: IntegrityCheckObject[]
    relationshipsDifferences?: string[]
}

export interface IncidentRelationshipsFilterUi {
    ciUuids?: string[]
    page?: number
    perPage?: number
}

export interface IncidentRelationshipSetUi {
    endRelationshipSet?: RelationshipUi[]
    startRelationshipSet?: RelationshipUi[]
}

export interface HighlightResult {
    field?: string
    highlightText?: string[]
}

export interface HighLightResultHolder {
    attributes?: HighlightResult[]
    metaAttributes?: HighlightResult[]
}

export interface HierarchyRightsUi {
    HIERARCHY_FROM_ROOT?: number
    address?: AddressObjectUi
    path?: string
    poName?: string
    poUUID?: string
    roles?: string[]
}

export interface HierarchyRightsResultUi {
    pagination?: PaginationUi
    rights?: HierarchyRightsUi[]
}

export interface HierarchyPOFilterUi {
    fullTextSearch?: string
    page?: number
    perpage?: number
    poUUID?: string
    rights?: HierarchyRightsUi[]
    sortBy?: string
    sortType?: string
}

export interface GroupUi {
    name?: string
    newComtool?: string
    uuid?: string
}

export interface GroupSetUi {
    groupSet?: GroupUi[]
}

export interface GroupMembersFilterUi {
    asIfInGroup?: string[]
    newComtool?: string
    nodeUsageTypeFilter?: UsageTypeFilterUi
    relTypesEndingInGroup?: string[]
    relTypesStartingInGroup?: string[]
    relationshipUsageTypeFilter?: UsageTypeFilterUi
}

export interface GraphRequestUi {
    changeOwnerSet?: ChangeOwnerSetUi
    customMessage?: CustomMessageUi
    invalidateSet?: InvalidateSetUi
    recycleSet?: RecycleSetUi
    storeSet?: StoreSetUi
}

export interface GidSetUi {
    gids?: string[]
}

export interface GetResponseWrapper {
    isExist?: boolean
    sourceAsString?: string
}

export interface GeneralElasticItem {
    highlight?: HighLightResultHolder
    itemType?: string
    uuid?: string
}

export interface GeneralElasticItemSet {
    generalElasticItemSet?: GeneralElasticItem[]
    pagination?: PaginationUi
}

export type FilterValueUiValue = { [key: string]: any }

export interface FilterValueUi {
    equality?: string
    value?: FilterValueUiValue
}

export interface FilterMetaAttributesUi {
    createdAtFrom?: string
    createdAtTo?: string
    createdBy?: string[]
    lastAction?: string[]
    lastModifiedAtFrom?: string
    lastModifiedAtTo?: string
    lastModifiedBy?: string[]
    liableEntity?: string[]
    liableEntityByHierarchy?: boolean
    owner?: string[]
    state?: string[]
}

export interface FilterAttributesUi {
    filterValue?: FilterValueUi[]
    name?: string
}

export interface Extensions {
    position?: string
}

export interface Expandable {
    ancestors?: string
    body?: string
    children?: string
    container?: string
    descendants?: string
    history?: string
    metadata?: string
    operations?: string
    restrictions?: string
    space?: string
}

export interface Expandable {
    content?: string
}

export interface Expandable {
    status?: string
}

export type ErrorMessageUiItemType = (typeof ErrorMessageUiItemType)[keyof typeof ErrorMessageUiItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiItemType = {
    RELATIONSHIP: 'RELATIONSHIP',
    CONFIGURATION_ITEM: 'CONFIGURATION_ITEM',
} as const

export type ErrorMessageUiErrorType = (typeof ErrorMessageUiErrorType)[keyof typeof ErrorMessageUiErrorType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiErrorType = {
    OWNER: 'OWNER',
    OWNER_CREATE_ROLE: 'OWNER_CREATE_ROLE',
    CREATE_CI: 'CREATE_CI',
    UPDATE_CI: 'UPDATE_CI',
    CREATE_REL: 'CREATE_REL',
    UPDATE_REL: 'UPDATE_REL',
    UPDATE_INVALIDATE_CI: 'UPDATE_INVALIDATE_CI',
    CHANGE_ATTRIBUTE: 'CHANGE_ATTRIBUTE',
    LIMIT: 'LIMIT',
    ENUM: 'ENUM',
    EXPRESION: 'EXPRESION',
    ATTRIBUTE: 'ATTRIBUTE',
    MANDATORY: 'MANDATORY',
    REGEX: 'REGEX',
    NUMBER_FORMAT: 'NUMBER_FORMAT',
    MAX_STRING_SIZE: 'MAX_STRING_SIZE',
    INVALID_TYPE: 'INVALID_TYPE',
    GROUP_RIGHT: 'GROUP_RIGHT',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    PROCESSING_ERROR: 'PROCESSING_ERROR',
} as const

export interface ErrorMessageUi {
    attributeName?: string
    errorDetail?: ErrorDetailUi
    errorType?: ErrorMessageUiErrorType
    itemId?: string
    itemType?: ErrorMessageUiItemType
}

export interface ErrorMessageHolderUi {
    messages?: ErrorMessageUi[]
}

export interface ErrorDetailUi {
    description?: string
    enumConstrain?: string
    invalidType?: string
    itemTechnicalTypeName?: string
    maxConstrain?: number
    maxStringSize?: number
    minConstrain?: number
    notAllowedExpression?: string
    notAuthorizedGid?: string
    notAuthorizedRole?: string
    notExistAttribute?: string
    notFilledAttribute?: string
    notNumber?: string
    regex?: string
}

export type DMSDocElasticItemAllOf = {
    contentLength?: number
    fileName?: string
    highlight?: HighLightResultHolder
    itemType?: string
    type?: string
    uuid?: string
}

export type DMSDocElasticItem = GeneralElasticItem & DMSDocElasticItemAllOf

export interface CustomMessageUi {
    failPlaceholderValues?: string[]
    messageFailType?: string
    messageSuccessType?: string
    successPlaceholderValues?: string[]
}

export interface CountTypes {
    count?: number
    type?: string
}

export type ConfigurationItemUiAttributes = { [key: string]: any }

export interface ConfigurationItemUi {
    attributes?: ConfigurationItemUiAttributes
    metaAttributes?: MetaAttributesUi
    owner?: string
    type?: string
    uuid?: string
}

export interface ConfigurationItemsListUi {
    configurationItemSet?: ConfigurationItemUi[]
}

export interface ConfigurationItemSetUi {
    configurationItemSet?: ConfigurationItemUi[]
    incidentRelationshipSet?: RelationshipUi[]
    pagination?: PaginationUi
}

export interface ConfigurationItemNeighbourSetUi {
    fromCiSet?: ConfigurationItemUi[]
    toCiSet?: ConfigurationItemUi[]
}

export interface ConfigurationItemInvalidateUi {
    attributes?: AttributeUi[]
    invalidateReason?: InvalidateReason
    metaAttributes?: MetaAttributesUi
    owner?: string
    type?: string
    uuid?: string
}

export interface CiWithRelsUi {
    ci?: ConfigurationItemUi
    rels?: RelationshipUi[]
}

export interface CiWithRelsResultUi {
    ciWithRels?: CiWithRelsUi[]
    pagination?: PaginationUi
}

export interface CiUuidSetUi {
    ciUuids?: string[]
    pagination?: PaginationUi
}

export interface CiRelationshipCiPreviewHolderListUi {
    ciRelCiList?: CiRelationshipCiPreviewHolderUi[]
    pagination?: PaginationUi
}

export interface CiProblemMessageUi {
    ciUuid?: string
    missingAttributesHolder?: MissingAttributesHolderUi
    relationshipsProblemHolder?: RelationshipsProblemHolderUi
}

export interface CiProblemMessageHolderUi {
    ciProblemMessages?: CiProblemMessageUi[]
    ciTypeName?: string
}

export interface CiProblemMessageHolderListUi {
    ciProblemMessageHolders?: CiProblemMessageHolderUi[]
}

export interface CiPreviewUi {
    genName?: string
    metaIsCode?: string
    uuid?: string
}

export interface CiRelationshipCiPreviewHolderUi {
    ciEnd?: CiPreviewUi
    ciStart?: CiPreviewUi
    rel?: RelationshipUi
}

export interface CiHistoryVersionsIncidentRelationshipsUi {
    historyVersions?: HistoryVersionUiRelationshipUi[]
    incidentCis?: HistoryVersionUiConfigurationItemUi[]
    pagination?: PaginationUi
}

export interface CiFilterUi {
    attributes?: FilterAttributesUi[]
    fullTextSearch?: string
    metaAttributes?: FilterMetaAttributesUi
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    poUuid?: string
    relTypeFilters?: RelTypeFilterUi[]
    searchFields?: string[]
    type?: string[]
    usageType?: string[]
    uuid?: string[]
}

export interface CiListFilterContainerUi {
    filter?: CiFilterUi
    getIncidentRelations?: boolean
    page?: number
    perpage?: number
    relFilter?: RelFilterUi
    sortBy?: string
    sortByEndCi?: boolean
    sortSource?: string
    sortType?: string
    usageTypeFilter?: UsageTypeFilterUi
}

export type CiElasticItemAllOf = {
    PO?: string
    code?: string
    highlight?: HighLightResultHolder
    itemType?: string
    name?: string
    state?: string
    type?: string
    typeName?: string
    uuid?: string
}

export type CiElasticItem = GeneralElasticItem & CiElasticItemAllOf

export type ChangeOwnerDataUiChangeType = (typeof ChangeOwnerDataUiChangeType)[keyof typeof ChangeOwnerDataUiChangeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeOwnerDataUiChangeType = {
    changeCmdbItemAndRelatedCmdbItems: 'changeCmdbItemAndRelatedCmdbItems',
    changeCmdbItemAndRelatedCmdbItemsWithSameOwner: 'changeCmdbItemAndRelatedCmdbItemsWithSameOwner',
    changeCmdbItem: 'changeCmdbItem',
} as const

export interface ChangeOwnerDataUi {
    changeDescription?: string
    changeReason?: string
    changeType?: ChangeOwnerDataUiChangeType
    newOwner?: string
}

export interface ChangeOwnerSetUi {
    changeOwnerData?: ChangeOwnerDataUi
    configurationItemSet?: ConfigurationItemUi[]
    invalidateReason?: InvalidateReason
    relationshipSet?: RelationshipUi[]
}

export interface ChangeHierarchyUi {
    newHierarchy?: RelationshipUi
    oldHierarchy?: RelationshipUi
}

export interface By {
    _expandable?: Expandable
    _links?: Links
    displayName?: string
    profilePicture?: ProfilePicture
    type?: string
    userKey?: string
    username?: string
}

export type AttributeUiValue = { [key: string]: any }

export interface AttributeUi {
    name?: string
    value?: AttributeUiValue
}

export interface AddressObjectUi {
    number?: string
    street?: string
    village?: string
    zipCode?: string
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary addCiToGroup
 */
export const useAddCiToGroupUsingPOSTHook = () => {
    const addCiToGroupUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (uuid: string, addCiToGroupUsingPOSTBody: string[], params?: AddCiToGroupUsingPOSTParams) => {
        return addCiToGroupUsingPOST({
            url: `/addmembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: addCiToGroupUsingPOSTBody,
            params,
        })
    }
}

export const useAddCiToGroupUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddCiToGroupUsingPOSTHook>>>,
        TError,
        { uuid: string; data: string[]; params?: AddCiToGroupUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAddCiToGroupUsingPOSTHook>>>,
    TError,
    { uuid: string; data: string[]; params?: AddCiToGroupUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const addCiToGroupUsingPOST = useAddCiToGroupUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useAddCiToGroupUsingPOSTHook>>>,
        { uuid: string; data: string[]; params?: AddCiToGroupUsingPOSTParams }
    > = (props) => {
        const { uuid, data, params } = props ?? {}

        return addCiToGroupUsingPOST(uuid, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type AddCiToGroupUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useAddCiToGroupUsingPOSTHook>>>>
export type AddCiToGroupUsingPOSTMutationBody = string[]
export type AddCiToGroupUsingPOSTMutationError = unknown

/**
 * @summary addCiToGroup
 */
export const useAddCiToGroupUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useAddCiToGroupUsingPOSTHook>>>,
        TError,
        { uuid: string; data: string[]; params?: AddCiToGroupUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useAddCiToGroupUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearCacheAll
 */
export const useClearCacheAllUsingDELETEHook = () => {
    const clearCacheAllUsingDELETE = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearCacheAllUsingDELETE({ url: `/cache`, method: 'delete' })
    }
}

export const useClearCacheAllUsingDELETEMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheAllUsingDELETEHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheAllUsingDELETEHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCacheAllUsingDELETE = useClearCacheAllUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCacheAllUsingDELETEHook>>>, TVariables> = () => {
        return clearCacheAllUsingDELETE()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCacheAllUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCacheAllUsingDELETEHook>>>>

export type ClearCacheAllUsingDELETEMutationError = unknown

/**
 * @summary clearCacheAll
 */
export const useClearCacheAllUsingDELETE = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheAllUsingDELETEHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCacheAllUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearCmdbReadRoleParticipantCache
 */
export const useClearCmdbReadRoleParticipantCacheUsingDELETEHook = () => {
    const clearCmdbReadRoleParticipantCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearCmdbReadRoleParticipantCacheUsingDELETE({ url: `/cache/cmdb/readRoleParticipant`, method: 'delete' })
    }
}

export const useClearCmdbReadRoleParticipantCacheUsingDELETEMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheUsingDELETEHook>>>,
        TError,
        TVariables,
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheUsingDELETEHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCmdbReadRoleParticipantCacheUsingDELETE = useClearCmdbReadRoleParticipantCacheUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheUsingDELETEHook>>>,
        TVariables
    > = () => {
        return clearCmdbReadRoleParticipantCacheUsingDELETE()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCmdbReadRoleParticipantCacheUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheUsingDELETEHook>>>
>

export type ClearCmdbReadRoleParticipantCacheUsingDELETEMutationError = unknown

/**
 * @summary clearCmdbReadRoleParticipantCache
 */
export const useClearCmdbReadRoleParticipantCacheUsingDELETE = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useClearCmdbReadRoleParticipantCacheUsingDELETEHook>>>,
        TError,
        TVariables,
        TContext
    >
}) => {
    const mutationOptions = useClearCmdbReadRoleParticipantCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearIdentityCache
 */
export const useClearIdentityCacheUsingDELETEHook = () => {
    const clearIdentityCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearIdentityCacheUsingDELETE({ url: `/cache/identity`, method: 'delete' })
    }
}

export const useClearIdentityCacheUsingDELETEMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheUsingDELETEHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearIdentityCacheUsingDELETE = useClearIdentityCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheUsingDELETEHook>>>, TVariables> = () => {
        return clearIdentityCacheUsingDELETE()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearIdentityCacheUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheUsingDELETEHook>>>>

export type ClearIdentityCacheUsingDELETEMutationError = unknown

/**
 * @summary clearIdentityCache
 */
export const useClearIdentityCacheUsingDELETE = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearIdentityCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearIdentityCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearOrganizationCache
 */
export const useClearOrganizationCacheUsingDELETEHook = () => {
    const clearOrganizationCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearOrganizationCacheUsingDELETE({ url: `/cache/organization`, method: 'delete' })
    }
}

export const useClearOrganizationCacheUsingDELETEMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheUsingDELETEHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearOrganizationCacheUsingDELETE = useClearOrganizationCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheUsingDELETEHook>>>, TVariables> = () => {
        return clearOrganizationCacheUsingDELETE()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearOrganizationCacheUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheUsingDELETEHook>>>
>

export type ClearOrganizationCacheUsingDELETEMutationError = unknown

/**
 * @summary clearOrganizationCache
 */
export const useClearOrganizationCacheUsingDELETE = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearOrganizationCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearOrganizationCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearRoleCache
 */
export const useClearRoleCacheUsingDELETEHook = () => {
    const clearRoleCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearRoleCacheUsingDELETE({ url: `/cache/role`, method: 'delete' })
    }
}

export const useClearRoleCacheUsingDELETEMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheUsingDELETEHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearRoleCacheUsingDELETE = useClearRoleCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheUsingDELETEHook>>>, TVariables> = () => {
        return clearRoleCacheUsingDELETE()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearRoleCacheUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheUsingDELETEHook>>>>

export type ClearRoleCacheUsingDELETEMutationError = unknown

/**
 * @summary clearRoleCache
 */
export const useClearRoleCacheUsingDELETE = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRoleCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearRoleCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearCache
 */
export const useClearCacheUsingDELETEHook = () => {
    const clearCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearCacheUsingDELETE({ url: `/cache/schema`, method: 'delete' })
    }
}

export const useClearCacheUsingDELETEMutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheUsingDELETEHook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCacheUsingDELETE = useClearCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCacheUsingDELETEHook>>>, TVariables> = () => {
        return clearCacheUsingDELETE()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCacheUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCacheUsingDELETEHook>>>>

export type ClearCacheUsingDELETEMutationError = unknown

/**
 * @summary clearCache
 */
export const useClearCacheUsingDELETE = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCacheUsingDELETEHook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearCiCache
 */
export const useClearCiCacheUsingDELETE1Hook = () => {
    const clearCiCacheUsingDELETE1 = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearCiCacheUsingDELETE1({ url: `/cache/schema/ci`, method: 'delete' })
    }
}

export const useClearCiCacheUsingDELETE1MutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETE1Hook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETE1Hook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCiCacheUsingDELETE1 = useClearCiCacheUsingDELETE1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETE1Hook>>>, TVariables> = () => {
        return clearCiCacheUsingDELETE1()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCiCacheUsingDELETE1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETE1Hook>>>>

export type ClearCiCacheUsingDELETE1MutationError = unknown

/**
 * @summary clearCiCache
 */
export const useClearCiCacheUsingDELETE1 = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETE1Hook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearCiCacheUsingDELETE1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearCiCache
 */
export const useClearCiCacheUsingDELETEHook = () => {
    const clearCiCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return (ciType: string) => {
        return clearCiCacheUsingDELETE({ url: `/cache/schema/ci/${ciType}`, method: 'delete' })
    }
}

export const useClearCiCacheUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETEHook>>>, TError, { ciType: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETEHook>>>, TError, { ciType: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearCiCacheUsingDELETE = useClearCiCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETEHook>>>, { ciType: string }> = (props) => {
        const { ciType } = props ?? {}

        return clearCiCacheUsingDELETE(ciType)
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearCiCacheUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETEHook>>>>

export type ClearCiCacheUsingDELETEMutationError = unknown

/**
 * @summary clearCiCache
 */
export const useClearCiCacheUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearCiCacheUsingDELETEHook>>>, TError, { ciType: string }, TContext>
}) => {
    const mutationOptions = useClearCiCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearEnumCache
 */
export const useClearEnumCacheUsingDELETE1Hook = () => {
    const clearEnumCacheUsingDELETE1 = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearEnumCacheUsingDELETE1({ url: `/cache/schema/enum`, method: 'delete' })
    }
}

export const useClearEnumCacheUsingDELETE1MutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETE1Hook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETE1Hook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearEnumCacheUsingDELETE1 = useClearEnumCacheUsingDELETE1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETE1Hook>>>, TVariables> = () => {
        return clearEnumCacheUsingDELETE1()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearEnumCacheUsingDELETE1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETE1Hook>>>>

export type ClearEnumCacheUsingDELETE1MutationError = unknown

/**
 * @summary clearEnumCache
 */
export const useClearEnumCacheUsingDELETE1 = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETE1Hook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearEnumCacheUsingDELETE1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearEnumCache
 */
export const useClearEnumCacheUsingDELETEHook = () => {
    const clearEnumCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return (enumType: string) => {
        return clearEnumCacheUsingDELETE({ url: `/cache/schema/enum/${enumType}`, method: 'delete' })
    }
}

export const useClearEnumCacheUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETEHook>>>, TError, { enumType: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETEHook>>>, TError, { enumType: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearEnumCacheUsingDELETE = useClearEnumCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETEHook>>>, { enumType: string }> = (props) => {
        const { enumType } = props ?? {}

        return clearEnumCacheUsingDELETE(enumType)
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearEnumCacheUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETEHook>>>>

export type ClearEnumCacheUsingDELETEMutationError = unknown

/**
 * @summary clearEnumCache
 */
export const useClearEnumCacheUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearEnumCacheUsingDELETEHook>>>, TError, { enumType: string }, TContext>
}) => {
    const mutationOptions = useClearEnumCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearRelCache
 */
export const useClearRelCacheUsingDELETE1Hook = () => {
    const clearRelCacheUsingDELETE1 = useCmdbSwaggerClient<string | void>()

    return () => {
        return clearRelCacheUsingDELETE1({ url: `/cache/schema/rel`, method: 'delete' })
    }
}

export const useClearRelCacheUsingDELETE1MutationOptions = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETE1Hook>>>, TError, TVariables, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETE1Hook>>>, TError, TVariables, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearRelCacheUsingDELETE1 = useClearRelCacheUsingDELETE1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETE1Hook>>>, TVariables> = () => {
        return clearRelCacheUsingDELETE1()
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearRelCacheUsingDELETE1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETE1Hook>>>>

export type ClearRelCacheUsingDELETE1MutationError = unknown

/**
 * @summary clearRelCache
 */
export const useClearRelCacheUsingDELETE1 = <TError = unknown, TVariables = void, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETE1Hook>>>, TError, TVariables, TContext>
}) => {
    const mutationOptions = useClearRelCacheUsingDELETE1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary clearRelCache
 */
export const useClearRelCacheUsingDELETEHook = () => {
    const clearRelCacheUsingDELETE = useCmdbSwaggerClient<string | void>()

    return (relType: string) => {
        return clearRelCacheUsingDELETE({ url: `/cache/schema/rel/${relType}`, method: 'delete' })
    }
}

export const useClearRelCacheUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETEHook>>>, TError, { relType: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETEHook>>>, TError, { relType: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const clearRelCacheUsingDELETE = useClearRelCacheUsingDELETEHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETEHook>>>, { relType: string }> = (props) => {
        const { relType } = props ?? {}

        return clearRelCacheUsingDELETE(relType)
    }

    return { mutationFn, ...mutationOptions }
}

export type ClearRelCacheUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETEHook>>>>

export type ClearRelCacheUsingDELETEMutationError = unknown

/**
 * @summary clearRelCache
 */
export const useClearRelCacheUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useClearRelCacheUsingDELETEHook>>>, TError, { relType: string }, TContext>
}) => {
    const mutationOptions = useClearRelCacheUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary changePoHierarchy
 */
export const useChangePoHierarchyUsingPOSTHook = () => {
    const changePoHierarchyUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (oldRelId: string, newRelId: string, changeHierarchyUi: ChangeHierarchyUi, params?: ChangePoHierarchyUsingPOSTParams) => {
        return changePoHierarchyUsingPOST({
            url: `/changeHierarchy/${oldRelId}/${newRelId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: changeHierarchyUi,
            params,
        })
    }
}

export const useChangePoHierarchyUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyUsingPOSTHook>>>,
        TError,
        { oldRelId: string; newRelId: string; data: ChangeHierarchyUi; params?: ChangePoHierarchyUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyUsingPOSTHook>>>,
    TError,
    { oldRelId: string; newRelId: string; data: ChangeHierarchyUi; params?: ChangePoHierarchyUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changePoHierarchyUsingPOST = useChangePoHierarchyUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyUsingPOSTHook>>>,
        { oldRelId: string; newRelId: string; data: ChangeHierarchyUi; params?: ChangePoHierarchyUsingPOSTParams }
    > = (props) => {
        const { oldRelId, newRelId, data, params } = props ?? {}

        return changePoHierarchyUsingPOST(oldRelId, newRelId, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangePoHierarchyUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyUsingPOSTHook>>>>
export type ChangePoHierarchyUsingPOSTMutationBody = ChangeHierarchyUi
export type ChangePoHierarchyUsingPOSTMutationError = unknown

/**
 * @summary changePoHierarchy
 */
export const useChangePoHierarchyUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangePoHierarchyUsingPOSTHook>>>,
        TError,
        { oldRelId: string; newRelId: string; data: ChangeHierarchyUi; params?: ChangePoHierarchyUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useChangePoHierarchyUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary changeOwnerSet
 */
export const useChangeOwnerSetUsingPOSTHook = () => {
    const changeOwnerSetUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (changeOwnerSetUi: ChangeOwnerSetUi, params?: ChangeOwnerSetUsingPOSTParams) => {
        return changeOwnerSetUsingPOST({
            url: `/changeOwner/list`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: changeOwnerSetUi,
            params,
        })
    }
}

export const useChangeOwnerSetUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetUsingPOSTHook>>>,
        TError,
        { data: ChangeOwnerSetUi; params?: ChangeOwnerSetUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetUsingPOSTHook>>>,
    TError,
    { data: ChangeOwnerSetUi; params?: ChangeOwnerSetUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const changeOwnerSetUsingPOST = useChangeOwnerSetUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetUsingPOSTHook>>>,
        { data: ChangeOwnerSetUi; params?: ChangeOwnerSetUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return changeOwnerSetUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ChangeOwnerSetUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetUsingPOSTHook>>>>
export type ChangeOwnerSetUsingPOSTMutationBody = ChangeOwnerSetUi
export type ChangeOwnerSetUsingPOSTMutationError = unknown

/**
 * @summary changeOwnerSet
 */
export const useChangeOwnerSetUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useChangeOwnerSetUsingPOSTHook>>>,
        TError,
        { data: ChangeOwnerSetUi; params?: ChangeOwnerSetUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useChangeOwnerSetUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteRelationship
 */
export const useDeleteRelationshipUsingPOSTHook = () => {
    const deleteRelationshipUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (relationshipInvalidateUiBody: RelationshipInvalidateUiBody, params?: DeleteRelationshipUsingPOSTParams) => {
        return deleteRelationshipUsingPOST({
            url: `/delete/relation`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipInvalidateUiBody,
            params,
        })
    }
}

export const useDeleteRelationshipUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipUsingPOSTHook>>>,
        TError,
        { data: RelationshipInvalidateUiBody; params?: DeleteRelationshipUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipUsingPOSTHook>>>,
    TError,
    { data: RelationshipInvalidateUiBody; params?: DeleteRelationshipUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteRelationshipUsingPOST = useDeleteRelationshipUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipUsingPOSTHook>>>,
        { data: RelationshipInvalidateUiBody; params?: DeleteRelationshipUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return deleteRelationshipUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteRelationshipUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipUsingPOSTHook>>>>
export type DeleteRelationshipUsingPOSTMutationBody = RelationshipInvalidateUiBody
export type DeleteRelationshipUsingPOSTMutationError = unknown

/**
 * @summary deleteRelationship
 */
export const useDeleteRelationshipUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteRelationshipUsingPOSTHook>>>,
        TError,
        { data: RelationshipInvalidateUiBody; params?: DeleteRelationshipUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteRelationshipUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary liveness
 */
export const useLivenessUsingGETHook = () => {
    const livenessUsingGET = useCmdbSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return livenessUsingGET({ url: `/endpoints/health/liveness`, method: 'get', signal })
    }
}

export const getLivenessUsingGETQueryKey = () => [`/endpoints/health/liveness`] as const

export const useLivenessUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getLivenessUsingGETQueryKey()

    const livenessUsingGET = useLivenessUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>> = ({ signal }) => livenessUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type LivenessUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>>
export type LivenessUsingGETQueryError = unknown

/**
 * @summary liveness
 */
export const useLivenessUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useLivenessUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useLivenessUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readiness
 */
export const useReadinessUsingGETHook = () => {
    const readinessUsingGET = useCmdbSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return readinessUsingGET({ url: `/endpoints/health/readiness`, method: 'get', signal })
    }
}

export const getReadinessUsingGETQueryKey = () => [`/endpoints/health/readiness`] as const

export const useReadinessUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>,
    TError = unknown,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadinessUsingGETQueryKey()

    const readinessUsingGET = useReadinessUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>> = ({ signal }) => readinessUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadinessUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>>
export type ReadinessUsingGETQueryError = unknown

/**
 * @summary readiness
 */
export const useReadinessUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadinessUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadinessUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary reportError
 */
export const useReportErrorUsingPOSTHook = () => {
    const reportErrorUsingPOST = useCmdbSwaggerClient<RequestId | void>()

    return (userFeedbackErrorReportUi: UserFeedbackErrorReportUi, params?: ReportErrorUsingPOSTParams) => {
        return reportErrorUsingPOST({
            url: `/feedback/error`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: userFeedbackErrorReportUi,
            params,
        })
    }
}

export const useReportErrorUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReportErrorUsingPOSTHook>>>,
        TError,
        { data: UserFeedbackErrorReportUi; params?: ReportErrorUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReportErrorUsingPOSTHook>>>,
    TError,
    { data: UserFeedbackErrorReportUi; params?: ReportErrorUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const reportErrorUsingPOST = useReportErrorUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReportErrorUsingPOSTHook>>>,
        { data: UserFeedbackErrorReportUi; params?: ReportErrorUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return reportErrorUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReportErrorUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReportErrorUsingPOSTHook>>>>
export type ReportErrorUsingPOSTMutationBody = UserFeedbackErrorReportUi
export type ReportErrorUsingPOSTMutationError = unknown

/**
 * @summary reportError
 */
export const useReportErrorUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReportErrorUsingPOSTHook>>>,
        TError,
        { data: UserFeedbackErrorReportUi; params?: ReportErrorUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReportErrorUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getUuid
 */
export const useGetUuidUsingGETHook = () => {
    const getUuidUsingGET = useCmdbSwaggerClient<string>()

    return (params?: GetUuidUsingGETParams, signal?: AbortSignal) => {
        return getUuidUsingGET({ url: `/generate/uuid`, method: 'get', params, signal })
    }
}

export const getGetUuidUsingGETQueryKey = (params?: GetUuidUsingGETParams) => [`/generate/uuid`, ...(params ? [params] : [])] as const

export const useGetUuidUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>, TError = void>(
    params?: GetUuidUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetUuidUsingGETQueryKey(params)

    const getUuidUsingGET = useGetUuidUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>> = ({ signal }) => getUuidUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetUuidUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>>
export type GetUuidUsingGETQueryError = void

/**
 * @summary getUuid
 */
export const useGetUuidUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>, TError = void>(
    params?: GetUuidUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetUuidUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetUuidUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getGroupList
 */
export const useGetGroupListUsingGETHook = () => {
    const getGroupListUsingGET = useCmdbSwaggerClient<GroupSetUi>()

    return (params?: GetGroupListUsingGETParams, signal?: AbortSignal) => {
        return getGroupListUsingGET({ url: `/grouplist`, method: 'get', params, signal })
    }
}

export const getGetGroupListUsingGETQueryKey = (params?: GetGroupListUsingGETParams) => [`/grouplist`, ...(params ? [params] : [])] as const

export const useGetGroupListUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>, TError = void>(
    params?: GetGroupListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetGroupListUsingGETQueryKey(params)

    const getGroupListUsingGET = useGetGroupListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>> = ({ signal }) =>
        getGroupListUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetGroupListUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>>
export type GetGroupListUsingGETQueryError = void

/**
 * @summary getGroupList
 */
export const useGetGroupListUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>, TError = void>(
    params?: GetGroupListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetGroupListUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetGroupListUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getConfigurationItemsGroups
 */
export const useGetConfigurationItemsGroupsUsingGETHook = () => {
    const getConfigurationItemsGroupsUsingGET = useCmdbSwaggerClient<GroupSetUi>()

    return (uuid: string, params?: GetConfigurationItemsGroupsUsingGETParams, signal?: AbortSignal) => {
        return getConfigurationItemsGroupsUsingGET({ url: `/grouplist/ci/${uuid}`, method: 'get', params, signal })
    }
}

export const getGetConfigurationItemsGroupsUsingGETQueryKey = (uuid: string, params?: GetConfigurationItemsGroupsUsingGETParams) =>
    [`/grouplist/ci/${uuid}`, ...(params ? [params] : [])] as const

export const useGetConfigurationItemsGroupsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: GetConfigurationItemsGroupsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetConfigurationItemsGroupsUsingGETQueryKey(uuid, params)

    const getConfigurationItemsGroupsUsingGET = useGetConfigurationItemsGroupsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>> = ({ signal }) =>
        getConfigurationItemsGroupsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type GetConfigurationItemsGroupsUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>
>
export type GetConfigurationItemsGroupsUsingGETQueryError = void

/**
 * @summary getConfigurationItemsGroups
 */
export const useGetConfigurationItemsGroupsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: GetConfigurationItemsGroupsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetConfigurationItemsGroupsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetConfigurationItemsGroupsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary storePoHierarchyRel
 */
export const useStorePoHierarchyRelUsingPOSTHook = () => {
    const storePoHierarchyRelUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (relId: string, relationshipUiBody: RelationshipUiBody, params?: StorePoHierarchyRelUsingPOSTParams) => {
        return storePoHierarchyRelUsingPOST({
            url: `/hierarchy/${relId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipUiBody,
            params,
        })
    }
}

export const useStorePoHierarchyRelUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelUsingPOSTHook>>>,
        TError,
        { relId: string; data: RelationshipUiBody; params?: StorePoHierarchyRelUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelUsingPOSTHook>>>,
    TError,
    { relId: string; data: RelationshipUiBody; params?: StorePoHierarchyRelUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storePoHierarchyRelUsingPOST = useStorePoHierarchyRelUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelUsingPOSTHook>>>,
        { relId: string; data: RelationshipUiBody; params?: StorePoHierarchyRelUsingPOSTParams }
    > = (props) => {
        const { relId, data, params } = props ?? {}

        return storePoHierarchyRelUsingPOST(relId, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorePoHierarchyRelUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelUsingPOSTHook>>>>
export type StorePoHierarchyRelUsingPOSTMutationBody = RelationshipUiBody
export type StorePoHierarchyRelUsingPOSTMutationError = unknown

/**
 * @summary storePoHierarchyRel
 */
export const useStorePoHierarchyRelUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoHierarchyRelUsingPOSTHook>>>,
        TError,
        { relId: string; data: RelationshipUiBody; params?: StorePoHierarchyRelUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStorePoHierarchyRelUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readAllCiHistoryVersions
 */
export const useReadAllCiHistoryVersionsUsingGETHook = () => {
    const readAllCiHistoryVersionsUsingGET = useCmdbSwaggerClient<HistoryVersionsListUiConfigurationItemUi>()

    return (params: ReadAllCiHistoryVersionsUsingGETParams, signal?: AbortSignal) => {
        return readAllCiHistoryVersionsUsingGET({ url: `/history/read/ci/list`, method: 'get', params, signal })
    }
}

export const getReadAllCiHistoryVersionsUsingGETQueryKey = (params: ReadAllCiHistoryVersionsUsingGETParams) =>
    [`/history/read/ci/list`, ...(params ? [params] : [])] as const

export const useReadAllCiHistoryVersionsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>,
    TError = void,
>(
    params: ReadAllCiHistoryVersionsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadAllCiHistoryVersionsUsingGETQueryKey(params)

    const readAllCiHistoryVersionsUsingGET = useReadAllCiHistoryVersionsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>> = ({ signal }) =>
        readAllCiHistoryVersionsUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadAllCiHistoryVersionsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>>
export type ReadAllCiHistoryVersionsUsingGETQueryError = void

/**
 * @summary readAllCiHistoryVersions
 */
export const useReadAllCiHistoryVersionsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>,
    TError = void,
>(
    params: ReadAllCiHistoryVersionsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadAllCiHistoryVersionsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadAllCiHistoryVersionsUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiHistoryVersion
 */
export const useReadCiHistoryVersionUsingGETHook = () => {
    const readCiHistoryVersionUsingGET = useCmdbSwaggerClient<HistoryVersionUiConfigurationItemUi>()

    return (uuid: string, params?: ReadCiHistoryVersionUsingGETParams, signal?: AbortSignal) => {
        return readCiHistoryVersionUsingGET({ url: `/history/read/ci/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionUsingGETQueryKey = (uuid: string, params?: ReadCiHistoryVersionUsingGETParams) =>
    [`/history/read/ci/${uuid}`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiHistoryVersionUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionUsingGETQueryKey(uuid, params)

    const readCiHistoryVersionUsingGET = useReadCiHistoryVersionUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>> = ({ signal }) =>
        readCiHistoryVersionUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>>
export type ReadCiHistoryVersionUsingGETQueryError = void

/**
 * @summary readCiHistoryVersion
 */
export const useReadCiHistoryVersionUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: ReadCiHistoryVersionUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiHistoryVersions
 */
export const useReadCiHistoryVersionsUsingGETHook = () => {
    const readCiHistoryVersionsUsingGET = useCmdbSwaggerClient<HistoryVersionsListUiConfigurationItemUi>()

    return (uuid: string, params: ReadCiHistoryVersionsUsingGETParams, signal?: AbortSignal) => {
        return readCiHistoryVersionsUsingGET({ url: `/history/read/ci/${uuid}/list`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionsUsingGETQueryKey = (uuid: string, params: ReadCiHistoryVersionsUsingGETParams) =>
    [`/history/read/ci/${uuid}/list`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params: ReadCiHistoryVersionsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionsUsingGETQueryKey(uuid, params)

    const readCiHistoryVersionsUsingGET = useReadCiHistoryVersionsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>> = ({ signal }) =>
        readCiHistoryVersionsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>>
export type ReadCiHistoryVersionsUsingGETQueryError = void

/**
 * @summary readCiHistoryVersions
 */
export const useReadCiHistoryVersionsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>, TError = void>(
    uuid: string,
    params: ReadCiHistoryVersionsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiHistoryVersionsActionsList
 */
export const useReadCiHistoryVersionsActionsListUsingGETHook = () => {
    const readCiHistoryVersionsActionsListUsingGET = useCmdbSwaggerClient<string[]>()

    return (uuid: string, params?: ReadCiHistoryVersionsActionsListUsingGETParams, signal?: AbortSignal) => {
        return readCiHistoryVersionsActionsListUsingGET({ url: `/history/read/ci/${uuid}/list/actions`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionsActionsListUsingGETQueryKey = (uuid: string, params?: ReadCiHistoryVersionsActionsListUsingGETParams) =>
    [`/history/read/ci/${uuid}/list/actions`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionsActionsListUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiHistoryVersionsActionsListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionsActionsListUsingGETQueryKey(uuid, params)

    const readCiHistoryVersionsActionsListUsingGET = useReadCiHistoryVersionsActionsListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>> = ({ signal }) =>
        readCiHistoryVersionsActionsListUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionsActionsListUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>
>
export type ReadCiHistoryVersionsActionsListUsingGETQueryError = void

/**
 * @summary readCiHistoryVersionsActionsList
 */
export const useReadCiHistoryVersionsActionsListUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiHistoryVersionsActionsListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsActionsListUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionsActionsListUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiHistoryModifiedByList
 */
export const useReadCiHistoryModifiedByListUsingGETHook = () => {
    const readCiHistoryModifiedByListUsingGET = useCmdbSwaggerClient<string[]>()

    return (uuid: string, params?: ReadCiHistoryModifiedByListUsingGETParams, signal?: AbortSignal) => {
        return readCiHistoryModifiedByListUsingGET({ url: `/history/read/ci/${uuid}/list/modifiedBy`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryModifiedByListUsingGETQueryKey = (uuid: string, params?: ReadCiHistoryModifiedByListUsingGETParams) =>
    [`/history/read/ci/${uuid}/list/modifiedBy`, ...(params ? [params] : [])] as const

export const useReadCiHistoryModifiedByListUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiHistoryModifiedByListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryModifiedByListUsingGETQueryKey(uuid, params)

    const readCiHistoryModifiedByListUsingGET = useReadCiHistoryModifiedByListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>> = ({ signal }) =>
        readCiHistoryModifiedByListUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryModifiedByListUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>
>
export type ReadCiHistoryModifiedByListUsingGETQueryError = void

/**
 * @summary readCiHistoryModifiedByList
 */
export const useReadCiHistoryModifiedByListUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiHistoryModifiedByListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryModifiedByListUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryModifiedByListUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiHistoryVersionsIncidentRels
 */
export const useReadCiHistoryVersionsIncidentRelsUsingGETHook = () => {
    const readCiHistoryVersionsIncidentRelsUsingGET = useCmdbSwaggerClient<CiHistoryVersionsIncidentRelationshipsUi>()

    return (uuid: string, params: ReadCiHistoryVersionsIncidentRelsUsingGETParams, signal?: AbortSignal) => {
        return readCiHistoryVersionsIncidentRelsUsingGET({ url: `/history/read/ci/${uuid}/rels`, method: 'get', params, signal })
    }
}

export const getReadCiHistoryVersionsIncidentRelsUsingGETQueryKey = (uuid: string, params: ReadCiHistoryVersionsIncidentRelsUsingGETParams) =>
    [`/history/read/ci/${uuid}/rels`, ...(params ? [params] : [])] as const

export const useReadCiHistoryVersionsIncidentRelsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params: ReadCiHistoryVersionsIncidentRelsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiHistoryVersionsIncidentRelsUsingGETQueryKey(uuid, params)

    const readCiHistoryVersionsIncidentRelsUsingGET = useReadCiHistoryVersionsIncidentRelsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>> = ({ signal }) =>
        readCiHistoryVersionsIncidentRelsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiHistoryVersionsIncidentRelsUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>
>
export type ReadCiHistoryVersionsIncidentRelsUsingGETQueryError = void

/**
 * @summary readCiHistoryVersionsIncidentRels
 */
export const useReadCiHistoryVersionsIncidentRelsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params: ReadCiHistoryVersionsIncidentRelsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiHistoryVersionsIncidentRelsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiHistoryVersionsIncidentRelsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary gdprHistory
 */
export const useGdprHistoryUsingGETHook = () => {
    const gdprHistoryUsingGET = useCmdbSwaggerClient<ConfigurationItemSetUi>()

    return (params: GdprHistoryUsingGETParams, signal?: AbortSignal) => {
        return gdprHistoryUsingGET({ url: `/history/read/gdpr/list`, method: 'get', params, signal })
    }
}

export const getGdprHistoryUsingGETQueryKey = (params: GdprHistoryUsingGETParams) => [`/history/read/gdpr/list`, ...(params ? [params] : [])] as const

export const useGdprHistoryUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>, TError = void>(
    params: GdprHistoryUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGdprHistoryUsingGETQueryKey(params)

    const gdprHistoryUsingGET = useGdprHistoryUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>> = ({ signal }) =>
        gdprHistoryUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GdprHistoryUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>>
export type GdprHistoryUsingGETQueryError = void

/**
 * @summary gdprHistory
 */
export const useGdprHistoryUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>, TError = void>(
    params: GdprHistoryUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGdprHistoryUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGdprHistoryUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readRelHistoryVersion
 */
export const useReadRelHistoryVersionUsingGETHook = () => {
    const readRelHistoryVersionUsingGET = useCmdbSwaggerClient<HistoryVersionUiRelationshipUi>()

    return (uuid: string, params?: ReadRelHistoryVersionUsingGETParams, signal?: AbortSignal) => {
        return readRelHistoryVersionUsingGET({ url: `/history/read/rel/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadRelHistoryVersionUsingGETQueryKey = (uuid: string, params?: ReadRelHistoryVersionUsingGETParams) =>
    [`/history/read/rel/${uuid}`, ...(params ? [params] : [])] as const

export const useReadRelHistoryVersionUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadRelHistoryVersionUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelHistoryVersionUsingGETQueryKey(uuid, params)

    const readRelHistoryVersionUsingGET = useReadRelHistoryVersionUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>> = ({ signal }) =>
        readRelHistoryVersionUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelHistoryVersionUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>>
export type ReadRelHistoryVersionUsingGETQueryError = void

/**
 * @summary readRelHistoryVersion
 */
export const useReadRelHistoryVersionUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: ReadRelHistoryVersionUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelHistoryVersionUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readRelHistoryVersions
 */
export const useReadRelHistoryVersionsUsingGETHook = () => {
    const readRelHistoryVersionsUsingGET = useCmdbSwaggerClient<HistoryVersionsListUiRelationshipUi>()

    return (uuid: string, params: ReadRelHistoryVersionsUsingGETParams, signal?: AbortSignal) => {
        return readRelHistoryVersionsUsingGET({ url: `/history/read/rel/${uuid}/list`, method: 'get', params, signal })
    }
}

export const getReadRelHistoryVersionsUsingGETQueryKey = (uuid: string, params: ReadRelHistoryVersionsUsingGETParams) =>
    [`/history/read/rel/${uuid}/list`, ...(params ? [params] : [])] as const

export const useReadRelHistoryVersionsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params: ReadRelHistoryVersionsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelHistoryVersionsUsingGETQueryKey(uuid, params)

    const readRelHistoryVersionsUsingGET = useReadRelHistoryVersionsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>> = ({ signal }) =>
        readRelHistoryVersionsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelHistoryVersionsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>>
export type ReadRelHistoryVersionsUsingGETQueryError = void

/**
 * @summary readRelHistoryVersions
 */
export const useReadRelHistoryVersionsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params: ReadRelHistoryVersionsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelHistoryVersionsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelHistoryVersionsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary invalidateConfigurationItem
 */
export const useInvalidateConfigurationItemUsingPOSTHook = () => {
    const invalidateConfigurationItemUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (configurationItemInvalidateUiBody: ConfigurationItemInvalidateUiBody, params?: InvalidateConfigurationItemUsingPOSTParams) => {
        return invalidateConfigurationItemUsingPOST({
            url: `/invalidate/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemInvalidateUiBody,
            params,
        })
    }
}

export const useInvalidateConfigurationItemUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemUsingPOSTHook>>>,
    TError,
    { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateConfigurationItemUsingPOST = useInvalidateConfigurationItemUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemUsingPOSTHook>>>,
        { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return invalidateConfigurationItemUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateConfigurationItemUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemUsingPOSTHook>>>
>
export type InvalidateConfigurationItemUsingPOSTMutationBody = ConfigurationItemInvalidateUiBody
export type InvalidateConfigurationItemUsingPOSTMutationError = unknown

/**
 * @summary invalidateConfigurationItem
 */
export const useInvalidateConfigurationItemUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateConfigurationItemUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary invalidateConfigurationItemBiznisMdules
 */
export const useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook = () => {
    const invalidateConfigurationItemBiznisMdulesUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (
        configurationItemInvalidateUiBody: ConfigurationItemInvalidateUiBody,
        params?: InvalidateConfigurationItemBiznisMdulesUsingPOSTParams,
    ) => {
        return invalidateConfigurationItemBiznisMdulesUsingPOST({
            url: `/invalidate/ci/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemInvalidateUiBody,
            params,
        })
    }
}

export const useInvalidateConfigurationItemBiznisMdulesUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemBiznisMdulesUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook>>>,
    TError,
    { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemBiznisMdulesUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateConfigurationItemBiznisMdulesUsingPOST = useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook>>>,
        { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemBiznisMdulesUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return invalidateConfigurationItemBiznisMdulesUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateConfigurationItemBiznisMdulesUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook>>>
>
export type InvalidateConfigurationItemBiznisMdulesUsingPOSTMutationBody = ConfigurationItemInvalidateUiBody
export type InvalidateConfigurationItemBiznisMdulesUsingPOSTMutationError = unknown

/**
 * @summary invalidateConfigurationItemBiznisMdules
 */
export const useInvalidateConfigurationItemBiznisMdulesUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateConfigurationItemBiznisMdulesUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemInvalidateUiBody; params?: InvalidateConfigurationItemBiznisMdulesUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateConfigurationItemBiznisMdulesUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary invalidateSet
 */
export const useInvalidateSetUsingPOSTHook = () => {
    const invalidateSetUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (itemSetUi: ItemSetUi, params?: InvalidateSetUsingPOSTParams) => {
        return invalidateSetUsingPOST({
            url: `/invalidate/list`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: itemSetUi,
            params,
        })
    }
}

export const useInvalidateSetUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateSetUsingPOSTHook>>>,
        TError,
        { data: ItemSetUi; params?: InvalidateSetUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateSetUsingPOSTHook>>>,
    TError,
    { data: ItemSetUi; params?: InvalidateSetUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateSetUsingPOST = useInvalidateSetUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateSetUsingPOSTHook>>>,
        { data: ItemSetUi; params?: InvalidateSetUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return invalidateSetUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateSetUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useInvalidateSetUsingPOSTHook>>>>
export type InvalidateSetUsingPOSTMutationBody = ItemSetUi
export type InvalidateSetUsingPOSTMutationError = unknown

/**
 * @summary invalidateSet
 */
export const useInvalidateSetUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateSetUsingPOSTHook>>>,
        TError,
        { data: ItemSetUi; params?: InvalidateSetUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateSetUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary invalidateRelationship
 */
export const useInvalidateRelationshipUsingPOSTHook = () => {
    const invalidateRelationshipUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (relationshipInvalidateUiBody: RelationshipInvalidateUiBody, params?: InvalidateRelationshipUsingPOSTParams) => {
        return invalidateRelationshipUsingPOST({
            url: `/invalidate/relation`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipInvalidateUiBody,
            params,
        })
    }
}

export const useInvalidateRelationshipUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipUsingPOSTHook>>>,
        TError,
        { data: RelationshipInvalidateUiBody; params?: InvalidateRelationshipUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipUsingPOSTHook>>>,
    TError,
    { data: RelationshipInvalidateUiBody; params?: InvalidateRelationshipUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const invalidateRelationshipUsingPOST = useInvalidateRelationshipUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipUsingPOSTHook>>>,
        { data: RelationshipInvalidateUiBody; params?: InvalidateRelationshipUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return invalidateRelationshipUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type InvalidateRelationshipUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipUsingPOSTHook>>>
>
export type InvalidateRelationshipUsingPOSTMutationBody = RelationshipInvalidateUiBody
export type InvalidateRelationshipUsingPOSTMutationError = unknown

/**
 * @summary invalidateRelationship
 */
export const useInvalidateRelationshipUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useInvalidateRelationshipUsingPOSTHook>>>,
        TError,
        { data: RelationshipInvalidateUiBody; params?: InvalidateRelationshipUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useInvalidateRelationshipUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getMetrics
 */
export const useGetMetricsUsingGETHook = () => {
    const getMetricsUsingGET = useCmdbSwaggerClient<void>()

    return (params?: GetMetricsUsingGETParams, signal?: AbortSignal) => {
        return getMetricsUsingGET({ url: `/metrics`, method: 'get', params, signal })
    }
}

export const getGetMetricsUsingGETQueryKey = (params?: GetMetricsUsingGETParams) => [`/metrics`, ...(params ? [params] : [])] as const

export const useGetMetricsUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>, TError = unknown>(
    params?: GetMetricsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetMetricsUsingGETQueryKey(params)

    const getMetricsUsingGET = useGetMetricsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>> = ({ signal }) =>
        getMetricsUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetMetricsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>>
export type GetMetricsUsingGETQueryError = unknown

/**
 * @summary getMetrics
 */
export const useGetMetricsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>, TError = unknown>(
    params?: GetMetricsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetMetricsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetMetricsUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readNotificationsWithFilter
 */
export const useReadNotificationsWithFilterUsingGETHook = () => {
    const readNotificationsWithFilterUsingGET = useCmdbSwaggerClient<NotificationsList>()

    return (params?: ReadNotificationsWithFilterUsingGETParams, signal?: AbortSignal) => {
        return readNotificationsWithFilterUsingGET({ url: `/notification`, method: 'get', params, signal })
    }
}

export const getReadNotificationsWithFilterUsingGETQueryKey = (params?: ReadNotificationsWithFilterUsingGETParams) =>
    [`/notification`, ...(params ? [params] : [])] as const

export const useReadNotificationsWithFilterUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>,
    TError = void,
>(
    params?: ReadNotificationsWithFilterUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadNotificationsWithFilterUsingGETQueryKey(params)

    const readNotificationsWithFilterUsingGET = useReadNotificationsWithFilterUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>> = ({ signal }) =>
        readNotificationsWithFilterUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadNotificationsWithFilterUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>
>
export type ReadNotificationsWithFilterUsingGETQueryError = void

/**
 * @summary readNotificationsWithFilter
 */
export const useReadNotificationsWithFilterUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>,
    TError = void,
>(
    params?: ReadNotificationsWithFilterUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNotificationsWithFilterUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadNotificationsWithFilterUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary storeNotifications
 */
export const useStoreNotificationsUsingPOSTHook = () => {
    const storeNotificationsUsingPOST = useCmdbSwaggerClient<boolean | void>()

    return (notification: Notification[], params?: StoreNotificationsUsingPOSTParams) => {
        return storeNotificationsUsingPOST({
            url: `/notification`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: notification,
            params,
        })
    }
}

export const useStoreNotificationsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreNotificationsUsingPOSTHook>>>,
        TError,
        { data: Notification[]; params?: StoreNotificationsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreNotificationsUsingPOSTHook>>>,
    TError,
    { data: Notification[]; params?: StoreNotificationsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeNotificationsUsingPOST = useStoreNotificationsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreNotificationsUsingPOSTHook>>>,
        { data: Notification[]; params?: StoreNotificationsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeNotificationsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreNotificationsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreNotificationsUsingPOSTHook>>>>
export type StoreNotificationsUsingPOSTMutationBody = Notification[]
export type StoreNotificationsUsingPOSTMutationError = unknown

/**
 * @summary storeNotifications
 */
export const useStoreNotificationsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreNotificationsUsingPOSTHook>>>,
        TError,
        { data: Notification[]; params?: StoreNotificationsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreNotificationsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary updateNotifications
 */
export const useUpdateNotificationsUsingPUTHook = () => {
    const updateNotificationsUsingPUT = useCmdbSwaggerClient<void>()

    return (notificationUpdateHolderUi: NotificationUpdateHolderUi, params?: UpdateNotificationsUsingPUTParams) => {
        return updateNotificationsUsingPUT({
            url: `/notification`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: notificationUpdateHolderUi,
            params,
        })
    }
}

export const useUpdateNotificationsUsingPUTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsUsingPUTHook>>>,
        TError,
        { data: NotificationUpdateHolderUi; params?: UpdateNotificationsUsingPUTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsUsingPUTHook>>>,
    TError,
    { data: NotificationUpdateHolderUi; params?: UpdateNotificationsUsingPUTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateNotificationsUsingPUT = useUpdateNotificationsUsingPUTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsUsingPUTHook>>>,
        { data: NotificationUpdateHolderUi; params?: UpdateNotificationsUsingPUTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return updateNotificationsUsingPUT(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateNotificationsUsingPUTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsUsingPUTHook>>>>
export type UpdateNotificationsUsingPUTMutationBody = NotificationUpdateHolderUi
export type UpdateNotificationsUsingPUTMutationError = unknown

/**
 * @summary updateNotifications
 */
export const useUpdateNotificationsUsingPUT = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateNotificationsUsingPUTHook>>>,
        TError,
        { data: NotificationUpdateHolderUi; params?: UpdateNotificationsUsingPUTParams },
        TContext
    >
}) => {
    const mutationOptions = useUpdateNotificationsUsingPUTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storePo
 */
export const useStorePoUsingPOSTHook = () => {
    const storePoUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (poId: string, configurationItemUiBody: ConfigurationItemUiBody, params?: StorePoUsingPOSTParams) => {
        return storePoUsingPOST({
            url: `/po/${poId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemUiBody,
            params,
        })
    }
}

export const useStorePoUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoUsingPOSTHook>>>,
        TError,
        { poId: string; data: ConfigurationItemUiBody; params?: StorePoUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStorePoUsingPOSTHook>>>,
    TError,
    { poId: string; data: ConfigurationItemUiBody; params?: StorePoUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storePoUsingPOST = useStorePoUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStorePoUsingPOSTHook>>>,
        { poId: string; data: ConfigurationItemUiBody; params?: StorePoUsingPOSTParams }
    > = (props) => {
        const { poId, data, params } = props ?? {}

        return storePoUsingPOST(poId, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorePoUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStorePoUsingPOSTHook>>>>
export type StorePoUsingPOSTMutationBody = ConfigurationItemUiBody
export type StorePoUsingPOSTMutationError = unknown

/**
 * @summary storePo
 */
export const useStorePoUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoUsingPOSTHook>>>,
        TError,
        { poId: string; data: ConfigurationItemUiBody; params?: StorePoUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStorePoUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storePoWithHierarchyRel
 */
export const useStorePoWithHierarchyRelUsingPOSTHook = () => {
    const storePoWithHierarchyRelUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (poId: string, relId: string, poWithHierarchyUiBody: PoWithHierarchyUiBody, params?: StorePoWithHierarchyRelUsingPOSTParams) => {
        return storePoWithHierarchyRelUsingPOST({
            url: `/poWithHierarchy/${poId}/${relId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: poWithHierarchyUiBody,
            params,
        })
    }
}

export const useStorePoWithHierarchyRelUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelUsingPOSTHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: StorePoWithHierarchyRelUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelUsingPOSTHook>>>,
    TError,
    { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: StorePoWithHierarchyRelUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storePoWithHierarchyRelUsingPOST = useStorePoWithHierarchyRelUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelUsingPOSTHook>>>,
        { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: StorePoWithHierarchyRelUsingPOSTParams }
    > = (props) => {
        const { poId, relId, data, params } = props ?? {}

        return storePoWithHierarchyRelUsingPOST(poId, relId, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StorePoWithHierarchyRelUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelUsingPOSTHook>>>
>
export type StorePoWithHierarchyRelUsingPOSTMutationBody = PoWithHierarchyUiBody
export type StorePoWithHierarchyRelUsingPOSTMutationError = unknown

/**
 * @summary storePoWithHierarchyRel
 */
export const useStorePoWithHierarchyRelUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStorePoWithHierarchyRelUsingPOSTHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: StorePoWithHierarchyRelUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStorePoWithHierarchyRelUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getCountCiTypesByOwner
 */
export const useGetCountCiTypesByOwnerUsingGETHook = () => {
    const getCountCiTypesByOwnerUsingGET = useCmdbSwaggerClient<CountTypes[]>()

    return (params?: GetCountCiTypesByOwnerUsingGETParams, signal?: AbortSignal) => {
        return getCountCiTypesByOwnerUsingGET({ url: `/read/ci/counttypes`, method: 'get', params, signal })
    }
}

export const getGetCountCiTypesByOwnerUsingGETQueryKey = (params?: GetCountCiTypesByOwnerUsingGETParams) =>
    [`/read/ci/counttypes`, ...(params ? [params] : [])] as const

export const useGetCountCiTypesByOwnerUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>,
    TError = void,
>(
    params?: GetCountCiTypesByOwnerUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCountCiTypesByOwnerUsingGETQueryKey(params)

    const getCountCiTypesByOwnerUsingGET = useGetCountCiTypesByOwnerUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>> = ({ signal }) =>
        getCountCiTypesByOwnerUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetCountCiTypesByOwnerUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>>
export type GetCountCiTypesByOwnerUsingGETQueryError = void

/**
 * @summary getCountCiTypesByOwner
 */
export const useGetCountCiTypesByOwnerUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>,
    TError = void,
>(
    params?: GetCountCiTypesByOwnerUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetCountCiTypesByOwnerUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetCountCiTypesByOwnerUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readConfigurationItem
 */
export const useReadConfigurationItemUsingGETHook = () => {
    const readConfigurationItemUsingGET = useClientForReadConfigurationItemUsingGET<ConfigurationItemUi>()

    return (uuid: string, params?: ReadConfigurationItemUsingGETParams, signal?: AbortSignal) => {
        return readConfigurationItemUsingGET({ url: `/read/ci/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadConfigurationItemUsingGETQueryKey = (uuid: string, params?: ReadConfigurationItemUsingGETParams) =>
    [`/read/ci/${uuid}`, ...(params ? [params] : [])] as const

export const useReadConfigurationItemUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadConfigurationItemUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadConfigurationItemUsingGETQueryKey(uuid, params)

    const readConfigurationItemUsingGET = useReadConfigurationItemUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>> = ({ signal }) =>
        readConfigurationItemUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadConfigurationItemUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>>
export type ReadConfigurationItemUsingGETQueryError = void

/**
 * @summary readConfigurationItem
 */
export const useReadConfigurationItemUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: ReadConfigurationItemUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadConfigurationItemUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readNeighboursConfigurationItems
 */
export const useReadNeighboursConfigurationItemsUsingGETHook = () => {
    const readNeighboursConfigurationItemsUsingGET = useCmdbSwaggerClient<ConfigurationItemNeighbourSetUi>()

    return (uuid: string, params?: ReadNeighboursConfigurationItemsUsingGETParams, signal?: AbortSignal) => {
        return readNeighboursConfigurationItemsUsingGET({ url: `/read/ci/${uuid}/neighbours`, method: 'get', params, signal })
    }
}

export const getReadNeighboursConfigurationItemsUsingGETQueryKey = (uuid: string, params?: ReadNeighboursConfigurationItemsUsingGETParams) =>
    [`/read/ci/${uuid}/neighbours`, ...(params ? [params] : [])] as const

export const useReadNeighboursConfigurationItemsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadNeighboursConfigurationItemsUsingGETQueryKey(uuid, params)

    const readNeighboursConfigurationItemsUsingGET = useReadNeighboursConfigurationItemsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>> = ({ signal }) =>
        readNeighboursConfigurationItemsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadNeighboursConfigurationItemsUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>
>
export type ReadNeighboursConfigurationItemsUsingGETQueryError = void

/**
 * @summary readNeighboursConfigurationItems
 */
export const useReadNeighboursConfigurationItemsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadNeighboursConfigurationItemsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readNeighboursConfigurationItemsCount
 */
export const useReadNeighboursConfigurationItemsCountUsingGETHook = () => {
    const readNeighboursConfigurationItemsCountUsingGET = useCmdbSwaggerClient<ReadNeighboursConfigurationItemsCountUsingGET200>()

    return (uuid: string, params?: ReadNeighboursConfigurationItemsCountUsingGETParams, signal?: AbortSignal) => {
        return readNeighboursConfigurationItemsCountUsingGET({ url: `/read/ci/${uuid}/neighbourscount`, method: 'get', params, signal })
    }
}

export const getReadNeighboursConfigurationItemsCountUsingGETQueryKey = (
    uuid: string,
    params?: ReadNeighboursConfigurationItemsCountUsingGETParams,
) => [`/read/ci/${uuid}/neighbourscount`, ...(params ? [params] : [])] as const

export const useReadNeighboursConfigurationItemsCountUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsCountUsingGETParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>, TError, TData>
    },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadNeighboursConfigurationItemsCountUsingGETQueryKey(uuid, params)

    const readNeighboursConfigurationItemsCountUsingGET = useReadNeighboursConfigurationItemsCountUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>> = ({ signal }) =>
        readNeighboursConfigurationItemsCountUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadNeighboursConfigurationItemsCountUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>
>
export type ReadNeighboursConfigurationItemsCountUsingGETQueryError = void

/**
 * @summary readNeighboursConfigurationItemsCount
 */
export const useReadNeighboursConfigurationItemsCountUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadNeighboursConfigurationItemsCountUsingGETParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadNeighboursConfigurationItemsCountUsingGETHook>>>, TError, TData>
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadNeighboursConfigurationItemsCountUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readRelationships
 */
export const useReadRelationshipsUsingGETHook = () => {
    const readRelationshipsUsingGET = useCmdbSwaggerClient<IncidentRelationshipSetUi>()

    return (uuid: string, params?: ReadRelationshipsUsingGETParams, signal?: AbortSignal) => {
        return readRelationshipsUsingGET({ url: `/read/ci/${uuid}/relations`, method: 'get', params, signal })
    }
}

export const getReadRelationshipsUsingGETQueryKey = (uuid: string, params?: ReadRelationshipsUsingGETParams) =>
    [`/read/ci/${uuid}/relations`, ...(params ? [params] : [])] as const

export const useReadRelationshipsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadRelationshipsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelationshipsUsingGETQueryKey(uuid, params)

    const readRelationshipsUsingGET = useReadRelationshipsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>> = ({ signal }) =>
        readRelationshipsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelationshipsUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>>
export type ReadRelationshipsUsingGETQueryError = void

/**
 * @summary readRelationships
 */
export const useReadRelationshipsUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: ReadRelationshipsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelationshipsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiList
 */
export const useReadCiListUsingGETHook = () => {
    const readCiListUsingGET = useCmdbSwaggerClient<ConfigurationItemSetUi>()

    return (params?: ReadCiListUsingGETParams, signal?: AbortSignal) => {
        return readCiListUsingGET({ url: `/read/cilist`, method: 'get', params, signal })
    }
}

export const getReadCiListUsingGETQueryKey = (params?: ReadCiListUsingGETParams) => [`/read/cilist`, ...(params ? [params] : [])] as const

export const useReadCiListUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>, TError = void>(
    params?: ReadCiListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiListUsingGETQueryKey(params)

    const readCiListUsingGET = useReadCiListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>> = ({ signal }) =>
        readCiListUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadCiListUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>>
export type ReadCiListUsingGETQueryError = void

/**
 * @summary readCiList
 */
export const useReadCiListUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>, TError = void>(
    params?: ReadCiListUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiListUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiList
 */
export const useReadCiListUsingPOSTHook = () => {
    const readCiListUsingPOST = useCmdbSwaggerClient<ConfigurationItemSetUi | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ReadCiListUsingPOSTParams) => {
        return readCiListUsingPOST({
            url: `/read/cilistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useReadCiListUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOSTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ReadCiListUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOSTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ReadCiListUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiListUsingPOST = useReadCiListUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOSTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ReadCiListUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readCiListUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiListUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOSTHook>>>>
export type ReadCiListUsingPOSTMutationBody = CiListFilterContainerUiBody
export type ReadCiListUsingPOSTMutationError = unknown

/**
 * @summary readCiList
 */
export const useReadCiListUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOSTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ReadCiListUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadCiListUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readCiRelationshipCiList
 */
export const useReadCiRelationshipCiListUsingPOSTHook = () => {
    const readCiRelationshipCiListUsingPOST = useCmdbSwaggerClient<CiRelationshipCiPreviewHolderListUi | void>()

    return (relListFilterContainerUiBody: RelListFilterContainerUiBody, params?: ReadCiRelationshipCiListUsingPOSTParams) => {
        return readCiRelationshipCiListUsingPOST({
            url: `/read/cirelationshipcilistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relListFilterContainerUiBody,
            params,
        })
    }
}

export const useReadCiRelationshipCiListUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListUsingPOSTHook>>>,
        TError,
        { data: RelListFilterContainerUiBody; params?: ReadCiRelationshipCiListUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListUsingPOSTHook>>>,
    TError,
    { data: RelListFilterContainerUiBody; params?: ReadCiRelationshipCiListUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiRelationshipCiListUsingPOST = useReadCiRelationshipCiListUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListUsingPOSTHook>>>,
        { data: RelListFilterContainerUiBody; params?: ReadCiRelationshipCiListUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readCiRelationshipCiListUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiRelationshipCiListUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListUsingPOSTHook>>>
>
export type ReadCiRelationshipCiListUsingPOSTMutationBody = RelListFilterContainerUiBody
export type ReadCiRelationshipCiListUsingPOSTMutationError = unknown

/**
 * @summary readCiRelationshipCiList
 */
export const useReadCiRelationshipCiListUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiRelationshipCiListUsingPOSTHook>>>,
        TError,
        { data: RelListFilterContainerUiBody; params?: ReadCiRelationshipCiListUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadCiRelationshipCiListUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readCiUuidSet
 */
export const useReadCiUuidSetUsingPOSTHook = () => {
    const readCiUuidSetUsingPOST = useCmdbSwaggerClient<CiUuidSetUi | void>()

    return (ciListFilterContainerUiBody: CiListFilterContainerUiBody, params?: ReadCiUuidSetUsingPOSTParams) => {
        return readCiUuidSetUsingPOST({
            url: `/read/ciuuidsetfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUiBody,
            params,
        })
    }
}

export const useReadCiUuidSetUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetUsingPOSTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ReadCiUuidSetUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetUsingPOSTHook>>>,
    TError,
    { data: CiListFilterContainerUiBody; params?: ReadCiUuidSetUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiUuidSetUsingPOST = useReadCiUuidSetUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetUsingPOSTHook>>>,
        { data: CiListFilterContainerUiBody; params?: ReadCiUuidSetUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readCiUuidSetUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiUuidSetUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetUsingPOSTHook>>>>
export type ReadCiUuidSetUsingPOSTMutationBody = CiListFilterContainerUiBody
export type ReadCiUuidSetUsingPOSTMutationError = unknown

/**
 * @summary readCiUuidSet
 */
export const useReadCiUuidSetUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiUuidSetUsingPOSTHook>>>,
        TError,
        { data: CiListFilterContainerUiBody; params?: ReadCiUuidSetUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadCiUuidSetUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readIncidentRelationships
 */
export const useReadIncidentRelationshipsUsingPOSTHook = () => {
    const readIncidentRelationshipsUsingPOST = useCmdbSwaggerClient<RelationshipSetUi | void>()

    return (incidentRelationshipsFilterUi: IncidentRelationshipsFilterUi, params?: ReadIncidentRelationshipsUsingPOSTParams) => {
        return readIncidentRelationshipsUsingPOST({
            url: `/read/incidentrelationships`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: incidentRelationshipsFilterUi,
            params,
        })
    }
}

export const useReadIncidentRelationshipsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsUsingPOSTHook>>>,
        TError,
        { data: IncidentRelationshipsFilterUi; params?: ReadIncidentRelationshipsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsUsingPOSTHook>>>,
    TError,
    { data: IncidentRelationshipsFilterUi; params?: ReadIncidentRelationshipsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readIncidentRelationshipsUsingPOST = useReadIncidentRelationshipsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsUsingPOSTHook>>>,
        { data: IncidentRelationshipsFilterUi; params?: ReadIncidentRelationshipsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readIncidentRelationshipsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadIncidentRelationshipsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsUsingPOSTHook>>>
>
export type ReadIncidentRelationshipsUsingPOSTMutationBody = IncidentRelationshipsFilterUi
export type ReadIncidentRelationshipsUsingPOSTMutationError = unknown

/**
 * @summary readIncidentRelationships
 */
export const useReadIncidentRelationshipsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadIncidentRelationshipsUsingPOSTHook>>>,
        TError,
        { data: IncidentRelationshipsFilterUi; params?: ReadIncidentRelationshipsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadIncidentRelationshipsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getKSSpravcaVerejnaMocAktivnaFZC
 */
export const useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook = () => {
    const getKSSpravcaVerejnaMocAktivnaFZCUsingGET = useCmdbSwaggerClient<QueryResultTableUi>()

    return (params?: GetKSSpravcaVerejnaMocAktivnaFZCUsingGETParams, signal?: AbortSignal) => {
        return getKSSpravcaVerejnaMocAktivnaFZCUsingGET({ url: `/read/ksSpVmFazaZivCyklu`, method: 'get', params, signal })
    }
}

export const getGetKSSpravcaVerejnaMocAktivnaFZCUsingGETQueryKey = (params?: GetKSSpravcaVerejnaMocAktivnaFZCUsingGETParams) =>
    [`/read/ksSpVmFazaZivCyklu`, ...(params ? [params] : [])] as const

export const useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>,
    TError = void,
>(
    params?: GetKSSpravcaVerejnaMocAktivnaFZCUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetKSSpravcaVerejnaMocAktivnaFZCUsingGETQueryKey(params)

    const getKSSpravcaVerejnaMocAktivnaFZCUsingGET = useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>> = ({ signal }) =>
        getKSSpravcaVerejnaMocAktivnaFZCUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetKSSpravcaVerejnaMocAktivnaFZCUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>
>
export type GetKSSpravcaVerejnaMocAktivnaFZCUsingGETQueryError = void

/**
 * @summary getKSSpravcaVerejnaMocAktivnaFZC
 */
export const useGetKSSpravcaVerejnaMocAktivnaFZCUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>,
    TError = void,
>(
    params?: GetKSSpravcaVerejnaMocAktivnaFZCUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetKSSpravcaVerejnaMocAktivnaFZCUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readQuery
 */
export const useReadQueryUsingPOSTHook = () => {
    const readQueryUsingPOST = useCmdbSwaggerClient<QueryResultTableUi | void>()

    return (queryUi: QueryUi, params?: ReadQueryUsingPOSTParams) => {
        return readQueryUsingPOST({ url: `/read/query`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: queryUi, params })
    }
}

export const useReadQueryUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadQueryUsingPOSTHook>>>,
        TError,
        { data: QueryUi; params?: ReadQueryUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadQueryUsingPOSTHook>>>,
    TError,
    { data: QueryUi; params?: ReadQueryUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readQueryUsingPOST = useReadQueryUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadQueryUsingPOSTHook>>>,
        { data: QueryUi; params?: ReadQueryUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readQueryUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadQueryUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadQueryUsingPOSTHook>>>>
export type ReadQueryUsingPOSTMutationBody = QueryUi
export type ReadQueryUsingPOSTMutationError = unknown

/**
 * @summary readQuery
 */
export const useReadQueryUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadQueryUsingPOSTHook>>>,
        TError,
        { data: QueryUi; params?: ReadQueryUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadQueryUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readRelationship
 */
export const useReadRelationshipUsingGETHook = () => {
    const readRelationshipUsingGET = useCmdbSwaggerClient<RelationshipUi>()

    return (uuid: string, params?: ReadRelationshipUsingGETParams, signal?: AbortSignal) => {
        return readRelationshipUsingGET({ url: `/read/relation/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadRelationshipUsingGETQueryKey = (uuid: string, params?: ReadRelationshipUsingGETParams) =>
    [`/read/relation/${uuid}`, ...(params ? [params] : [])] as const

export const useReadRelationshipUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadRelationshipUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadRelationshipUsingGETQueryKey(uuid, params)

    const readRelationshipUsingGET = useReadRelationshipUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>> = ({ signal }) =>
        readRelationshipUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadRelationshipUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>>
export type ReadRelationshipUsingGETQueryError = void

/**
 * @summary readRelationship
 */
export const useReadRelationshipUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>, TError = void>(
    uuid: string,
    params?: ReadRelationshipUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadRelationshipUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadRelationshipUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiNeighbours
 */
export const useReadCiNeighboursUsingPOSTHook = () => {
    const readCiNeighboursUsingPOST = useCmdbSwaggerClient<NeighbourSetUi | void>()

    return (uuid: string, neighboursFilterContainerUi: NeighboursFilterContainerUi, params?: ReadCiNeighboursUsingPOSTParams) => {
        return readCiNeighboursUsingPOST({
            url: `/read/relations/neighbours/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: neighboursFilterContainerUi,
            params,
        })
    }
}

export const getReadCiNeighboursUsingPOSTQueryKey = (
    uuid: string,
    neighboursFilterContainerUi: NeighboursFilterContainerUi,
    params?: ReadCiNeighboursUsingPOSTParams,
) => [`/read/relations/neighbours/${uuid}`, ...(params ? [params] : []), neighboursFilterContainerUi] as const

export const useReadCiNeighboursUsingPOSTQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>,
    TError = unknown,
>(
    uuid: string,
    neighboursFilterContainerUi: NeighboursFilterContainerUi,
    params?: ReadCiNeighboursUsingPOSTParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiNeighboursUsingPOSTQueryKey(uuid, neighboursFilterContainerUi, params)

    const readCiNeighboursUsingPOST = useReadCiNeighboursUsingPOSTHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>> = () =>
        readCiNeighboursUsingPOST(uuid, neighboursFilterContainerUi, params)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiNeighboursUsingPOSTQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>>
export type ReadCiNeighboursUsingPOSTQueryError = unknown

/**
 * @summary readCiNeighbours
 */
export const useReadCiNeighboursUsingPOST = <TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>, TError = unknown>(
    uuid: string,
    neighboursFilterContainerUi: NeighboursFilterContainerUi,
    params?: ReadCiNeighboursUsingPOSTParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursUsingPOSTHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiNeighboursUsingPOSTQueryOptions(uuid, neighboursFilterContainerUi, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiNeighboursWithAllRels
 */
export const useReadCiNeighboursWithAllRelsUsingGETHook = () => {
    const readCiNeighboursWithAllRelsUsingGET = useClientForReadCiNeighboursWithAllRelsUsingGET<CiWithRelsResultUi>()

    return (uuid: string, params?: ReadCiNeighboursWithAllRelsUsingGETParams, signal?: AbortSignal) => {
        return readCiNeighboursWithAllRelsUsingGET({ url: `/read/relations/neighbourswithallrels/${uuid}`, method: 'get', params, signal })
    }
}

export const getReadCiNeighboursWithAllRelsUsingGETQueryKey = (uuid: string, params?: ReadCiNeighboursWithAllRelsUsingGETParams) =>
    [`/read/relations/neighbourswithallrels/${uuid}`, ...(params ? [params] : [])] as const

export const useReadCiNeighboursWithAllRelsUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiNeighboursWithAllRelsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadCiNeighboursWithAllRelsUsingGETQueryKey(uuid, params)

    const readCiNeighboursWithAllRelsUsingGET = useReadCiNeighboursWithAllRelsUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>> = ({ signal }) =>
        readCiNeighboursWithAllRelsUsingGET(uuid, params, signal)

    return { queryKey, queryFn, enabled: !!uuid, ...queryOptions }
}

export type ReadCiNeighboursWithAllRelsUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>
>
export type ReadCiNeighboursWithAllRelsUsingGETQueryError = void

/**
 * @summary readCiNeighboursWithAllRels
 */
export const useReadCiNeighboursWithAllRelsUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>,
    TError = void,
>(
    uuid: string,
    params?: ReadCiNeighboursWithAllRelsUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadCiNeighboursWithAllRelsUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadCiNeighboursWithAllRelsUsingGETQueryOptions(uuid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readRelationshipList
 */
export const useReadRelationshipListUsingPOSTHook = () => {
    const readRelationshipListUsingPOST = useCmdbSwaggerClient<RelationshipListUi | void>()

    return (relListFilterContainerUiBody: RelListFilterContainerUiBody, params?: ReadRelationshipListUsingPOSTParams) => {
        return readRelationshipListUsingPOST({
            url: `/read/relationshiplistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relListFilterContainerUiBody,
            params,
        })
    }
}

export const useReadRelationshipListUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadRelationshipListUsingPOSTHook>>>,
        TError,
        { data: RelListFilterContainerUiBody; params?: ReadRelationshipListUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadRelationshipListUsingPOSTHook>>>,
    TError,
    { data: RelListFilterContainerUiBody; params?: ReadRelationshipListUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readRelationshipListUsingPOST = useReadRelationshipListUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadRelationshipListUsingPOSTHook>>>,
        { data: RelListFilterContainerUiBody; params?: ReadRelationshipListUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readRelationshipListUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadRelationshipListUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelationshipListUsingPOSTHook>>>>
export type ReadRelationshipListUsingPOSTMutationBody = RelListFilterContainerUiBody
export type ReadRelationshipListUsingPOSTMutationError = unknown

/**
 * @summary readRelationshipList
 */
export const useReadRelationshipListUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadRelationshipListUsingPOSTHook>>>,
        TError,
        { data: RelListFilterContainerUiBody; params?: ReadRelationshipListUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadRelationshipListUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readPoSuperiorPoRelationship
 */
export const useReadPoSuperiorPoRelationshipUsingPOSTHook = () => {
    const readPoSuperiorPoRelationshipUsingPOST = useCmdbSwaggerClient<ReadPoSuperiorPoRelationshipUsingPOST200 | void>()

    return (uuidSetUi: UuidSetUi, params?: ReadPoSuperiorPoRelationshipUsingPOSTParams) => {
        return readPoSuperiorPoRelationshipUsingPOST({
            url: `/read/relationspo`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: uuidSetUi,
            params,
        })
    }
}

export const useReadPoSuperiorPoRelationshipUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipUsingPOSTHook>>>,
        TError,
        { data: UuidSetUi; params?: ReadPoSuperiorPoRelationshipUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipUsingPOSTHook>>>,
    TError,
    { data: UuidSetUi; params?: ReadPoSuperiorPoRelationshipUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readPoSuperiorPoRelationshipUsingPOST = useReadPoSuperiorPoRelationshipUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipUsingPOSTHook>>>,
        { data: UuidSetUi; params?: ReadPoSuperiorPoRelationshipUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readPoSuperiorPoRelationshipUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadPoSuperiorPoRelationshipUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipUsingPOSTHook>>>
>
export type ReadPoSuperiorPoRelationshipUsingPOSTMutationBody = UuidSetUi
export type ReadPoSuperiorPoRelationshipUsingPOSTMutationError = unknown

/**
 * @summary readPoSuperiorPoRelationship
 */
export const useReadPoSuperiorPoRelationshipUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadPoSuperiorPoRelationshipUsingPOSTHook>>>,
        TError,
        { data: UuidSetUi; params?: ReadPoSuperiorPoRelationshipUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadPoSuperiorPoRelationshipUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readRelList
 */
export const useReadRelListUsingPOSTHook = () => {
    const readRelListUsingPOST = useCmdbSwaggerClient<RelationshipElasticPreviewHolderUi | void>()

    return (relFilterSmallUi: RelFilterSmallUi, params?: ReadRelListUsingPOSTParams) => {
        return readRelListUsingPOST({
            url: `/read/rellistfiltered`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relFilterSmallUi,
            params,
        })
    }
}

export const useReadRelListUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadRelListUsingPOSTHook>>>,
        TError,
        { data: RelFilterSmallUi; params?: ReadRelListUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadRelListUsingPOSTHook>>>,
    TError,
    { data: RelFilterSmallUi; params?: ReadRelListUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readRelListUsingPOST = useReadRelListUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadRelListUsingPOSTHook>>>,
        { data: RelFilterSmallUi; params?: ReadRelListUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readRelListUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadRelListUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadRelListUsingPOSTHook>>>>
export type ReadRelListUsingPOSTMutationBody = RelFilterSmallUi
export type ReadRelListUsingPOSTMutationError = unknown

/**
 * @summary readRelList
 */
export const useReadRelListUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadRelListUsingPOSTHook>>>,
        TError,
        { data: RelFilterSmallUi; params?: ReadRelListUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadRelListUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getRoleParticipantBulk
 */
export const useGetRoleParticipantBulkUsingPOSTHook = () => {
    const getRoleParticipantBulkUsingPOST = useCmdbSwaggerClient<RoleParticipantUI[] | void>()

    return (gidSetUi: GidSetUi, params?: GetRoleParticipantBulkUsingPOSTParams) => {
        return getRoleParticipantBulkUsingPOST({
            url: `/read/roleParticipant`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: gidSetUi,
            params,
        })
    }
}

export const useGetRoleParticipantBulkUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkUsingPOSTHook>>>,
        TError,
        { data: GidSetUi; params?: GetRoleParticipantBulkUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkUsingPOSTHook>>>,
    TError,
    { data: GidSetUi; params?: GetRoleParticipantBulkUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const getRoleParticipantBulkUsingPOST = useGetRoleParticipantBulkUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkUsingPOSTHook>>>,
        { data: GidSetUi; params?: GetRoleParticipantBulkUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return getRoleParticipantBulkUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type GetRoleParticipantBulkUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkUsingPOSTHook>>>
>
export type GetRoleParticipantBulkUsingPOSTMutationBody = GidSetUi
export type GetRoleParticipantBulkUsingPOSTMutationError = unknown

/**
 * @summary getRoleParticipantBulk
 */
export const useGetRoleParticipantBulkUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantBulkUsingPOSTHook>>>,
        TError,
        { data: GidSetUi; params?: GetRoleParticipantBulkUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useGetRoleParticipantBulkUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getRoleParticipant
 */
export const useGetRoleParticipantUsingGETHook = () => {
    const getRoleParticipantUsingGET = useClientForGetRoleParticipantUsingGET<RoleParticipantUI>()

    return (gid: string, params?: GetRoleParticipantUsingGETParams, signal?: AbortSignal) => {
        return getRoleParticipantUsingGET({ url: `/read/roleParticipant/${gid}`, method: 'get', params, signal })
    }
}

export const getGetRoleParticipantUsingGETQueryKey = (gid: string, params?: GetRoleParticipantUsingGETParams) =>
    [`/read/roleParticipant/${gid}`, ...(params ? [params] : [])] as const

export const useGetRoleParticipantUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>,
    TError = void,
>(
    gid: string,
    params?: GetRoleParticipantUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRoleParticipantUsingGETQueryKey(gid, params)

    const getRoleParticipantUsingGET = useGetRoleParticipantUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>> = ({ signal }) =>
        getRoleParticipantUsingGET(gid, params, signal)

    return { queryKey, queryFn, enabled: !!gid, ...queryOptions }
}

export type GetRoleParticipantUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>>
export type GetRoleParticipantUsingGETQueryError = void

/**
 * @summary getRoleParticipant
 */
export const useGetRoleParticipantUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>, TError = void>(
    gid: string,
    params?: GetRoleParticipantUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRoleParticipantUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRoleParticipantUsingGETQueryOptions(gid, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary searchAll
 */
export const useSearchAllUsingGETHook = () => {
    const searchAllUsingGET = useCmdbSwaggerClient<GeneralElasticItemSet>()

    return (params?: SearchAllUsingGETParams, signal?: AbortSignal) => {
        return searchAllUsingGET({ url: `/read/search`, method: 'get', params, signal })
    }
}

export const getSearchAllUsingGETQueryKey = (params?: SearchAllUsingGETParams) => [`/read/search`, ...(params ? [params] : [])] as const

export const useSearchAllUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>, TError = void>(
    params?: SearchAllUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSearchAllUsingGETQueryKey(params)

    const searchAllUsingGET = useSearchAllUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>> = ({ signal }) => searchAllUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type SearchAllUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>>
export type SearchAllUsingGETQueryError = void

/**
 * @summary searchAll
 */
export const useSearchAllUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>, TError = void>(
    params?: SearchAllUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useSearchAllUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useSearchAllUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readConfigurationItemsByMetaIsCodes
 */
export const useReadConfigurationItemsByMetaIsCodesUsingPOSTHook = () => {
    const readConfigurationItemsByMetaIsCodesUsingPOST = useCmdbSwaggerClient<ConfigurationItemsListUi | void>()

    return (metaIsCodesListUi: MetaIsCodesListUi, params?: ReadConfigurationItemsByMetaIsCodesUsingPOSTParams) => {
        return readConfigurationItemsByMetaIsCodesUsingPOST({
            url: `/readByMetaIsCode/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: metaIsCodesListUi,
            params,
        })
    }
}

export const useReadConfigurationItemsByMetaIsCodesUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesUsingPOSTHook>>>,
        TError,
        { data: MetaIsCodesListUi; params?: ReadConfigurationItemsByMetaIsCodesUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesUsingPOSTHook>>>,
    TError,
    { data: MetaIsCodesListUi; params?: ReadConfigurationItemsByMetaIsCodesUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readConfigurationItemsByMetaIsCodesUsingPOST = useReadConfigurationItemsByMetaIsCodesUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesUsingPOSTHook>>>,
        { data: MetaIsCodesListUi; params?: ReadConfigurationItemsByMetaIsCodesUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readConfigurationItemsByMetaIsCodesUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadConfigurationItemsByMetaIsCodesUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesUsingPOSTHook>>>
>
export type ReadConfigurationItemsByMetaIsCodesUsingPOSTMutationBody = MetaIsCodesListUi
export type ReadConfigurationItemsByMetaIsCodesUsingPOSTMutationError = unknown

/**
 * @summary readConfigurationItemsByMetaIsCodes
 */
export const useReadConfigurationItemsByMetaIsCodesUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemsByMetaIsCodesUsingPOSTHook>>>,
        TError,
        { data: MetaIsCodesListUi; params?: ReadConfigurationItemsByMetaIsCodesUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadConfigurationItemsByMetaIsCodesUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readConfigurationItemByMetaIsCode
 */
export const useReadConfigurationItemByMetaIsCodeUsingGETHook = () => {
    const readConfigurationItemByMetaIsCodeUsingGET = useCmdbSwaggerClient<ConfigurationItemUi>()

    return (metaIsCode: string, params?: ReadConfigurationItemByMetaIsCodeUsingGETParams, signal?: AbortSignal) => {
        return readConfigurationItemByMetaIsCodeUsingGET({ url: `/readByMetaIsCode/ci/${metaIsCode}`, method: 'get', params, signal })
    }
}

export const getReadConfigurationItemByMetaIsCodeUsingGETQueryKey = (metaIsCode: string, params?: ReadConfigurationItemByMetaIsCodeUsingGETParams) =>
    [`/readByMetaIsCode/ci/${metaIsCode}`, ...(params ? [params] : [])] as const

export const useReadConfigurationItemByMetaIsCodeUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>,
    TError = void,
>(
    metaIsCode: string,
    params?: ReadConfigurationItemByMetaIsCodeUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadConfigurationItemByMetaIsCodeUsingGETQueryKey(metaIsCode, params)

    const readConfigurationItemByMetaIsCodeUsingGET = useReadConfigurationItemByMetaIsCodeUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>> = ({ signal }) =>
        readConfigurationItemByMetaIsCodeUsingGET(metaIsCode, params, signal)

    return { queryKey, queryFn, enabled: !!metaIsCode, ...queryOptions }
}

export type ReadConfigurationItemByMetaIsCodeUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>
>
export type ReadConfigurationItemByMetaIsCodeUsingGETQueryError = void

/**
 * @summary readConfigurationItemByMetaIsCode
 */
export const useReadConfigurationItemByMetaIsCodeUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>,
    TError = void,
>(
    metaIsCode: string,
    params?: ReadConfigurationItemByMetaIsCodeUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByMetaIsCodeUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadConfigurationItemByMetaIsCodeUsingGETQueryOptions(metaIsCode, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readConfigurationItemByRefID
 */
export const useReadConfigurationItemByRefIDUsingPOSTHook = () => {
    const readConfigurationItemByRefIDUsingPOST = useCmdbSwaggerClient<ReadConfigurationItemByRefIDUsingPOST200 | void>()

    return (readConfigurationItemByRefIDUsingPOSTBody: string, params?: ReadConfigurationItemByRefIDUsingPOSTParams) => {
        return readConfigurationItemByRefIDUsingPOST({
            url: `/readByRefID/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: readConfigurationItemByRefIDUsingPOSTBody,
            params,
        })
    }
}

export const useReadConfigurationItemByRefIDUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDUsingPOSTHook>>>,
        TError,
        { data: string; params?: ReadConfigurationItemByRefIDUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDUsingPOSTHook>>>,
    TError,
    { data: string; params?: ReadConfigurationItemByRefIDUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readConfigurationItemByRefIDUsingPOST = useReadConfigurationItemByRefIDUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDUsingPOSTHook>>>,
        { data: string; params?: ReadConfigurationItemByRefIDUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return readConfigurationItemByRefIDUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadConfigurationItemByRefIDUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDUsingPOSTHook>>>
>
export type ReadConfigurationItemByRefIDUsingPOSTMutationBody = string
export type ReadConfigurationItemByRefIDUsingPOSTMutationError = unknown

/**
 * @summary readConfigurationItemByRefID
 */
export const useReadConfigurationItemByRefIDUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadConfigurationItemByRefIDUsingPOSTHook>>>,
        TError,
        { data: string; params?: ReadConfigurationItemByRefIDUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadConfigurationItemByRefIDUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readGroupItems
 */
export const useReadGroupItemsUsingPOSTHook = () => {
    const readGroupItemsUsingPOST = useCmdbSwaggerClient<ItemSetUi | void>()

    return (uuid: string, groupMembersFilterUi: GroupMembersFilterUi, params?: ReadGroupItemsUsingPOSTParams) => {
        return readGroupItemsUsingPOST({
            url: `/readmembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: groupMembersFilterUi,
            params,
        })
    }
}

export const useReadGroupItemsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadGroupItemsUsingPOSTHook>>>,
        TError,
        { uuid: string; data: GroupMembersFilterUi; params?: ReadGroupItemsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadGroupItemsUsingPOSTHook>>>,
    TError,
    { uuid: string; data: GroupMembersFilterUi; params?: ReadGroupItemsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readGroupItemsUsingPOST = useReadGroupItemsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadGroupItemsUsingPOSTHook>>>,
        { uuid: string; data: GroupMembersFilterUi; params?: ReadGroupItemsUsingPOSTParams }
    > = (props) => {
        const { uuid, data, params } = props ?? {}

        return readGroupItemsUsingPOST(uuid, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadGroupItemsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadGroupItemsUsingPOSTHook>>>>
export type ReadGroupItemsUsingPOSTMutationBody = GroupMembersFilterUi
export type ReadGroupItemsUsingPOSTMutationError = unknown

/**
 * @summary readGroupItems
 */
export const useReadGroupItemsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadGroupItemsUsingPOSTHook>>>,
        TError,
        { uuid: string; data: GroupMembersFilterUi; params?: ReadGroupItemsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReadGroupItemsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary recycleInvalidatedCis
 */
export const useRecycleInvalidatedCisUsingPOSTHook = () => {
    const recycleInvalidatedCisUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (recycleCisUiBody: RecycleCisUiBody, params?: RecycleInvalidatedCisUsingPOSTParams) => {
        return recycleInvalidatedCisUsingPOST({
            url: `/recycle/cis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: recycleCisUiBody,
            params,
        })
    }
}

export const useRecycleInvalidatedCisUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisUsingPOSTHook>>>,
        TError,
        { data: RecycleCisUiBody; params?: RecycleInvalidatedCisUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisUsingPOSTHook>>>,
    TError,
    { data: RecycleCisUiBody; params?: RecycleInvalidatedCisUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedCisUsingPOST = useRecycleInvalidatedCisUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisUsingPOSTHook>>>,
        { data: RecycleCisUiBody; params?: RecycleInvalidatedCisUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return recycleInvalidatedCisUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedCisUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisUsingPOSTHook>>>>
export type RecycleInvalidatedCisUsingPOSTMutationBody = RecycleCisUiBody
export type RecycleInvalidatedCisUsingPOSTMutationError = unknown

/**
 * @summary recycleInvalidatedCis
 */
export const useRecycleInvalidatedCisUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisUsingPOSTHook>>>,
        TError,
        { data: RecycleCisUiBody; params?: RecycleInvalidatedCisUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRecycleInvalidatedCisUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary recycleInvalidatedCisBiznis
 */
export const useRecycleInvalidatedCisBiznisUsingPOSTHook = () => {
    const recycleInvalidatedCisBiznisUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (recycleCisUiBody: RecycleCisUiBody, params?: RecycleInvalidatedCisBiznisUsingPOSTParams) => {
        return recycleInvalidatedCisBiznisUsingPOST({
            url: `/recycle/cis/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: recycleCisUiBody,
            params,
        })
    }
}

export const useRecycleInvalidatedCisBiznisUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisUsingPOSTHook>>>,
        TError,
        { data: RecycleCisUiBody; params?: RecycleInvalidatedCisBiznisUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisUsingPOSTHook>>>,
    TError,
    { data: RecycleCisUiBody; params?: RecycleInvalidatedCisBiznisUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedCisBiznisUsingPOST = useRecycleInvalidatedCisBiznisUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisUsingPOSTHook>>>,
        { data: RecycleCisUiBody; params?: RecycleInvalidatedCisBiznisUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return recycleInvalidatedCisBiznisUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedCisBiznisUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisUsingPOSTHook>>>
>
export type RecycleInvalidatedCisBiznisUsingPOSTMutationBody = RecycleCisUiBody
export type RecycleInvalidatedCisBiznisUsingPOSTMutationError = unknown

/**
 * @summary recycleInvalidatedCisBiznis
 */
export const useRecycleInvalidatedCisBiznisUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedCisBiznisUsingPOSTHook>>>,
        TError,
        { data: RecycleCisUiBody; params?: RecycleInvalidatedCisBiznisUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRecycleInvalidatedCisBiznisUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary recyclePoWithHierarchy
 */
export const useRecyclePoWithHierarchyUsingPOSTHook = () => {
    const recyclePoWithHierarchyUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (poId: string, relId: string, poWithHierarchyUiBody: PoWithHierarchyUiBody, params?: RecyclePoWithHierarchyUsingPOSTParams) => {
        return recyclePoWithHierarchyUsingPOST({
            url: `/recycle/poWithHierarchy/${poId}/${relId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: poWithHierarchyUiBody,
            params,
        })
    }
}

export const useRecyclePoWithHierarchyUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyUsingPOSTHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: RecyclePoWithHierarchyUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyUsingPOSTHook>>>,
    TError,
    { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: RecyclePoWithHierarchyUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const recyclePoWithHierarchyUsingPOST = useRecyclePoWithHierarchyUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyUsingPOSTHook>>>,
        { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: RecyclePoWithHierarchyUsingPOSTParams }
    > = (props) => {
        const { poId, relId, data, params } = props ?? {}

        return recyclePoWithHierarchyUsingPOST(poId, relId, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecyclePoWithHierarchyUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyUsingPOSTHook>>>
>
export type RecyclePoWithHierarchyUsingPOSTMutationBody = PoWithHierarchyUiBody
export type RecyclePoWithHierarchyUsingPOSTMutationError = unknown

/**
 * @summary recyclePoWithHierarchy
 */
export const useRecyclePoWithHierarchyUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecyclePoWithHierarchyUsingPOSTHook>>>,
        TError,
        { poId: string; relId: string; data: PoWithHierarchyUiBody; params?: RecyclePoWithHierarchyUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRecyclePoWithHierarchyUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary recycleInvalidatedRels
 */
export const useRecycleInvalidatedRelsUsingPOSTHook = () => {
    const recycleInvalidatedRelsUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (recycleRelsUiBody: RecycleRelsUiBody, params?: RecycleInvalidatedRelsUsingPOSTParams) => {
        return recycleInvalidatedRelsUsingPOST({
            url: `/recycle/rels`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: recycleRelsUiBody,
            params,
        })
    }
}

export const useRecycleInvalidatedRelsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsUsingPOSTHook>>>,
        TError,
        { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsUsingPOSTHook>>>,
    TError,
    { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedRelsUsingPOST = useRecycleInvalidatedRelsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsUsingPOSTHook>>>,
        { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return recycleInvalidatedRelsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedRelsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsUsingPOSTHook>>>
>
export type RecycleInvalidatedRelsUsingPOSTMutationBody = RecycleRelsUiBody
export type RecycleInvalidatedRelsUsingPOSTMutationError = unknown

/**
 * @summary recycleInvalidatedRels
 */
export const useRecycleInvalidatedRelsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsUsingPOSTHook>>>,
        TError,
        { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRecycleInvalidatedRelsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary recycleInvalidatedRelsBiznis
 */
export const useRecycleInvalidatedRelsBiznisUsingPOSTHook = () => {
    const recycleInvalidatedRelsBiznisUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (recycleRelsUiBody: RecycleRelsUiBody, params?: RecycleInvalidatedRelsBiznisUsingPOSTParams) => {
        return recycleInvalidatedRelsBiznisUsingPOST({
            url: `/recycle/rels/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: recycleRelsUiBody,
            params,
        })
    }
}

export const useRecycleInvalidatedRelsBiznisUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisUsingPOSTHook>>>,
        TError,
        { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsBiznisUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisUsingPOSTHook>>>,
    TError,
    { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsBiznisUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const recycleInvalidatedRelsBiznisUsingPOST = useRecycleInvalidatedRelsBiznisUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisUsingPOSTHook>>>,
        { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsBiznisUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return recycleInvalidatedRelsBiznisUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RecycleInvalidatedRelsBiznisUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisUsingPOSTHook>>>
>
export type RecycleInvalidatedRelsBiznisUsingPOSTMutationBody = RecycleRelsUiBody
export type RecycleInvalidatedRelsBiznisUsingPOSTMutationError = unknown

/**
 * @summary recycleInvalidatedRelsBiznis
 */
export const useRecycleInvalidatedRelsBiznisUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRecycleInvalidatedRelsBiznisUsingPOSTHook>>>,
        TError,
        { data: RecycleRelsUiBody; params?: RecycleInvalidatedRelsBiznisUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRecycleInvalidatedRelsBiznisUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary removeGroup
 */
export const useRemoveGroupUsingPOSTHook = () => {
    const removeGroupUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (uuid: string, params?: RemoveGroupUsingPOSTParams) => {
        return removeGroupUsingPOST({ url: `/remove/group/${uuid}`, method: 'post', params })
    }
}

export const useRemoveGroupUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveGroupUsingPOSTHook>>>,
        TError,
        { uuid: string; params?: RemoveGroupUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRemoveGroupUsingPOSTHook>>>,
    TError,
    { uuid: string; params?: RemoveGroupUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeGroupUsingPOST = useRemoveGroupUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRemoveGroupUsingPOSTHook>>>,
        { uuid: string; params?: RemoveGroupUsingPOSTParams }
    > = (props) => {
        const { uuid, params } = props ?? {}

        return removeGroupUsingPOST(uuid, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveGroupUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRemoveGroupUsingPOSTHook>>>>

export type RemoveGroupUsingPOSTMutationError = unknown

/**
 * @summary removeGroup
 */
export const useRemoveGroupUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveGroupUsingPOSTHook>>>,
        TError,
        { uuid: string; params?: RemoveGroupUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRemoveGroupUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary removeCiFromGroup
 */
export const useRemoveCiFromGroupUsingPOSTHook = () => {
    const removeCiFromGroupUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (uuid: string, removeCiFromGroupUsingPOSTBody: string[], params?: RemoveCiFromGroupUsingPOSTParams) => {
        return removeCiFromGroupUsingPOST({
            url: `/removemembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: removeCiFromGroupUsingPOSTBody,
            params,
        })
    }
}

export const useRemoveCiFromGroupUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupUsingPOSTHook>>>,
        TError,
        { uuid: string; data: string[]; params?: RemoveCiFromGroupUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupUsingPOSTHook>>>,
    TError,
    { uuid: string; data: string[]; params?: RemoveCiFromGroupUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeCiFromGroupUsingPOST = useRemoveCiFromGroupUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupUsingPOSTHook>>>,
        { uuid: string; data: string[]; params?: RemoveCiFromGroupUsingPOSTParams }
    > = (props) => {
        const { uuid, data, params } = props ?? {}

        return removeCiFromGroupUsingPOST(uuid, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveCiFromGroupUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupUsingPOSTHook>>>>
export type RemoveCiFromGroupUsingPOSTMutationBody = string[]
export type RemoveCiFromGroupUsingPOSTMutationError = unknown

/**
 * @summary removeCiFromGroup
 */
export const useRemoveCiFromGroupUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveCiFromGroupUsingPOSTHook>>>,
        TError,
        { uuid: string; data: string[]; params?: RemoveCiFromGroupUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRemoveCiFromGroupUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readReportsWithFilter
 */
export const useReadReportsWithFilterUsingGETHook = () => {
    const readReportsWithFilterUsingGET = useCmdbSwaggerClient<ReportHolderUi>()

    return (params?: ReadReportsWithFilterUsingGETParams, signal?: AbortSignal) => {
        return readReportsWithFilterUsingGET({ url: `/reports`, method: 'get', params, signal })
    }
}

export const getReadReportsWithFilterUsingGETQueryKey = (params?: ReadReportsWithFilterUsingGETParams) =>
    [`/reports`, ...(params ? [params] : [])] as const

export const useReadReportsWithFilterUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>,
    TError = void,
>(
    params?: ReadReportsWithFilterUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadReportsWithFilterUsingGETQueryKey(params)

    const readReportsWithFilterUsingGET = useReadReportsWithFilterUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>> = ({ signal }) =>
        readReportsWithFilterUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadReportsWithFilterUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>>
export type ReadReportsWithFilterUsingGETQueryError = void

/**
 * @summary readReportsWithFilter
 */
export const useReadReportsWithFilterUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>, TError = void>(
    params?: ReadReportsWithFilterUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadReportsWithFilterUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadReportsWithFilterUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getRequestStatus
 */
export const useGetRequestStatusUsingGETHook = () => {
    const getRequestStatusUsingGET = useCmdbSwaggerClient<RequestStatusResultUi>()

    return (requestId: string, signal?: AbortSignal) => {
        return getRequestStatusUsingGET({ url: `/request-tracking/${requestId}`, method: 'get', signal })
    }
}

export const getGetRequestStatusUsingGETQueryKey = (requestId: string) => [`/request-tracking/${requestId}`] as const

export const useGetRequestStatusUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>,
    TError = void,
>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetRequestStatusUsingGETQueryKey(requestId)

    const getRequestStatusUsingGET = useGetRequestStatusUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>> = ({ signal }) =>
        getRequestStatusUsingGET(requestId, signal)

    return { queryKey, queryFn, enabled: !!requestId, ...queryOptions }
}

export type GetRequestStatusUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>>
export type GetRequestStatusUsingGETQueryError = void

/**
 * @summary getRequestStatus
 */
export const useGetRequestStatusUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>, TError = void>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetRequestStatusUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetRequestStatusUsingGETQueryOptions(requestId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary readCiList
 */
export const useReadCiListUsingPOST1Hook = () => {
    const readCiListUsingPOST1 = useCmdbSwaggerClient<HierarchyRightsResultUi | void>()

    return (hierarchyPOFilterUi: HierarchyPOFilterUi, params?: ReadCiListUsingPOST1Params) => {
        return readCiListUsingPOST1({
            url: `/rights/implicitHierarchy`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: hierarchyPOFilterUi,
            params,
        })
    }
}

export const useReadCiListUsingPOST1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOST1Hook>>>,
        TError,
        { data: HierarchyPOFilterUi; params?: ReadCiListUsingPOST1Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOST1Hook>>>,
    TError,
    { data: HierarchyPOFilterUi; params?: ReadCiListUsingPOST1Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const readCiListUsingPOST1 = useReadCiListUsingPOST1Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOST1Hook>>>,
        { data: HierarchyPOFilterUi; params?: ReadCiListUsingPOST1Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return readCiListUsingPOST1(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReadCiListUsingPOST1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOST1Hook>>>>
export type ReadCiListUsingPOST1MutationBody = HierarchyPOFilterUi
export type ReadCiListUsingPOST1MutationError = unknown

/**
 * @summary readCiList
 */
export const useReadCiListUsingPOST1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReadCiListUsingPOST1Hook>>>,
        TError,
        { data: HierarchyPOFilterUi; params?: ReadCiListUsingPOST1Params },
        TContext
    >
}) => {
    const mutationOptions = useReadCiListUsingPOST1MutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandard
 */
export const useDeleteStandardUsingDELETEHook = () => {
    const deleteStandardUsingDELETE = useCmdbSwaggerClient<void>()

    return (params?: DeleteStandardUsingDELETEParams) => {
        return deleteStandardUsingDELETE({ url: `/standard`, method: 'delete', params })
    }
}

export const useDeleteStandardUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardUsingDELETEParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardUsingDELETEHook>>>,
    TError,
    { params?: DeleteStandardUsingDELETEParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardUsingDELETE = useDeleteStandardUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardUsingDELETEHook>>>,
        { params?: DeleteStandardUsingDELETEParams }
    > = (props) => {
        const { params } = props ?? {}

        return deleteStandardUsingDELETE(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardUsingDELETEHook>>>>

export type DeleteStandardUsingDELETEMutationError = unknown

/**
 * @summary deleteStandard
 */
export const useDeleteStandardUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardUsingDELETEParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readMeetingRequestsFromStandard
 */
export const useReadMeetingRequestsFromStandardUsingGETHook = () => {
    const readMeetingRequestsFromStandardUsingGET = useCmdbSwaggerClient<MeetingRequestListUi>()

    return (params?: ReadMeetingRequestsFromStandardUsingGETParams, signal?: AbortSignal) => {
        return readMeetingRequestsFromStandardUsingGET({ url: `/standard/meetingRequests`, method: 'get', params, signal })
    }
}

export const getReadMeetingRequestsFromStandardUsingGETQueryKey = (params?: ReadMeetingRequestsFromStandardUsingGETParams) =>
    [`/standard/meetingRequests`, ...(params ? [params] : [])] as const

export const useReadMeetingRequestsFromStandardUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>,
    TError = void,
>(
    params?: ReadMeetingRequestsFromStandardUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadMeetingRequestsFromStandardUsingGETQueryKey(params)

    const readMeetingRequestsFromStandardUsingGET = useReadMeetingRequestsFromStandardUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>> = ({ signal }) =>
        readMeetingRequestsFromStandardUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadMeetingRequestsFromStandardUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>
>
export type ReadMeetingRequestsFromStandardUsingGETQueryError = void

/**
 * @summary readMeetingRequestsFromStandard
 */
export const useReadMeetingRequestsFromStandardUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>,
    TError = void,
>(
    params?: ReadMeetingRequestsFromStandardUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadMeetingRequestsFromStandardUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadMeetingRequestsFromStandardUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary storeStandardMeetingRequests
 */
export const useStoreStandardMeetingRequestsUsingPOSTHook = () => {
    const storeStandardMeetingRequestsUsingPOST = useCmdbSwaggerClient<void>()

    return (meetingRequestListUi: MeetingRequestListUi, params?: StoreStandardMeetingRequestsUsingPOSTParams) => {
        return storeStandardMeetingRequestsUsingPOST({
            url: `/standard/meetingRequests`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: meetingRequestListUi,
            params,
        })
    }
}

export const useStoreStandardMeetingRequestsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsUsingPOSTHook>>>,
        TError,
        { data: MeetingRequestListUi; params?: StoreStandardMeetingRequestsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsUsingPOSTHook>>>,
    TError,
    { data: MeetingRequestListUi; params?: StoreStandardMeetingRequestsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeStandardMeetingRequestsUsingPOST = useStoreStandardMeetingRequestsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsUsingPOSTHook>>>,
        { data: MeetingRequestListUi; params?: StoreStandardMeetingRequestsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeStandardMeetingRequestsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreStandardMeetingRequestsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsUsingPOSTHook>>>
>
export type StoreStandardMeetingRequestsUsingPOSTMutationBody = MeetingRequestListUi
export type StoreStandardMeetingRequestsUsingPOSTMutationError = unknown

/**
 * @summary storeStandardMeetingRequests
 */
export const useStoreStandardMeetingRequestsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardMeetingRequestsUsingPOSTHook>>>,
        TError,
        { data: MeetingRequestListUi; params?: StoreStandardMeetingRequestsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreStandardMeetingRequestsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandardMeetingRequests
 */
export const useDeleteStandardMeetingRequestsUsingDELETEHook = () => {
    const deleteStandardMeetingRequestsUsingDELETE = useCmdbSwaggerClient<void>()

    return (params?: DeleteStandardMeetingRequestsUsingDELETEParams) => {
        return deleteStandardMeetingRequestsUsingDELETE({ url: `/standard/meetingRequests`, method: 'delete', params })
    }
}

export const useDeleteStandardMeetingRequestsUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardMeetingRequestsUsingDELETEParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingDELETEHook>>>,
    TError,
    { params?: DeleteStandardMeetingRequestsUsingDELETEParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardMeetingRequestsUsingDELETE = useDeleteStandardMeetingRequestsUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingDELETEHook>>>,
        { params?: DeleteStandardMeetingRequestsUsingDELETEParams }
    > = (props) => {
        const { params } = props ?? {}

        return deleteStandardMeetingRequestsUsingDELETE(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardMeetingRequestsUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingDELETEHook>>>
>

export type DeleteStandardMeetingRequestsUsingDELETEMutationError = unknown

/**
 * @summary deleteStandardMeetingRequests
 */
export const useDeleteStandardMeetingRequestsUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardMeetingRequestsUsingDELETEParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardMeetingRequestsUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandardMeetingRequests
 */
export const useDeleteStandardMeetingRequestsUsingPOSTHook = () => {
    const deleteStandardMeetingRequestsUsingPOST = useCmdbSwaggerClient<void>()

    return (
        deleteStandardMeetingRequestsUsingPOSTDeleteidsBody: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody,
        params?: DeleteStandardMeetingRequestsUsingPOSTParams,
    ) => {
        return deleteStandardMeetingRequestsUsingPOST({
            url: `/standard/meetingRequests/delete`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: deleteStandardMeetingRequestsUsingPOSTDeleteidsBody,
            params,
        })
    }
}

export const useDeleteStandardMeetingRequestsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingPOSTHook>>>,
        TError,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardMeetingRequestsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingPOSTHook>>>,
    TError,
    { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardMeetingRequestsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardMeetingRequestsUsingPOST = useDeleteStandardMeetingRequestsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingPOSTHook>>>,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardMeetingRequestsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return deleteStandardMeetingRequestsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardMeetingRequestsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingPOSTHook>>>
>
export type DeleteStandardMeetingRequestsUsingPOSTMutationBody = DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody
export type DeleteStandardMeetingRequestsUsingPOSTMutationError = unknown

/**
 * @summary deleteStandardMeetingRequests
 */
export const useDeleteStandardMeetingRequestsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardMeetingRequestsUsingPOSTHook>>>,
        TError,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardMeetingRequestsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardMeetingRequestsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readStandardRequestsFromStandard
 */
export const useReadStandardRequestsFromStandardUsingGETHook = () => {
    const readStandardRequestsFromStandardUsingGET = useCmdbSwaggerClient<StandardRequestListUi>()

    return (params?: ReadStandardRequestsFromStandardUsingGETParams, signal?: AbortSignal) => {
        return readStandardRequestsFromStandardUsingGET({ url: `/standard/standardRequests`, method: 'get', params, signal })
    }
}

export const getReadStandardRequestsFromStandardUsingGETQueryKey = (params?: ReadStandardRequestsFromStandardUsingGETParams) =>
    [`/standard/standardRequests`, ...(params ? [params] : [])] as const

export const useReadStandardRequestsFromStandardUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>,
    TError = void,
>(
    params?: ReadStandardRequestsFromStandardUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>, TError, TData> & {
    queryKey: QueryKey
} => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadStandardRequestsFromStandardUsingGETQueryKey(params)

    const readStandardRequestsFromStandardUsingGET = useReadStandardRequestsFromStandardUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>> = ({ signal }) =>
        readStandardRequestsFromStandardUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadStandardRequestsFromStandardUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>
>
export type ReadStandardRequestsFromStandardUsingGETQueryError = void

/**
 * @summary readStandardRequestsFromStandard
 */
export const useReadStandardRequestsFromStandardUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>,
    TError = void,
>(
    params?: ReadStandardRequestsFromStandardUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadStandardRequestsFromStandardUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadStandardRequestsFromStandardUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary storeStandardStandardRequests
 */
export const useStoreStandardStandardRequestsUsingPOSTHook = () => {
    const storeStandardStandardRequestsUsingPOST = useCmdbSwaggerClient<void>()

    return (standardRequestListUi: StandardRequestListUi, params?: StoreStandardStandardRequestsUsingPOSTParams) => {
        return storeStandardStandardRequestsUsingPOST({
            url: `/standard/standardRequests`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: standardRequestListUi,
            params,
        })
    }
}

export const useStoreStandardStandardRequestsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsUsingPOSTHook>>>,
        TError,
        { data: StandardRequestListUi; params?: StoreStandardStandardRequestsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsUsingPOSTHook>>>,
    TError,
    { data: StandardRequestListUi; params?: StoreStandardStandardRequestsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeStandardStandardRequestsUsingPOST = useStoreStandardStandardRequestsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsUsingPOSTHook>>>,
        { data: StandardRequestListUi; params?: StoreStandardStandardRequestsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeStandardStandardRequestsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreStandardStandardRequestsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsUsingPOSTHook>>>
>
export type StoreStandardStandardRequestsUsingPOSTMutationBody = StandardRequestListUi
export type StoreStandardStandardRequestsUsingPOSTMutationError = unknown

/**
 * @summary storeStandardStandardRequests
 */
export const useStoreStandardStandardRequestsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardStandardRequestsUsingPOSTHook>>>,
        TError,
        { data: StandardRequestListUi; params?: StoreStandardStandardRequestsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreStandardStandardRequestsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandardStandard
 */
export const useDeleteStandardStandardUsingDELETEHook = () => {
    const deleteStandardStandardUsingDELETE = useCmdbSwaggerClient<void>()

    return (params?: DeleteStandardStandardUsingDELETEParams) => {
        return deleteStandardStandardUsingDELETE({ url: `/standard/standardRequests`, method: 'delete', params })
    }
}

export const useDeleteStandardStandardUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardStandardUsingDELETEParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardUsingDELETEHook>>>,
    TError,
    { params?: DeleteStandardStandardUsingDELETEParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardStandardUsingDELETE = useDeleteStandardStandardUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardUsingDELETEHook>>>,
        { params?: DeleteStandardStandardUsingDELETEParams }
    > = (props) => {
        const { params } = props ?? {}

        return deleteStandardStandardUsingDELETE(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardStandardUsingDELETEMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardUsingDELETEHook>>>
>

export type DeleteStandardStandardUsingDELETEMutationError = unknown

/**
 * @summary deleteStandardStandard
 */
export const useDeleteStandardStandardUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardStandardUsingDELETEParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardStandardUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandardStandardRequests
 */
export const useDeleteStandardStandardRequestsUsingPOSTHook = () => {
    const deleteStandardStandardRequestsUsingPOST = useCmdbSwaggerClient<void>()

    return (
        deleteStandardMeetingRequestsUsingPOSTDeleteidsBody: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody,
        params?: DeleteStandardStandardRequestsUsingPOSTParams,
    ) => {
        return deleteStandardStandardRequestsUsingPOST({
            url: `/standard/standardRequests/delete`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: deleteStandardMeetingRequestsUsingPOSTDeleteidsBody,
            params,
        })
    }
}

export const useDeleteStandardStandardRequestsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsUsingPOSTHook>>>,
        TError,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardStandardRequestsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsUsingPOSTHook>>>,
    TError,
    { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardStandardRequestsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardStandardRequestsUsingPOST = useDeleteStandardStandardRequestsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsUsingPOSTHook>>>,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardStandardRequestsUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return deleteStandardStandardRequestsUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardStandardRequestsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsUsingPOSTHook>>>
>
export type DeleteStandardStandardRequestsUsingPOSTMutationBody = DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody
export type DeleteStandardStandardRequestsUsingPOSTMutationError = unknown

/**
 * @summary deleteStandardStandardRequests
 */
export const useDeleteStandardStandardRequestsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardStandardRequestsUsingPOSTHook>>>,
        TError,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardStandardRequestsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardStandardRequestsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary readVotesFromStandard
 */
export const useReadVotesFromStandardUsingGETHook = () => {
    const readVotesFromStandardUsingGET = useCmdbSwaggerClient<VoteListUi>()

    return (params?: ReadVotesFromStandardUsingGETParams, signal?: AbortSignal) => {
        return readVotesFromStandardUsingGET({ url: `/standard/votes`, method: 'get', params, signal })
    }
}

export const getReadVotesFromStandardUsingGETQueryKey = (params?: ReadVotesFromStandardUsingGETParams) =>
    [`/standard/votes`, ...(params ? [params] : [])] as const

export const useReadVotesFromStandardUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>,
    TError = void,
>(
    params?: ReadVotesFromStandardUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadVotesFromStandardUsingGETQueryKey(params)

    const readVotesFromStandardUsingGET = useReadVotesFromStandardUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>> = ({ signal }) =>
        readVotesFromStandardUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ReadVotesFromStandardUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>>
export type ReadVotesFromStandardUsingGETQueryError = void

/**
 * @summary readVotesFromStandard
 */
export const useReadVotesFromStandardUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>, TError = void>(
    params?: ReadVotesFromStandardUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadVotesFromStandardUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadVotesFromStandardUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary storeStandardVotes
 */
export const useStoreStandardVotesUsingPOSTHook = () => {
    const storeStandardVotesUsingPOST = useCmdbSwaggerClient<void>()

    return (voteListUi: VoteListUi, params?: StoreStandardVotesUsingPOSTParams) => {
        return storeStandardVotesUsingPOST({
            url: `/standard/votes`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: voteListUi,
            params,
        })
    }
}

export const useStoreStandardVotesUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesUsingPOSTHook>>>,
        TError,
        { data: VoteListUi; params?: StoreStandardVotesUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesUsingPOSTHook>>>,
    TError,
    { data: VoteListUi; params?: StoreStandardVotesUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeStandardVotesUsingPOST = useStoreStandardVotesUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesUsingPOSTHook>>>,
        { data: VoteListUi; params?: StoreStandardVotesUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeStandardVotesUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreStandardVotesUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesUsingPOSTHook>>>>
export type StoreStandardVotesUsingPOSTMutationBody = VoteListUi
export type StoreStandardVotesUsingPOSTMutationError = unknown

/**
 * @summary storeStandardVotes
 */
export const useStoreStandardVotesUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreStandardVotesUsingPOSTHook>>>,
        TError,
        { data: VoteListUi; params?: StoreStandardVotesUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreStandardVotesUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandardVotes
 */
export const useDeleteStandardVotesUsingDELETEHook = () => {
    const deleteStandardVotesUsingDELETE = useCmdbSwaggerClient<void>()

    return (params?: DeleteStandardVotesUsingDELETEParams) => {
        return deleteStandardVotesUsingDELETE({ url: `/standard/votes`, method: 'delete', params })
    }
}

export const useDeleteStandardVotesUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardVotesUsingDELETEParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingDELETEHook>>>,
    TError,
    { params?: DeleteStandardVotesUsingDELETEParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardVotesUsingDELETE = useDeleteStandardVotesUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingDELETEHook>>>,
        { params?: DeleteStandardVotesUsingDELETEParams }
    > = (props) => {
        const { params } = props ?? {}

        return deleteStandardVotesUsingDELETE(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardVotesUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingDELETEHook>>>>

export type DeleteStandardVotesUsingDELETEMutationError = unknown

/**
 * @summary deleteStandardVotes
 */
export const useDeleteStandardVotesUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingDELETEHook>>>,
        TError,
        { params?: DeleteStandardVotesUsingDELETEParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardVotesUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary deleteStandardVotes
 */
export const useDeleteStandardVotesUsingPOSTHook = () => {
    const deleteStandardVotesUsingPOST = useCmdbSwaggerClient<void>()

    return (
        deleteStandardMeetingRequestsUsingPOSTDeleteidsBody: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody,
        params?: DeleteStandardVotesUsingPOSTParams,
    ) => {
        return deleteStandardVotesUsingPOST({
            url: `/standard/votes/delete`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: deleteStandardMeetingRequestsUsingPOSTDeleteidsBody,
            params,
        })
    }
}

export const useDeleteStandardVotesUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingPOSTHook>>>,
        TError,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardVotesUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingPOSTHook>>>,
    TError,
    { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardVotesUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const deleteStandardVotesUsingPOST = useDeleteStandardVotesUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingPOSTHook>>>,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardVotesUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return deleteStandardVotesUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteStandardVotesUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingPOSTHook>>>>
export type DeleteStandardVotesUsingPOSTMutationBody = DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody
export type DeleteStandardVotesUsingPOSTMutationError = unknown

/**
 * @summary deleteStandardVotes
 */
export const useDeleteStandardVotesUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useDeleteStandardVotesUsingPOSTHook>>>,
        TError,
        { data: DeleteStandardMeetingRequestsUsingPOSTDeleteidsBody; params?: DeleteStandardVotesUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useDeleteStandardVotesUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeConfigurationItem
 */
export const useStoreConfigurationItemUsingPOSTHook = () => {
    const storeConfigurationItemUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (configurationItemUiBody: ConfigurationItemUiBody, params?: StoreConfigurationItemUsingPOSTParams) => {
        return storeConfigurationItemUsingPOST({
            url: `/store/ci`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemUiBody,
            params,
        })
    }
}

export const useStoreConfigurationItemUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemUiBody; params?: StoreConfigurationItemUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemUsingPOSTHook>>>,
    TError,
    { data: ConfigurationItemUiBody; params?: StoreConfigurationItemUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeConfigurationItemUsingPOST = useStoreConfigurationItemUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemUsingPOSTHook>>>,
        { data: ConfigurationItemUiBody; params?: StoreConfigurationItemUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeConfigurationItemUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreConfigurationItemUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemUsingPOSTHook>>>
>
export type StoreConfigurationItemUsingPOSTMutationBody = ConfigurationItemUiBody
export type StoreConfigurationItemUsingPOSTMutationError = unknown

/**
 * @summary storeConfigurationItem
 */
export const useStoreConfigurationItemUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemUiBody; params?: StoreConfigurationItemUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreConfigurationItemUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeConfigurationItemBiznis
 */
export const useStoreConfigurationItemBiznisUsingPOSTHook = () => {
    const storeConfigurationItemBiznisUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (configurationItemUiBody: ConfigurationItemUiBody, params?: StoreConfigurationItemBiznisUsingPOSTParams) => {
        return storeConfigurationItemBiznisUsingPOST({
            url: `/store/ci/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: configurationItemUiBody,
            params,
        })
    }
}

export const useStoreConfigurationItemBiznisUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemUiBody; params?: StoreConfigurationItemBiznisUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisUsingPOSTHook>>>,
    TError,
    { data: ConfigurationItemUiBody; params?: StoreConfigurationItemBiznisUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeConfigurationItemBiznisUsingPOST = useStoreConfigurationItemBiznisUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisUsingPOSTHook>>>,
        { data: ConfigurationItemUiBody; params?: StoreConfigurationItemBiznisUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeConfigurationItemBiznisUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreConfigurationItemBiznisUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisUsingPOSTHook>>>
>
export type StoreConfigurationItemBiznisUsingPOSTMutationBody = ConfigurationItemUiBody
export type StoreConfigurationItemBiznisUsingPOSTMutationError = unknown

/**
 * @summary storeConfigurationItemBiznis
 */
export const useStoreConfigurationItemBiznisUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreConfigurationItemBiznisUsingPOSTHook>>>,
        TError,
        { data: ConfigurationItemUiBody; params?: StoreConfigurationItemBiznisUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreConfigurationItemBiznisUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeGraph
 */
export const useStoreGraphUsingPOSTHook = () => {
    const storeGraphUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (graphRequestUiBody: GraphRequestUiBody, params?: StoreGraphUsingPOSTParams) => {
        return storeGraphUsingPOST({
            url: `/store/graph`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: graphRequestUiBody,
            params,
        })
    }
}

export const useStoreGraphUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGraphUsingPOSTHook>>>,
        TError,
        { data: GraphRequestUiBody; params?: StoreGraphUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreGraphUsingPOSTHook>>>,
    TError,
    { data: GraphRequestUiBody; params?: StoreGraphUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGraphUsingPOST = useStoreGraphUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreGraphUsingPOSTHook>>>,
        { data: GraphRequestUiBody; params?: StoreGraphUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeGraphUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGraphUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGraphUsingPOSTHook>>>>
export type StoreGraphUsingPOSTMutationBody = GraphRequestUiBody
export type StoreGraphUsingPOSTMutationError = unknown

/**
 * @summary storeGraph
 */
export const useStoreGraphUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGraphUsingPOSTHook>>>,
        TError,
        { data: GraphRequestUiBody; params?: StoreGraphUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreGraphUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeGraphBiznis
 */
export const useStoreGraphBiznisUsingPOSTHook = () => {
    const storeGraphBiznisUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (graphRequestUiBody: GraphRequestUiBody, params?: StoreGraphBiznisUsingPOSTParams) => {
        return storeGraphBiznisUsingPOST({
            url: `/store/graph/biznis`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: graphRequestUiBody,
            params,
        })
    }
}

export const useStoreGraphBiznisUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisUsingPOSTHook>>>,
        TError,
        { data: GraphRequestUiBody; params?: StoreGraphBiznisUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisUsingPOSTHook>>>,
    TError,
    { data: GraphRequestUiBody; params?: StoreGraphBiznisUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGraphBiznisUsingPOST = useStoreGraphBiznisUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisUsingPOSTHook>>>,
        { data: GraphRequestUiBody; params?: StoreGraphBiznisUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeGraphBiznisUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGraphBiznisUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisUsingPOSTHook>>>>
export type StoreGraphBiznisUsingPOSTMutationBody = GraphRequestUiBody
export type StoreGraphBiznisUsingPOSTMutationError = unknown

/**
 * @summary storeGraphBiznis
 */
export const useStoreGraphBiznisUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGraphBiznisUsingPOSTHook>>>,
        TError,
        { data: GraphRequestUiBody; params?: StoreGraphBiznisUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreGraphBiznisUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeGroup
 */
export const useStoreGroupUsingPOSTHook = () => {
    const storeGroupUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (groupUi: GroupUi, params?: StoreGroupUsingPOSTParams) => {
        return storeGroupUsingPOST({ url: `/store/group`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: groupUi, params })
    }
}

export const useStoreGroupUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupUsingPOSTHook>>>,
        TError,
        { data: GroupUi; params?: StoreGroupUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreGroupUsingPOSTHook>>>,
    TError,
    { data: GroupUi; params?: StoreGroupUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGroupUsingPOST = useStoreGroupUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupUsingPOSTHook>>>,
        { data: GroupUi; params?: StoreGroupUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeGroupUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGroupUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGroupUsingPOSTHook>>>>
export type StoreGroupUsingPOSTMutationBody = GroupUi
export type StoreGroupUsingPOSTMutationError = unknown

/**
 * @summary storeGroup
 */
export const useStoreGroupUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupUsingPOSTHook>>>,
        TError,
        { data: GroupUi; params?: StoreGroupUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreGroupUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeManagerToGroup
 */
export const useStoreManagerToGroupUsingPOSTHook = () => {
    const storeManagerToGroupUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (group: string, uuid: string, params?: StoreManagerToGroupUsingPOSTParams) => {
        return storeManagerToGroupUsingPOST({ url: `/store/group/${group}/add/${uuid}`, method: 'post', params })
    }
}

export const useStoreManagerToGroupUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupUsingPOSTHook>>>,
        TError,
        { group: string; uuid: string; params?: StoreManagerToGroupUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupUsingPOSTHook>>>,
    TError,
    { group: string; uuid: string; params?: StoreManagerToGroupUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeManagerToGroupUsingPOST = useStoreManagerToGroupUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupUsingPOSTHook>>>,
        { group: string; uuid: string; params?: StoreManagerToGroupUsingPOSTParams }
    > = (props) => {
        const { group, uuid, params } = props ?? {}

        return storeManagerToGroupUsingPOST(group, uuid, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreManagerToGroupUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupUsingPOSTHook>>>>

export type StoreManagerToGroupUsingPOSTMutationError = unknown

/**
 * @summary storeManagerToGroup
 */
export const useStoreManagerToGroupUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreManagerToGroupUsingPOSTHook>>>,
        TError,
        { group: string; uuid: string; params?: StoreManagerToGroupUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreManagerToGroupUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary removeManagerFromGroup
 */
export const useRemoveManagerFromGroupUsingPOSTHook = () => {
    const removeManagerFromGroupUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (group: string, uuid: string, params?: RemoveManagerFromGroupUsingPOSTParams) => {
        return removeManagerFromGroupUsingPOST({ url: `/store/group/${group}/remove/${uuid}`, method: 'post', params })
    }
}

export const useRemoveManagerFromGroupUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupUsingPOSTHook>>>,
        TError,
        { group: string; uuid: string; params?: RemoveManagerFromGroupUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupUsingPOSTHook>>>,
    TError,
    { group: string; uuid: string; params?: RemoveManagerFromGroupUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const removeManagerFromGroupUsingPOST = useRemoveManagerFromGroupUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupUsingPOSTHook>>>,
        { group: string; uuid: string; params?: RemoveManagerFromGroupUsingPOSTParams }
    > = (props) => {
        const { group, uuid, params } = props ?? {}

        return removeManagerFromGroupUsingPOST(group, uuid, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type RemoveManagerFromGroupUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupUsingPOSTHook>>>
>

export type RemoveManagerFromGroupUsingPOSTMutationError = unknown

/**
 * @summary removeManagerFromGroup
 */
export const useRemoveManagerFromGroupUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useRemoveManagerFromGroupUsingPOSTHook>>>,
        TError,
        { group: string; uuid: string; params?: RemoveManagerFromGroupUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useRemoveManagerFromGroupUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeCiNeighboursSU
 */
export const useStoreCiNeighboursSUUsingPOSTHook = () => {
    const storeCiNeighboursSUUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (programMetaCode: string, params?: StoreCiNeighboursSUUsingPOSTParams) => {
        return storeCiNeighboursSUUsingPOST({ url: `/store/projects/programRelations/${programMetaCode}`, method: 'post', params })
    }
}

export const useStoreCiNeighboursSUUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUUsingPOSTHook>>>,
        TError,
        { programMetaCode: string; params?: StoreCiNeighboursSUUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUUsingPOSTHook>>>,
    TError,
    { programMetaCode: string; params?: StoreCiNeighboursSUUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeCiNeighboursSUUsingPOST = useStoreCiNeighboursSUUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUUsingPOSTHook>>>,
        { programMetaCode: string; params?: StoreCiNeighboursSUUsingPOSTParams }
    > = (props) => {
        const { programMetaCode, params } = props ?? {}

        return storeCiNeighboursSUUsingPOST(programMetaCode, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreCiNeighboursSUUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUUsingPOSTHook>>>>

export type StoreCiNeighboursSUUsingPOSTMutationError = unknown

/**
 * @summary storeCiNeighboursSU
 */
export const useStoreCiNeighboursSUUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreCiNeighboursSUUsingPOSTHook>>>,
        TError,
        { programMetaCode: string; params?: StoreCiNeighboursSUUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreCiNeighboursSUUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeRelationship
 */
export const useStoreRelationshipUsingPOSTHook = () => {
    const storeRelationshipUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (relationshipUiBody: RelationshipUiBody, params?: StoreRelationshipUsingPOSTParams) => {
        return storeRelationshipUsingPOST({
            url: `/store/relation`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: relationshipUiBody,
            params,
        })
    }
}

export const useStoreRelationshipUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreRelationshipUsingPOSTHook>>>,
        TError,
        { data: RelationshipUiBody; params?: StoreRelationshipUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreRelationshipUsingPOSTHook>>>,
    TError,
    { data: RelationshipUiBody; params?: StoreRelationshipUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeRelationshipUsingPOST = useStoreRelationshipUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreRelationshipUsingPOSTHook>>>,
        { data: RelationshipUiBody; params?: StoreRelationshipUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return storeRelationshipUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreRelationshipUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreRelationshipUsingPOSTHook>>>>
export type StoreRelationshipUsingPOSTMutationBody = RelationshipUiBody
export type StoreRelationshipUsingPOSTMutationError = unknown

/**
 * @summary storeRelationship
 */
export const useStoreRelationshipUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreRelationshipUsingPOSTHook>>>,
        TError,
        { data: RelationshipUiBody; params?: StoreRelationshipUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreRelationshipUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary storeGroupItems
 */
export const useStoreGroupItemsUsingPOSTHook = () => {
    const storeGroupItemsUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (uuid: string, storeGroupMembersSetUi: StoreGroupMembersSetUi, params?: StoreGroupItemsUsingPOSTParams) => {
        return storeGroupItemsUsingPOST({
            url: `/storemembers/group/${uuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: storeGroupMembersSetUi,
            params,
        })
    }
}

export const useStoreGroupItemsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsUsingPOSTHook>>>,
        TError,
        { uuid: string; data: StoreGroupMembersSetUi; params?: StoreGroupItemsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsUsingPOSTHook>>>,
    TError,
    { uuid: string; data: StoreGroupMembersSetUi; params?: StoreGroupItemsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const storeGroupItemsUsingPOST = useStoreGroupItemsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsUsingPOSTHook>>>,
        { uuid: string; data: StoreGroupMembersSetUi; params?: StoreGroupItemsUsingPOSTParams }
    > = (props) => {
        const { uuid, data, params } = props ?? {}

        return storeGroupItemsUsingPOST(uuid, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type StoreGroupItemsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsUsingPOSTHook>>>>
export type StoreGroupItemsUsingPOSTMutationBody = StoreGroupMembersSetUi
export type StoreGroupItemsUsingPOSTMutationError = unknown

/**
 * @summary storeGroupItems
 */
export const useStoreGroupItemsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useStoreGroupItemsUsingPOSTHook>>>,
        TError,
        { uuid: string; data: StoreGroupMembersSetUi; params?: StoreGroupItemsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useStoreGroupItemsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary ciRelTypesIntegrityCheck
 */
export const useCiRelTypesIntegrityCheckUsingGETHook = () => {
    const ciRelTypesIntegrityCheckUsingGET = useCmdbSwaggerClient<CiRelTypesIntegrityCheckUsingGET200>()

    return (signal?: AbortSignal) => {
        return ciRelTypesIntegrityCheckUsingGET({ url: `/util/ciRelTypesIntegrityCheck`, method: 'get', signal })
    }
}

export const getCiRelTypesIntegrityCheckUsingGETQueryKey = () => [`/util/ciRelTypesIntegrityCheck`] as const

export const useCiRelTypesIntegrityCheckUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getCiRelTypesIntegrityCheckUsingGETQueryKey()

    const ciRelTypesIntegrityCheckUsingGET = useCiRelTypesIntegrityCheckUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>> = ({ signal }) =>
        ciRelTypesIntegrityCheckUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type CiRelTypesIntegrityCheckUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>>
export type CiRelTypesIntegrityCheckUsingGETQueryError = void

/**
 * @summary ciRelTypesIntegrityCheck
 */
export const useCiRelTypesIntegrityCheckUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useCiRelTypesIntegrityCheckUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useCiRelTypesIntegrityCheckUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary confluenceDocumentResults
 */
export const useConfluenceDocumentResultsUsingPOSTHook = () => {
    const confluenceDocumentResultsUsingPOST = useCmdbSwaggerClient<Result | void>()

    return (params: ConfluenceDocumentResultsUsingPOSTParams) => {
        return confluenceDocumentResultsUsingPOST({ url: `/util/conf`, method: 'post', params })
    }
}

export const useConfluenceDocumentResultsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsUsingPOSTHook>>>,
        TError,
        { params: ConfluenceDocumentResultsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsUsingPOSTHook>>>,
    TError,
    { params: ConfluenceDocumentResultsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const confluenceDocumentResultsUsingPOST = useConfluenceDocumentResultsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsUsingPOSTHook>>>,
        { params: ConfluenceDocumentResultsUsingPOSTParams }
    > = (props) => {
        const { params } = props ?? {}

        return confluenceDocumentResultsUsingPOST(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ConfluenceDocumentResultsUsingPOSTMutationResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsUsingPOSTHook>>>
>

export type ConfluenceDocumentResultsUsingPOSTMutationError = unknown

/**
 * @summary confluenceDocumentResults
 */
export const useConfluenceDocumentResultsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useConfluenceDocumentResultsUsingPOSTHook>>>,
        TError,
        { params: ConfluenceDocumentResultsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useConfluenceDocumentResultsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary integrityCheck
 */
export const useIntegrityCheckUsingGETHook = () => {
    const integrityCheckUsingGET = useCmdbSwaggerClient<IntegrityCheckHolder>()

    return (signal?: AbortSignal) => {
        return integrityCheckUsingGET({ url: `/util/databaseIntegrityCheck`, method: 'get', signal })
    }
}

export const getIntegrityCheckUsingGETQueryKey = () => [`/util/databaseIntegrityCheck`] as const

export const useIntegrityCheckUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getIntegrityCheckUsingGETQueryKey()

    const integrityCheckUsingGET = useIntegrityCheckUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>> = ({ signal }) =>
        integrityCheckUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type IntegrityCheckUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>>
export type IntegrityCheckUsingGETQueryError = void

/**
 * @summary integrityCheck
 */
export const useIntegrityCheckUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useIntegrityCheckUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useIntegrityCheckUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getDocument
 */
export const useGetDocumentUsingGETHook = () => {
    const getDocumentUsingGET = useCmdbSwaggerClient<GetResponseWrapper>()

    return (ciUuid: string, signal?: AbortSignal) => {
        return getDocumentUsingGET({ url: `/util/getDocument/${ciUuid}`, method: 'get', signal })
    }
}

export const getGetDocumentUsingGETQueryKey = (ciUuid: string) => [`/util/getDocument/${ciUuid}`] as const

export const useGetDocumentUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>, TError = void>(
    ciUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetDocumentUsingGETQueryKey(ciUuid)

    const getDocumentUsingGET = useGetDocumentUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>> = ({ signal }) =>
        getDocumentUsingGET(ciUuid, signal)

    return { queryKey, queryFn, enabled: !!ciUuid, ...queryOptions }
}

export type GetDocumentUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>>
export type GetDocumentUsingGETQueryError = void

/**
 * @summary getDocument
 */
export const useGetDocumentUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>, TError = void>(
    ciUuid: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetDocumentUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetDocumentUsingGETQueryOptions(ciUuid, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary reindexHierarchy
 */
export const useReindexHierarchyUsingPOSTHook = () => {
    const reindexHierarchyUsingPOST = useCmdbSwaggerClient<string | void>()

    return (params?: ReindexHierarchyUsingPOSTParams) => {
        return reindexHierarchyUsingPOST({ url: `/util/hierarchypo`, method: 'post', params })
    }
}

export const useReindexHierarchyUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexHierarchyUsingPOSTHook>>>,
        TError,
        { params?: ReindexHierarchyUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReindexHierarchyUsingPOSTHook>>>,
    TError,
    { params?: ReindexHierarchyUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexHierarchyUsingPOST = useReindexHierarchyUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReindexHierarchyUsingPOSTHook>>>,
        { params?: ReindexHierarchyUsingPOSTParams }
    > = (props) => {
        const { params } = props ?? {}

        return reindexHierarchyUsingPOST(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexHierarchyUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexHierarchyUsingPOSTHook>>>>

export type ReindexHierarchyUsingPOSTMutationError = unknown

/**
 * @summary reindexHierarchy
 */
export const useReindexHierarchyUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexHierarchyUsingPOSTHook>>>,
        TError,
        { params?: ReindexHierarchyUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReindexHierarchyUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary partialReindex
 */
export const usePartialReindexUsingPOSTHook = () => {
    const partialReindexUsingPOST = useCmdbSwaggerClient<string | void>()

    return (params: PartialReindexUsingPOSTParams) => {
        return partialReindexUsingPOST({ url: `/util/indexelastic`, method: 'post', params })
    }
}

export const usePartialReindexUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof usePartialReindexUsingPOSTHook>>>,
        TError,
        { params: PartialReindexUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePartialReindexUsingPOSTHook>>>,
    TError,
    { params: PartialReindexUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const partialReindexUsingPOST = usePartialReindexUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof usePartialReindexUsingPOSTHook>>>,
        { params: PartialReindexUsingPOSTParams }
    > = (props) => {
        const { params } = props ?? {}

        return partialReindexUsingPOST(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type PartialReindexUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePartialReindexUsingPOSTHook>>>>

export type PartialReindexUsingPOSTMutationError = unknown

/**
 * @summary partialReindex
 */
export const usePartialReindexUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof usePartialReindexUsingPOSTHook>>>,
        TError,
        { params: PartialReindexUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = usePartialReindexUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary getProperties
 */
export const useGetPropertiesUsingGETHook = () => {
    const getPropertiesUsingGET = useCmdbSwaggerClient<GetPropertiesUsingGET200>()

    return (signal?: AbortSignal) => {
        return getPropertiesUsingGET({ url: `/util/properties`, method: 'get', signal })
    }
}

export const getGetPropertiesUsingGETQueryKey = () => [`/util/properties`] as const

export const useGetPropertiesUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>,
    TError = void,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetPropertiesUsingGETQueryKey()

    const getPropertiesUsingGET = useGetPropertiesUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>> = ({ signal }) => getPropertiesUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetPropertiesUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>>
export type GetPropertiesUsingGETQueryError = void

/**
 * @summary getProperties
 */
export const useGetPropertiesUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>, TError = void>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetPropertiesUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetPropertiesUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary reindexCi
 */
export const useReindexCiUsingPOSTHook = () => {
    const reindexCiUsingPOST = useCmdbSwaggerClient<string | void>()

    return (ciUuid: string) => {
        return reindexCiUsingPOST({ url: `/util/reindexci/${ciUuid}`, method: 'post' })
    }
}

export const useReindexCiUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexCiUsingPOSTHook>>>, TError, { ciUuid: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexCiUsingPOSTHook>>>, TError, { ciUuid: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexCiUsingPOST = useReindexCiUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReindexCiUsingPOSTHook>>>, { ciUuid: string }> = (props) => {
        const { ciUuid } = props ?? {}

        return reindexCiUsingPOST(ciUuid)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexCiUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexCiUsingPOSTHook>>>>

export type ReindexCiUsingPOSTMutationError = unknown

/**
 * @summary reindexCi
 */
export const useReindexCiUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexCiUsingPOSTHook>>>, TError, { ciUuid: string }, TContext>
}) => {
    const mutationOptions = useReindexCiUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary reindex
 */
export const useReindexUsingPOSTHook = () => {
    const reindexUsingPOST = useCmdbSwaggerClient<string | void>()

    return (params?: ReindexUsingPOSTParams) => {
        return reindexUsingPOST({ url: `/util/reindexelastic`, method: 'post', params })
    }
}

export const useReindexUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexUsingPOSTHook>>>,
        TError,
        { params?: ReindexUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useReindexUsingPOSTHook>>>, TError, { params?: ReindexUsingPOSTParams }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexUsingPOST = useReindexUsingPOSTHook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useReindexUsingPOSTHook>>>, { params?: ReindexUsingPOSTParams }> = (
        props,
    ) => {
        const { params } = props ?? {}

        return reindexUsingPOST(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexUsingPOSTHook>>>>

export type ReindexUsingPOSTMutationError = unknown

/**
 * @summary reindex
 */
export const useReindexUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexUsingPOSTHook>>>,
        TError,
        { params?: ReindexUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReindexUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary reindexRelationships
 */
export const useReindexRelationshipsUsingPOSTHook = () => {
    const reindexRelationshipsUsingPOST = useCmdbSwaggerClient<ResponseEntity | void>()

    return (params?: ReindexRelationshipsUsingPOSTParams) => {
        return reindexRelationshipsUsingPOST({ url: `/util/reindexrelationships`, method: 'post', params })
    }
}

export const useReindexRelationshipsUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsUsingPOSTHook>>>,
        TError,
        { params?: ReindexRelationshipsUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsUsingPOSTHook>>>,
    TError,
    { params?: ReindexRelationshipsUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexRelationshipsUsingPOST = useReindexRelationshipsUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsUsingPOSTHook>>>,
        { params?: ReindexRelationshipsUsingPOSTParams }
    > = (props) => {
        const { params } = props ?? {}

        return reindexRelationshipsUsingPOST(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexRelationshipsUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsUsingPOSTHook>>>>

export type ReindexRelationshipsUsingPOSTMutationError = unknown

/**
 * @summary reindexRelationships
 */
export const useReindexRelationshipsUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexRelationshipsUsingPOSTHook>>>,
        TError,
        { params?: ReindexRelationshipsUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useReindexRelationshipsUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary reindexReports
 */
export const useReindexReportsUsingDELETEHook = () => {
    const reindexReportsUsingDELETE = useCmdbSwaggerClient<void>()

    return (params?: ReindexReportsUsingDELETEParams) => {
        return reindexReportsUsingDELETE({ url: `/util/reports`, method: 'delete', params })
    }
}

export const useReindexReportsUsingDELETEMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexReportsUsingDELETEHook>>>,
        TError,
        { params?: ReindexReportsUsingDELETEParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReindexReportsUsingDELETEHook>>>,
    TError,
    { params?: ReindexReportsUsingDELETEParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const reindexReportsUsingDELETE = useReindexReportsUsingDELETEHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useReindexReportsUsingDELETEHook>>>,
        { params?: ReindexReportsUsingDELETEParams }
    > = (props) => {
        const { params } = props ?? {}

        return reindexReportsUsingDELETE(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReindexReportsUsingDELETEMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReindexReportsUsingDELETEHook>>>>

export type ReindexReportsUsingDELETEMutationError = unknown

/**
 * @summary reindexReports
 */
export const useReindexReportsUsingDELETE = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useReindexReportsUsingDELETEHook>>>,
        TError,
        { params?: ReindexReportsUsingDELETEParams },
        TContext
    >
}) => {
    const mutationOptions = useReindexReportsUsingDELETEMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary updateConfluence
 */
export const useUpdateConfluenceUsingPOSTHook = () => {
    const updateConfluenceUsingPOST = useCmdbSwaggerClient<RequestIdUi | void>()

    return (docUuid: string, version: Version, params?: UpdateConfluenceUsingPOSTParams) => {
        return updateConfluenceUsingPOST({
            url: `/util/update/docConfluence/${docUuid}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: version,
            params,
        })
    }
}

export const useUpdateConfluenceUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceUsingPOSTHook>>>,
        TError,
        { docUuid: string; data: Version; params?: UpdateConfluenceUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceUsingPOSTHook>>>,
    TError,
    { docUuid: string; data: Version; params?: UpdateConfluenceUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateConfluenceUsingPOST = useUpdateConfluenceUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceUsingPOSTHook>>>,
        { docUuid: string; data: Version; params?: UpdateConfluenceUsingPOSTParams }
    > = (props) => {
        const { docUuid, data, params } = props ?? {}

        return updateConfluenceUsingPOST(docUuid, data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateConfluenceUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceUsingPOSTHook>>>>
export type UpdateConfluenceUsingPOSTMutationBody = Version
export type UpdateConfluenceUsingPOSTMutationError = unknown

/**
 * @summary updateConfluence
 */
export const useUpdateConfluenceUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateConfluenceUsingPOSTHook>>>,
        TError,
        { docUuid: string; data: Version; params?: UpdateConfluenceUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useUpdateConfluenceUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary validateStoreGraph
 */
export const useValidateStoreGraphUsingPOSTHook = () => {
    const validateStoreGraphUsingPOST = useCmdbSwaggerClient<ErrorMessageHolderUi | void>()

    return (graphRequestUiBody: GraphRequestUiBody, params?: ValidateStoreGraphUsingPOSTParams) => {
        return validateStoreGraphUsingPOST({
            url: `/validate/graph`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: graphRequestUiBody,
            params,
        })
    }
}

export const useValidateStoreGraphUsingPOSTMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphUsingPOSTHook>>>,
        TError,
        { data: GraphRequestUiBody; params?: ValidateStoreGraphUsingPOSTParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphUsingPOSTHook>>>,
    TError,
    { data: GraphRequestUiBody; params?: ValidateStoreGraphUsingPOSTParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const validateStoreGraphUsingPOST = useValidateStoreGraphUsingPOSTHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphUsingPOSTHook>>>,
        { data: GraphRequestUiBody; params?: ValidateStoreGraphUsingPOSTParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return validateStoreGraphUsingPOST(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ValidateStoreGraphUsingPOSTMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphUsingPOSTHook>>>>
export type ValidateStoreGraphUsingPOSTMutationBody = GraphRequestUiBody
export type ValidateStoreGraphUsingPOSTMutationError = unknown

/**
 * @summary validateStoreGraph
 */
export const useValidateStoreGraphUsingPOST = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useValidateStoreGraphUsingPOSTHook>>>,
        TError,
        { data: GraphRequestUiBody; params?: ValidateStoreGraphUsingPOSTParams },
        TContext
    >
}) => {
    const mutationOptions = useValidateStoreGraphUsingPOSTMutationOptions(options)

    return useMutation(mutationOptions)
}

/**
 * @summary validateCIsByTypesAndOwner
 */
export const useValidateCIsByTypesAndOwnerUsingGETHook = () => {
    const validateCIsByTypesAndOwnerUsingGET = useCmdbSwaggerClient<CiProblemMessageHolderListUi>()

    return (params: ValidateCIsByTypesAndOwnerUsingGETParams, signal?: AbortSignal) => {
        return validateCIsByTypesAndOwnerUsingGET({ url: `/validateCIsByTypesAndOwner`, method: 'get', params, signal })
    }
}

export const getValidateCIsByTypesAndOwnerUsingGETQueryKey = (params: ValidateCIsByTypesAndOwnerUsingGETParams) =>
    [`/validateCIsByTypesAndOwner`, ...(params ? [params] : [])] as const

export const useValidateCIsByTypesAndOwnerUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>,
    TError = void,
>(
    params: ValidateCIsByTypesAndOwnerUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getValidateCIsByTypesAndOwnerUsingGETQueryKey(params)

    const validateCIsByTypesAndOwnerUsingGET = useValidateCIsByTypesAndOwnerUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>> = ({ signal }) =>
        validateCIsByTypesAndOwnerUsingGET(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ValidateCIsByTypesAndOwnerUsingGETQueryResult = NonNullable<
    Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>
>
export type ValidateCIsByTypesAndOwnerUsingGETQueryError = void

/**
 * @summary validateCIsByTypesAndOwner
 */
export const useValidateCIsByTypesAndOwnerUsingGET = <
    TData = Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>,
    TError = void,
>(
    params: ValidateCIsByTypesAndOwnerUsingGETParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useValidateCIsByTypesAndOwnerUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useValidateCIsByTypesAndOwnerUsingGETQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

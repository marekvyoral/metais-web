/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * MetaIS Enums Repo
 * Api Documentation
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery } from '@tanstack/react-query'
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useEnumsRepoSwaggerClient } from '../hooks/useEnumsRepoSwaggerClient'
export interface EnumTypePreview {
    category?: string
    code?: string
    description?: string
    id?: number
    name?: string
    valid?: boolean
    version?: string
}

export interface EnumTypePreviewList {
    results?: EnumTypePreview[]
}

export interface EnumItem {
    code?: string
    description?: string
    engDescription?: string
    engValue?: string
    id?: number
    orderList?: number
    valid?: boolean
    value?: string
}

export interface EnumType {
    category?: string
    code?: string
    description?: string
    enumItems?: EnumItem[]
    id?: number
    name?: string
    valid?: boolean
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary fireJobNow
 */
export const useFireJobNowUsingGETHook = () => {
    const fireJobNowUsingGET = useEnumsRepoSwaggerClient<void>()

    return (jobName: unknown, signal?: AbortSignal) => {
        return fireJobNowUsingGET({ url: `/scheduler/fire/${jobName}`, method: 'get', signal })
    }
}

export const getFireJobNowUsingGETQueryKey = (jobName: unknown) => [`/scheduler/fire/${jobName}`] as const

export const useFireJobNowUsingGETQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>, TError = unknown>(
    jobName: unknown,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getFireJobNowUsingGETQueryKey(jobName)

    const fireJobNowUsingGET = useFireJobNowUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>> = ({ signal }) =>
        fireJobNowUsingGET(jobName, signal)

    return { queryKey, queryFn, enabled: !!jobName, ...queryOptions }
}

export type FireJobNowUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>>
export type FireJobNowUsingGETQueryError = unknown

/**
 * @summary fireJobNow
 */
export const useFireJobNowUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>, TError = unknown>(
    jobName: unknown,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useFireJobNowUsingGETHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useFireJobNowUsingGETQueryOptions(jobName, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

/**
 * @summary getJobList
 */
export const useGetJobListUsingGETHook = () => {
    const getJobListUsingGET = useEnumsRepoSwaggerClient<void>()

    return (signal?: AbortSignal) => {
        return getJobListUsingGET({ url: `/scheduler/jobList`, method: 'get', signal })
    }
}

export const getGetJobListUsingGETQueryKey = () => [`/scheduler/jobList`] as const

export const useGetJobListUsingGETQueryOptions = <
    TData = Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>,
    TError = unknown,
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetJobListUsingGETQueryKey()

    const getJobListUsingGET = useGetJobListUsingGETHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>> = ({ signal }) => getJobListUsingGET(signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type GetJobListUsingGETQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>>
export type GetJobListUsingGETQueryError = unknown

/**
 * @summary getJobList
 */
export const useGetJobListUsingGET = <TData = Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>, TError = unknown>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetJobListUsingGETHook>>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useGetJobListUsingGETQueryOptions(options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

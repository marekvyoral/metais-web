//@ts-nocheck
/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * MetaIS Impexp CMDB
 * OpenAPI spec version: 3.0-SNAPSHOT
 */
import { useQuery, useMutation } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryFunction, MutationFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { useImpexpCmdbSwaggerClient } from '../hooks/useImpexpCmdbSwaggerClient'
export type ValidateContentBody = {
    file: Blob
}

export type ValidateContentParams = {
    type: string
    roleId?: string
    poId?: string
}

export type UpdateContentBody = {
    file: Blob
}

export type UpdateContentParams = {
    roleId?: string
    poId?: string
}

export type ExportCsv6Type = (typeof ExportCsv6Type)[keyof typeof ExportCsv6Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCsv6Type = {
    COMMON: 'COMMON',
    GOALS: 'GOALS',
    KRIS: 'KRIS',
    KS: 'KS',
    ISVS: 'ISVS',
} as const

export type ExportCsv6Params = {
    uuid: string
    type: ExportCsv6Type
    version: number
}

export type ExportExcel6Type = (typeof ExportExcel6Type)[keyof typeof ExportExcel6Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportExcel6Type = {
    COMMON: 'COMMON',
    GOALS: 'GOALS',
    KRIS: 'KRIS',
    KS: 'KS',
    ISVS: 'ISVS',
} as const

export type ExportExcel6Params = {
    uuid: string
    type: ExportExcel6Type
    version: number
}

export type ExportXml6Type = (typeof ExportXml6Type)[keyof typeof ExportXml6Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportXml6Type = {
    COMMON: 'COMMON',
    GOALS: 'GOALS',
    KRIS: 'KRIS',
    KS: 'KS',
    ISVS: 'ISVS',
} as const

export type ExportXml6Params = {
    uuid: string
    type: ExportXml6Type
    version: number
}

export type ExportCsv4Params = {
    reportExecute: ReportExecute
}

export type ExportExcel4Params = {
    reportExecute: ReportExecute
}

export type ExportXml4Params = {
    reportExecute: ReportExecute
}

export type ExportCsv2Params = {
    filter: CiListFilterContainerUi
}

export type ExportExcel2Params = {
    filter: CiListFilterContainerUi
}

export type ExportCsv1Params = {
    serviceType: string
    project: string
    intervalStart: string
    intervalEnd: string
    services?: string[]
    isvs?: string
}

export type ExportCsvParams = {
    serviceType: string
    project: string
    intervalStart: string
    intervalEnd: string
    services?: string[]
    isvs?: string
}

export type ExportExcel1Params = {
    serviceType: string
    project: string
    intervalStart: string
    intervalEnd: string
    services?: string[]
    isvs?: string
}

export type ExportExcelParams = {
    serviceType: string
    project: string
    intervalStart: string
    intervalEnd: string
    services?: string[]
    isvs?: string
}

export type ExportXml3Params = {
    serviceType: string
    project: string
    intervalStart: string
    intervalEnd: string
    services?: string[]
    isvs?: string
}

export type ExportXml2Params = {
    serviceType: string
    project: string
    intervalStart: string
    intervalEnd: string
    services?: string[]
    isvs?: string
}

export type ExportRelCsvParams = {
    filter: CiListFilterContainerUi
}

export type ExportRelExcelParams = {
    filter: CiListFilterContainerUi
}

export type ExportRelXmlParams = {
    filter: CiListFilterContainerUi
}

export type ExportXmlParams = {
    filter: CiListFilterContainerUi
}

export type ImportResultImportState = (typeof ImportResultImportState)[keyof typeof ImportResultImportState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportResultImportState = {
    STARTED: 'STARTED',
    IN_PROGRESS: 'IN_PROGRESS',
    DONE: 'DONE',
    DONE_WITH_ERRORS: 'DONE_WITH_ERRORS',
} as const

export type ErrorMessageUiExtendedErrorType = (typeof ErrorMessageUiExtendedErrorType)[keyof typeof ErrorMessageUiExtendedErrorType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiExtendedErrorType = {
    OWNER: 'OWNER',
    OWNER_CREATE_ROLE: 'OWNER_CREATE_ROLE',
    CREATE_CI: 'CREATE_CI',
    UPDATE_CI: 'UPDATE_CI',
    CREATE_REL: 'CREATE_REL',
    UPDATE_REL: 'UPDATE_REL',
    UPDATE_INVALIDATE_CI: 'UPDATE_INVALIDATE_CI',
    CHANGE_ATTRIBUTE: 'CHANGE_ATTRIBUTE',
    LIMIT: 'LIMIT',
    ENUM: 'ENUM',
    EXPRESION: 'EXPRESION',
    ATTRIBUTE: 'ATTRIBUTE',
    MANDATORY: 'MANDATORY',
    REGEX: 'REGEX',
    NUMBER_FORMAT: 'NUMBER_FORMAT',
    MAX_STRING_SIZE: 'MAX_STRING_SIZE',
    INVALID_TYPE: 'INVALID_TYPE',
    GROUP_RIGHT: 'GROUP_RIGHT',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    PROCESSING_ERROR: 'PROCESSING_ERROR',
} as const

export type ErrorMessageUiExtendedItemType = (typeof ErrorMessageUiExtendedItemType)[keyof typeof ErrorMessageUiExtendedItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrorMessageUiExtendedItemType = {
    RELATIONSHIP: 'RELATIONSHIP',
    CONFIGURATION_ITEM: 'CONFIGURATION_ITEM',
} as const

export interface ErrorDetailUi {
    minConstrain?: number
    maxConstrain?: number
    enumConstrain?: string
    regex?: string
    notExistAttribute?: string
    notFilledAttribute?: string
    notNumber?: string
    notAllowedExpression?: string
    notAuthorizedGid?: string
    notAuthorizedRole?: string
    itemTechnicalTypeName?: string
    description?: string
    maxStringSize?: number
    invalidType?: string
}

export interface ErrorMessageUiExtended {
    itemType?: ErrorMessageUiExtendedItemType
    itemId?: string
    attributeName?: string
    errorDetail?: ErrorDetailUi
    errorType?: ErrorMessageUiExtendedErrorType
    itemName?: string
    itemCode?: string
}

export interface CMDBItem {
    uuid?: string
    code?: string
}

export interface ImportResult {
    count?: number
    type?: string
    items?: CMDBItem[]
    importState?: ImportResultImportState
    errorMessage?: ErrorMessageUiExtended[]
}

export interface RequestIdUi {
    requestId?: string
}

export interface ExportFilter {
    ids?: string[]
}

export type ReportExecuteParameters = { [key: string]: { [key: string]: any } }

export interface ReportExecute {
    page?: number
    perPage?: number
    parameters?: ReportExecuteParameters
}

export type UsageTypeFilterUiBlackListItem = (typeof UsageTypeFilterUiBlackListItem)[keyof typeof UsageTypeFilterUiBlackListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiBlackListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export type UsageTypeFilterUiWhiteListItem = (typeof UsageTypeFilterUiWhiteListItem)[keyof typeof UsageTypeFilterUiWhiteListItem]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageTypeFilterUiWhiteListItem = {
    system: 'system',
    application: 'application',
    custom: 'custom',
} as const

export interface UsageTypeFilterUi {
    whiteList?: UsageTypeFilterUiWhiteListItem[]
    blackList?: UsageTypeFilterUiBlackListItem[]
}

export interface RelTypeFilterUi {
    relType?: string
    relCiUuids?: string[]
    onlyValidRel?: boolean
    byHierarchy?: boolean
}

export type FilterValueUiValue = { [key: string]: any }

export interface FilterValueUi {
    equality?: string
    value?: FilterValueUiValue
}

export interface FilterMetaAttributesUi {
    owner?: string[]
    liableEntity?: string[]
    liableEntityByHierarchy?: boolean
    lastAction?: string[]
    state?: string[]
    createdBy?: string[]
    createdAtFrom?: string
    createdAtTo?: string
    lastModifiedBy?: string[]
    lastModifiedAtFrom?: string
    lastModifiedAtTo?: string
}

export interface FilterAttributesUi {
    name?: string
    filterValue?: FilterValueUi[]
}

export interface RelFilterUi {
    type?: string[]
    usageType?: string[]
    uuid?: string[]
    attributes?: FilterAttributesUi[]
    metaAttributes?: FilterMetaAttributesUi
    fullTextSearch?: string
    searchFields?: string[]
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    poUuid?: string
    startCiTypeName?: string[]
    endCiTypeName?: string[]
    startCiUuid?: string[]
    endCiUuid?: string[]
    startOrEndCiUuid?: string[]
}

export interface CiFilterUi {
    type?: string[]
    usageType?: string[]
    uuid?: string[]
    attributes?: FilterAttributesUi[]
    metaAttributes?: FilterMetaAttributesUi
    fullTextSearch?: string
    searchFields?: string[]
    mustExistAttributes?: string[]
    mustNotExistAttributes?: string[]
    relTypeFilters?: RelTypeFilterUi[]
    poUuid?: string
}

export interface CiListFilterContainerUi {
    page?: number
    perpage?: number
    sortBy?: string
    sortType?: string
    sortSource?: string
    sortByEndCi?: boolean
    getIncidentRelations?: boolean
    usageTypeFilter?: UsageTypeFilterUi
    filter?: CiFilterUi
    relFilter?: RelFilterUi
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const useExportXmlHook = () => {
    const exportXml = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportXmlParams, signal?: AbortSignal) => {
        return exportXml({ url: `/export/xml`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportXmlQueryKey = (params: ExportXmlParams) => [`/export/xml`, ...(params ? [params] : [])] as const

export const useExportXmlQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>, TError = unknown>(
    params: ExportXmlParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportXmlQueryKey(params)

    const exportXml = useExportXmlHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>> = ({ signal }) => exportXml(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportXmlQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>>
export type ExportXmlQueryError = unknown

export const useExportXml = <TData = Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>, TError = unknown>(
    params: ExportXmlParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXmlHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportXmlQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportXml1Hook = () => {
    const exportXml1 = useImpexpCmdbSwaggerClient<Blob>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return exportXml1({
            url: `/export/xml`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
            responseType: 'blob',
        })
    }
}

export const useExportXml1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXml1 = useExportXml1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportXml1Hook>>>, { data: CiListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return exportXml1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXml1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXml1Hook>>>>
export type ExportXml1MutationBody = CiListFilterContainerUi
export type ExportXml1MutationError = unknown

export const useExportXml1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useExportXml1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportRelXmlHook = () => {
    const exportRelXml = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportRelXmlParams, signal?: AbortSignal) => {
        return exportRelXml({ url: `/export/rel/xml`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportRelXmlQueryKey = (params: ExportRelXmlParams) => [`/export/rel/xml`, ...(params ? [params] : [])] as const

export const useExportRelXmlQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>, TError = unknown>(
    params: ExportRelXmlParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportRelXmlQueryKey(params)

    const exportRelXml = useExportRelXmlHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>> = ({ signal }) => exportRelXml(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportRelXmlQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>>
export type ExportRelXmlQueryError = unknown

export const useExportRelXml = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>, TError = unknown>(
    params: ExportRelXmlParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXmlHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportRelXmlQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportRelXml1Hook = () => {
    const exportRelXml1 = useImpexpCmdbSwaggerClient<Blob>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return exportRelXml1({
            url: `/export/rel/xml`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
            responseType: 'blob',
        })
    }
}

export const useExportRelXml1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXml1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXml1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportRelXml1 = useExportRelXml1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportRelXml1Hook>>>, { data: CiListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return exportRelXml1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportRelXml1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelXml1Hook>>>>
export type ExportRelXml1MutationBody = CiListFilterContainerUi
export type ExportRelXml1MutationError = unknown

export const useExportRelXml1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelXml1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useExportRelXml1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportRelExcelHook = () => {
    const exportRelExcel = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportRelExcelParams, signal?: AbortSignal) => {
        return exportRelExcel({ url: `/export/rel/excel`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportRelExcelQueryKey = (params: ExportRelExcelParams) => [`/export/rel/excel`, ...(params ? [params] : [])] as const

export const useExportRelExcelQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>, TError = unknown>(
    params: ExportRelExcelParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportRelExcelQueryKey(params)

    const exportRelExcel = useExportRelExcelHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>> = ({ signal }) => exportRelExcel(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportRelExcelQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>>
export type ExportRelExcelQueryError = unknown

export const useExportRelExcel = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>, TError = unknown>(
    params: ExportRelExcelParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcelHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportRelExcelQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportRelExcel1Hook = () => {
    const exportRelExcel1 = useImpexpCmdbSwaggerClient<Blob>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return exportRelExcel1({
            url: `/export/rel/excel`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
            responseType: 'blob',
        })
    }
}

export const useExportRelExcel1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcel1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcel1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportRelExcel1 = useExportRelExcel1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportRelExcel1Hook>>>, { data: CiListFilterContainerUi }> = (
        props,
    ) => {
        const { data } = props ?? {}

        return exportRelExcel1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportRelExcel1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelExcel1Hook>>>>
export type ExportRelExcel1MutationBody = CiListFilterContainerUi
export type ExportRelExcel1MutationError = unknown

export const useExportRelExcel1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelExcel1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useExportRelExcel1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportRelCsvHook = () => {
    const exportRelCsv = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportRelCsvParams, signal?: AbortSignal) => {
        return exportRelCsv({ url: `/export/rel/csv`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportRelCsvQueryKey = (params: ExportRelCsvParams) => [`/export/rel/csv`, ...(params ? [params] : [])] as const

export const useExportRelCsvQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>, TError = unknown>(
    params: ExportRelCsvParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportRelCsvQueryKey(params)

    const exportRelCsv = useExportRelCsvHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>> = ({ signal }) => exportRelCsv(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportRelCsvQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>>
export type ExportRelCsvQueryError = unknown

export const useExportRelCsv = <TData = Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>, TError = unknown>(
    params: ExportRelCsvParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsvHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportRelCsvQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportRelCsv1Hook = () => {
    const exportRelCsv1 = useImpexpCmdbSwaggerClient<Blob>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return exportRelCsv1({
            url: `/export/rel/csv`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
            responseType: 'blob',
        })
    }
}

export const useExportRelCsv1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsv1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsv1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportRelCsv1 = useExportRelCsv1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportRelCsv1Hook>>>, { data: CiListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return exportRelCsv1(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportRelCsv1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportRelCsv1Hook>>>>
export type ExportRelCsv1MutationBody = CiListFilterContainerUi
export type ExportRelCsv1MutationError = unknown

export const useExportRelCsv1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportRelCsv1Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useExportRelCsv1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportXml2Hook = () => {
    const exportXml2 = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportXml2Params, signal?: AbortSignal) => {
        return exportXml2({ url: `/export/monitoring/xml`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportXml2QueryKey = (params: ExportXml2Params) => [`/export/monitoring/xml`, ...(params ? [params] : [])] as const

export const useExportXml2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>, TError = unknown>(
    params: ExportXml2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportXml2QueryKey(params)

    const exportXml2 = useExportXml2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>> = ({ signal }) => exportXml2(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportXml2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>>
export type ExportXml2QueryError = unknown

export const useExportXml2 = <TData = Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>, TError = unknown>(
    params: ExportXml2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXml2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportXml2QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportXml3Hook = () => {
    const exportXml3 = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportXml3Params) => {
        return exportXml3({ url: `/export/monitoring/xml`, method: 'put', params, responseType: 'blob' })
    }
}

export const useExportXml3MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml3Hook>>>, TError, { params: ExportXml3Params }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml3Hook>>>, TError, { params: ExportXml3Params }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXml3 = useExportXml3Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportXml3Hook>>>, { params: ExportXml3Params }> = (props) => {
        const { params } = props ?? {}

        return exportXml3(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXml3MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXml3Hook>>>>

export type ExportXml3MutationError = unknown

export const useExportXml3 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml3Hook>>>, TError, { params: ExportXml3Params }, TContext>
}) => {
    const mutationOptions = useExportXml3MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportExcelHook = () => {
    const exportExcel = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportExcelParams, signal?: AbortSignal) => {
        return exportExcel({ url: `/export/monitoring/excel`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportExcelQueryKey = (params: ExportExcelParams) => [`/export/monitoring/excel`, ...(params ? [params] : [])] as const

export const useExportExcelQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>, TError = unknown>(
    params: ExportExcelParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportExcelQueryKey(params)

    const exportExcel = useExportExcelHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>> = ({ signal }) => exportExcel(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportExcelQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>>
export type ExportExcelQueryError = unknown

export const useExportExcel = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>, TError = unknown>(
    params: ExportExcelParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcelHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportExcelQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportExcel1Hook = () => {
    const exportExcel1 = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportExcel1Params) => {
        return exportExcel1({ url: `/export/monitoring/excel`, method: 'put', params, responseType: 'blob' })
    }
}

export const useExportExcel1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel1Hook>>>, TError, { params: ExportExcel1Params }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel1Hook>>>, TError, { params: ExportExcel1Params }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcel1 = useExportExcel1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportExcel1Hook>>>, { params: ExportExcel1Params }> = (props) => {
        const { params } = props ?? {}

        return exportExcel1(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcel1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcel1Hook>>>>

export type ExportExcel1MutationError = unknown

export const useExportExcel1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel1Hook>>>, TError, { params: ExportExcel1Params }, TContext>
}) => {
    const mutationOptions = useExportExcel1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportCsvHook = () => {
    const exportCsv = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportCsvParams, signal?: AbortSignal) => {
        return exportCsv({ url: `/export/monitoring/csv`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportCsvQueryKey = (params: ExportCsvParams) => [`/export/monitoring/csv`, ...(params ? [params] : [])] as const

export const useExportCsvQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>, TError = unknown>(
    params: ExportCsvParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportCsvQueryKey(params)

    const exportCsv = useExportCsvHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>> = ({ signal }) => exportCsv(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportCsvQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>>
export type ExportCsvQueryError = unknown

export const useExportCsv = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>, TError = unknown>(
    params: ExportCsvParams,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsvHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportCsvQueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportCsv1Hook = () => {
    const exportCsv1 = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportCsv1Params) => {
        return exportCsv1({ url: `/export/monitoring/csv`, method: 'put', params, responseType: 'blob' })
    }
}

export const useExportCsv1MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv1Hook>>>, TError, { params: ExportCsv1Params }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv1Hook>>>, TError, { params: ExportCsv1Params }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsv1 = useExportCsv1Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportCsv1Hook>>>, { params: ExportCsv1Params }> = (props) => {
        const { params } = props ?? {}

        return exportCsv1(params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsv1MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsv1Hook>>>>

export type ExportCsv1MutationError = unknown

export const useExportCsv1 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv1Hook>>>, TError, { params: ExportCsv1Params }, TContext>
}) => {
    const mutationOptions = useExportCsv1MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportExcel2Hook = () => {
    const exportExcel2 = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportExcel2Params, signal?: AbortSignal) => {
        return exportExcel2({ url: `/export/excel`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportExcel2QueryKey = (params: ExportExcel2Params) => [`/export/excel`, ...(params ? [params] : [])] as const

export const useExportExcel2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>, TError = unknown>(
    params: ExportExcel2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportExcel2QueryKey(params)

    const exportExcel2 = useExportExcel2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>> = ({ signal }) => exportExcel2(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportExcel2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>>
export type ExportExcel2QueryError = unknown

export const useExportExcel2 = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>, TError = unknown>(
    params: ExportExcel2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportExcel2QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportExcel3Hook = () => {
    const exportExcel3 = useImpexpCmdbSwaggerClient<Blob>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return exportExcel3({
            url: `/export/excel`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
            responseType: 'blob',
        })
    }
}

export const useExportExcel3MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel3Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel3Hook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcel3 = useExportExcel3Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportExcel3Hook>>>, { data: CiListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return exportExcel3(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcel3MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcel3Hook>>>>
export type ExportExcel3MutationBody = CiListFilterContainerUi
export type ExportExcel3MutationError = unknown

export const useExportExcel3 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel3Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useExportExcel3MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportCsv2Hook = () => {
    const exportCsv2 = useImpexpCmdbSwaggerClient<Blob>()

    return (params: ExportCsv2Params, signal?: AbortSignal) => {
        return exportCsv2({ url: `/export/csv`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportCsv2QueryKey = (params: ExportCsv2Params) => [`/export/csv`, ...(params ? [params] : [])] as const

export const useExportCsv2QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>, TError = unknown>(
    params: ExportCsv2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportCsv2QueryKey(params)

    const exportCsv2 = useExportCsv2Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>> = ({ signal }) => exportCsv2(params, signal)

    return { queryKey, queryFn, ...queryOptions }
}

export type ExportCsv2QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>>
export type ExportCsv2QueryError = unknown

export const useExportCsv2 = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>, TError = unknown>(
    params: ExportCsv2Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv2Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportCsv2QueryOptions(params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportCsv3Hook = () => {
    const exportCsv3 = useImpexpCmdbSwaggerClient<Blob>()

    return (ciListFilterContainerUi: CiListFilterContainerUi) => {
        return exportCsv3({
            url: `/export/csv`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: ciListFilterContainerUi,
            responseType: 'blob',
        })
    }
}

export const useExportCsv3MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv3Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv3Hook>>>, TError, { data: CiListFilterContainerUi }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsv3 = useExportCsv3Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportCsv3Hook>>>, { data: CiListFilterContainerUi }> = (props) => {
        const { data } = props ?? {}

        return exportCsv3(data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsv3MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsv3Hook>>>>
export type ExportCsv3MutationBody = CiListFilterContainerUi
export type ExportCsv3MutationError = unknown

export const useExportCsv3 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv3Hook>>>, TError, { data: CiListFilterContainerUi }, TContext>
}) => {
    const mutationOptions = useExportCsv3MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportXml4Hook = () => {
    const exportXml4 = useImpexpCmdbSwaggerClient<Blob>()

    return (reportId: number, params: ExportXml4Params, signal?: AbortSignal) => {
        return exportXml4({ url: `/export/report/xml/${reportId}`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportXml4QueryKey = (reportId: number, params: ExportXml4Params) =>
    [`/export/report/xml/${reportId}`, ...(params ? [params] : [])] as const

export const useExportXml4QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>, TError = unknown>(
    reportId: number,
    params: ExportXml4Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportXml4QueryKey(reportId, params)

    const exportXml4 = useExportXml4Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>> = ({ signal }) => exportXml4(reportId, params, signal)

    return { queryKey, queryFn, enabled: !!reportId, ...queryOptions }
}

export type ExportXml4QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>>
export type ExportXml4QueryError = unknown

export const useExportXml4 = <TData = Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>, TError = unknown>(
    reportId: number,
    params: ExportXml4Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportXml4Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportXml4QueryOptions(reportId, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportXml5Hook = () => {
    const exportXml5 = useImpexpCmdbSwaggerClient<Blob>()

    return (reportId: number, reportExecute: ReportExecute) => {
        return exportXml5({
            url: `/export/report/xml/${reportId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: reportExecute,
            responseType: 'blob',
        })
    }
}

export const useExportXml5MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXml5Hook>>>,
        TError,
        { reportId: number; data: ReportExecute },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportXml5Hook>>>, TError, { reportId: number; data: ReportExecute }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXml5 = useExportXml5Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportXml5Hook>>>, { reportId: number; data: ReportExecute }> = (
        props,
    ) => {
        const { reportId, data } = props ?? {}

        return exportXml5(reportId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXml5MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXml5Hook>>>>
export type ExportXml5MutationBody = ReportExecute
export type ExportXml5MutationError = unknown

export const useExportXml5 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXml5Hook>>>,
        TError,
        { reportId: number; data: ReportExecute },
        TContext
    >
}) => {
    const mutationOptions = useExportXml5MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportExcel4Hook = () => {
    const exportExcel4 = useImpexpCmdbSwaggerClient<Blob>()

    return (reportId: number, params: ExportExcel4Params, signal?: AbortSignal) => {
        return exportExcel4({ url: `/export/report/excel/${reportId}`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportExcel4QueryKey = (reportId: number, params: ExportExcel4Params) =>
    [`/export/report/excel/${reportId}`, ...(params ? [params] : [])] as const

export const useExportExcel4QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>, TError = unknown>(
    reportId: number,
    params: ExportExcel4Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportExcel4QueryKey(reportId, params)

    const exportExcel4 = useExportExcel4Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>> = ({ signal }) => exportExcel4(reportId, params, signal)

    return { queryKey, queryFn, enabled: !!reportId, ...queryOptions }
}

export type ExportExcel4QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>>
export type ExportExcel4QueryError = unknown

export const useExportExcel4 = <TData = Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>, TError = unknown>(
    reportId: number,
    params: ExportExcel4Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel4Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportExcel4QueryOptions(reportId, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportExcel5Hook = () => {
    const exportExcel5 = useImpexpCmdbSwaggerClient<Blob>()

    return (reportId: number, reportExecute: ReportExecute) => {
        return exportExcel5({
            url: `/export/report/excel/${reportId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: reportExecute,
            responseType: 'blob',
        })
    }
}

export const useExportExcel5MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcel5Hook>>>,
        TError,
        { reportId: number; data: ReportExecute },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportExcel5Hook>>>, TError, { reportId: number; data: ReportExecute }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcel5 = useExportExcel5Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportExcel5Hook>>>, { reportId: number; data: ReportExecute }> = (
        props,
    ) => {
        const { reportId, data } = props ?? {}

        return exportExcel5(reportId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcel5MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcel5Hook>>>>
export type ExportExcel5MutationBody = ReportExecute
export type ExportExcel5MutationError = unknown

export const useExportExcel5 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcel5Hook>>>,
        TError,
        { reportId: number; data: ReportExecute },
        TContext
    >
}) => {
    const mutationOptions = useExportExcel5MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportCsv4Hook = () => {
    const exportCsv4 = useImpexpCmdbSwaggerClient<Blob>()

    return (reportId: number, params: ExportCsv4Params, signal?: AbortSignal) => {
        return exportCsv4({ url: `/export/report/csv/${reportId}`, method: 'get', params, responseType: 'blob', signal })
    }
}

export const getExportCsv4QueryKey = (reportId: number, params: ExportCsv4Params) =>
    [`/export/report/csv/${reportId}`, ...(params ? [params] : [])] as const

export const useExportCsv4QueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>, TError = unknown>(
    reportId: number,
    params: ExportCsv4Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getExportCsv4QueryKey(reportId, params)

    const exportCsv4 = useExportCsv4Hook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>> = ({ signal }) => exportCsv4(reportId, params, signal)

    return { queryKey, queryFn, enabled: !!reportId, ...queryOptions }
}

export type ExportCsv4QueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>>
export type ExportCsv4QueryError = unknown

export const useExportCsv4 = <TData = Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>, TError = unknown>(
    reportId: number,
    params: ExportCsv4Params,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv4Hook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useExportCsv4QueryOptions(reportId, params, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}

export const useExportCsv5Hook = () => {
    const exportCsv5 = useImpexpCmdbSwaggerClient<Blob>()

    return (reportId: number, reportExecute: ReportExecute) => {
        return exportCsv5({
            url: `/export/report/csv/${reportId}`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: reportExecute,
            responseType: 'blob',
        })
    }
}

export const useExportCsv5MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsv5Hook>>>,
        TError,
        { reportId: number; data: ReportExecute },
        TContext
    >
}): UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useExportCsv5Hook>>>, TError, { reportId: number; data: ReportExecute }, TContext> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsv5 = useExportCsv5Hook()

    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useExportCsv5Hook>>>, { reportId: number; data: ReportExecute }> = (
        props,
    ) => {
        const { reportId, data } = props ?? {}

        return exportCsv5(reportId, data)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsv5MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsv5Hook>>>>
export type ExportCsv5MutationBody = ReportExecute
export type ExportCsv5MutationError = unknown

export const useExportCsv5 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsv5Hook>>>,
        TError,
        { reportId: number; data: ReportExecute },
        TContext
    >
}) => {
    const mutationOptions = useExportCsv5MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportXml6Hook = () => {
    const exportXml6 = useImpexpCmdbSwaggerClient<Blob>()

    return (exportFilter: ExportFilter, params: ExportXml6Params) => {
        return exportXml6({
            url: `/export/kris-to-be/xml`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilter,
            params,
            responseType: 'blob',
        })
    }
}

export const useExportXml6MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXml6Hook>>>,
        TError,
        { data: ExportFilter; params: ExportXml6Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportXml6Hook>>>,
    TError,
    { data: ExportFilter; params: ExportXml6Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportXml6 = useExportXml6Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportXml6Hook>>>,
        { data: ExportFilter; params: ExportXml6Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportXml6(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportXml6MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportXml6Hook>>>>
export type ExportXml6MutationBody = ExportFilter
export type ExportXml6MutationError = unknown

export const useExportXml6 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportXml6Hook>>>,
        TError,
        { data: ExportFilter; params: ExportXml6Params },
        TContext
    >
}) => {
    const mutationOptions = useExportXml6MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportExcel6Hook = () => {
    const exportExcel6 = useImpexpCmdbSwaggerClient<Blob>()

    return (exportFilter: ExportFilter, params: ExportExcel6Params) => {
        return exportExcel6({
            url: `/export/kris-to-be/xlsx`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilter,
            params,
            responseType: 'blob',
        })
    }
}

export const useExportExcel6MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcel6Hook>>>,
        TError,
        { data: ExportFilter; params: ExportExcel6Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportExcel6Hook>>>,
    TError,
    { data: ExportFilter; params: ExportExcel6Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportExcel6 = useExportExcel6Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportExcel6Hook>>>,
        { data: ExportFilter; params: ExportExcel6Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportExcel6(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportExcel6MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportExcel6Hook>>>>
export type ExportExcel6MutationBody = ExportFilter
export type ExportExcel6MutationError = unknown

export const useExportExcel6 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportExcel6Hook>>>,
        TError,
        { data: ExportFilter; params: ExportExcel6Params },
        TContext
    >
}) => {
    const mutationOptions = useExportExcel6MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useExportCsv6Hook = () => {
    const exportCsv6 = useImpexpCmdbSwaggerClient<Blob>()

    return (exportFilter: ExportFilter, params: ExportCsv6Params) => {
        return exportCsv6({
            url: `/export/kris-to-be/csv`,
            method: 'put',
            headers: { 'Content-Type': 'application/json' },
            data: exportFilter,
            params,
            responseType: 'blob',
        })
    }
}

export const useExportCsv6MutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsv6Hook>>>,
        TError,
        { data: ExportFilter; params: ExportCsv6Params },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useExportCsv6Hook>>>,
    TError,
    { data: ExportFilter; params: ExportCsv6Params },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const exportCsv6 = useExportCsv6Hook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useExportCsv6Hook>>>,
        { data: ExportFilter; params: ExportCsv6Params }
    > = (props) => {
        const { data, params } = props ?? {}

        return exportCsv6(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ExportCsv6MutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useExportCsv6Hook>>>>
export type ExportCsv6MutationBody = ExportFilter
export type ExportCsv6MutationError = unknown

export const useExportCsv6 = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useExportCsv6Hook>>>,
        TError,
        { data: ExportFilter; params: ExportCsv6Params },
        TContext
    >
}) => {
    const mutationOptions = useExportCsv6MutationOptions(options)

    return useMutation(mutationOptions)
}

export const useUpdateContentHook = () => {
    const updateContent = useImpexpCmdbSwaggerClient<RequestIdUi>()

    return (updateContentBody: UpdateContentBody, params?: UpdateContentParams) => {
        const formData = new FormData()
        formData.append('file', updateContentBody.file)

        return updateContent({ url: `/import`, method: 'post', headers: { 'Content-Type': 'multipart/form-data' }, data: formData, params })
    }
}

export const useUpdateContentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>,
        TError,
        { data: UpdateContentBody; params?: UpdateContentParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>,
    TError,
    { data: UpdateContentBody; params?: UpdateContentParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const updateContent = useUpdateContentHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>,
        { data: UpdateContentBody; params?: UpdateContentParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return updateContent(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateContentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>>
export type UpdateContentMutationBody = UpdateContentBody
export type UpdateContentMutationError = unknown

export const useUpdateContent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useUpdateContentHook>>>,
        TError,
        { data: UpdateContentBody; params?: UpdateContentParams },
        TContext
    >
}) => {
    const mutationOptions = useUpdateContentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useValidateContentHook = () => {
    const validateContent = useImpexpCmdbSwaggerClient<RequestIdUi>()

    return (validateContentBody: ValidateContentBody, params: ValidateContentParams) => {
        const formData = new FormData()
        formData.append('file', validateContentBody.file)

        return validateContent({
            url: `/import/validate`,
            method: 'post',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
            params,
        })
    }
}

export const useValidateContentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useValidateContentHook>>>,
        TError,
        { data: ValidateContentBody; params: ValidateContentParams },
        TContext
    >
}): UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useValidateContentHook>>>,
    TError,
    { data: ValidateContentBody; params: ValidateContentParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {}

    const validateContent = useValidateContentHook()

    const mutationFn: MutationFunction<
        Awaited<ReturnType<ReturnType<typeof useValidateContentHook>>>,
        { data: ValidateContentBody; params: ValidateContentParams }
    > = (props) => {
        const { data, params } = props ?? {}

        return validateContent(data, params)
    }

    return { mutationFn, ...mutationOptions }
}

export type ValidateContentMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useValidateContentHook>>>>
export type ValidateContentMutationBody = ValidateContentBody
export type ValidateContentMutationError = unknown

export const useValidateContent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<ReturnType<typeof useValidateContentHook>>>,
        TError,
        { data: ValidateContentBody; params: ValidateContentParams },
        TContext
    >
}) => {
    const mutationOptions = useValidateContentMutationOptions(options)

    return useMutation(mutationOptions)
}

export const useReadProgressHook = () => {
    const readProgress = useImpexpCmdbSwaggerClient<ImportResult>()

    return (requestId: string, signal?: AbortSignal) => {
        return readProgress({ url: `/import/progress/${requestId}`, method: 'get', signal })
    }
}

export const getReadProgressQueryKey = (requestId: string) => [`/import/progress/${requestId}`] as const

export const useReadProgressQueryOptions = <TData = Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>, TError = unknown>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>, TError, TData> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getReadProgressQueryKey(requestId)

    const readProgress = useReadProgressHook()

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>> = ({ signal }) => readProgress(requestId, signal)

    return { queryKey, queryFn, enabled: !!requestId, ...queryOptions }
}

export type ReadProgressQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>>
export type ReadProgressQueryError = unknown

export const useReadProgress = <TData = Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>, TError = unknown>(
    requestId: string,
    options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useReadProgressHook>>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions = useReadProgressQueryOptions(requestId, options)

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

    query.queryKey = queryOptions.queryKey

    return query
}
